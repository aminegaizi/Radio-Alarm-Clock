
RTC_test.elf:     format de fichier elf32-avr

Sections :
Idx Nom           Taille    VMA       LMA       Fich off  Algn
  0 .data         0000000c  00800100  00000c46  00000cda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000066  0080010c  0080010c  00000ce6  2**0
                  ALLOC
  3 .stab         000020c4  00000000  00000000  00000ce8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000124e  00000000  00000000  00002dac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003ffa  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000400c  2**2
                  CONTENTS, READONLY

Déassemblage de la section .text :

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e4       	ldi	r30, 0x46	; 70
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 37       	cpi	r26, 0x72	; 114
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 ed 04 	call	0x9da	; 0x9da <main>
  c6:	0c 94 21 06 	jmp	0xc42	; 0xc42 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <spi_init>:


void spi_init(void)
{
 /* Run this code before attempting to write to the LCD.*/
 DDRF  |= 0x08;  //port F bit 3 is enable for LCD
  ce:	e1 e6       	ldi	r30, 0x61	; 97
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	88 60       	ori	r24, 0x08	; 8
  d6:	80 83       	st	Z, r24
 PORTF &= 0xF7;  //port F bit 3 is initially low
  d8:	e2 e6       	ldi	r30, 0x62	; 98
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	87 7f       	andi	r24, 0xF7	; 247
  e0:	80 83       	st	Z, r24

 DDRB  |= 0x07;  //Turn on SS, MOSI, SCLK
  e2:	87 b3       	in	r24, 0x17	; 23
  e4:	87 60       	ori	r24, 0x07	; 7
  e6:	87 bb       	out	0x17, r24	; 23
 PORTB |= _BV(PB1);  //port B initalization for SPI, SS_n off
  e8:	c1 9a       	sbi	0x18, 1	; 24
//see: /$install_path/avr/include/avr/iom128.h for bit definitions   

 //Master mode, Clock=clk/4, Cycle half phase, Low polarity, MSB first
 SPCR=(1<<SPE) | (1<<MSTR); //enable SPI, clk low initially, rising edge sample
  ea:	80 e5       	ldi	r24, 0x50	; 80
  ec:	8d b9       	out	0x0d, r24	; 13
 SPSR=(1<<SPI2X);           //SPI at 2x speed (8 MHz)  
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	8e b9       	out	0x0e, r24	; 14
  f2:	08 95       	ret

000000f4 <TimeProcessing>:
 }

void TimeProcessing() 
{
	if(dummy_counter == 128)
  f4:	80 91 0d 01 	lds	r24, 0x010D
  f8:	80 38       	cpi	r24, 0x80	; 128
  fa:	71 f1       	breq	.+92     	; 0x158 <TimeProcessing+0x64>
		dummy_counter == 0;
	}
*/
	//second++;
	//if(second_flag == 1)
	if(dummy_counter == 127)
  fc:	8f 37       	cpi	r24, 0x7F	; 127
  fe:	41 f1       	breq	.+80     	; 0x150 <TimeProcessing+0x5c>
	{second_flag = 0;}
	//if(second%2 == 0)
	if(dummy_counter == 63)
 100:	8f 33       	cpi	r24, 0x3F	; 63
 102:	c9 f0       	breq	.+50     	; 0x136 <TimeProcessing+0x42>
 104:	8f 5f       	subi	r24, 0xFF	; 255
	{second_flag = 1;}

	if(second >= 60)
 106:	90 91 10 01 	lds	r25, 0x0110
 10a:	9c 33       	cpi	r25, 0x3C	; 60
 10c:	38 f0       	brcs	.+14     	; 0x11c <TimeProcessing+0x28>
	{	minute++; 
 10e:	90 91 0f 01 	lds	r25, 0x010F
 112:	9f 5f       	subi	r25, 0xFF	; 255
 114:	90 93 0f 01 	sts	0x010F, r25
		second = 0;}
 118:	10 92 10 01 	sts	0x0110, r1
	if(minute == 60)
 11c:	90 91 0f 01 	lds	r25, 0x010F
 120:	9c 33       	cpi	r25, 0x3C	; 60
 122:	71 f0       	breq	.+28     	; 0x140 <TimeProcessing+0x4c>
	{	hour++;
		minute = 0;}
	if(hour == 24)
 124:	90 91 0e 01 	lds	r25, 0x010E
 128:	98 31       	cpi	r25, 0x18	; 24
 12a:	11 f4       	brne	.+4      	; 0x130 <TimeProcessing+0x3c>
	{	hour = 0;} 
 12c:	10 92 0e 01 	sts	0x010E, r1
	dummy_counter++; 
 130:	80 93 0d 01 	sts	0x010D, r24
 134:	08 95       	ret
	//if(second_flag == 1)
	if(dummy_counter == 127)
	{second_flag = 0;}
	//if(second%2 == 0)
	if(dummy_counter == 63)
	{second_flag = 1;}
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	80 93 0c 01 	sts	0x010C, r24
 13c:	80 e4       	ldi	r24, 0x40	; 64
 13e:	e3 cf       	rjmp	.-58     	; 0x106 <TimeProcessing+0x12>

	if(second >= 60)
	{	minute++; 
		second = 0;}
	if(minute == 60)
	{	hour++;
 140:	90 91 0e 01 	lds	r25, 0x010E
 144:	9f 5f       	subi	r25, 0xFF	; 255
 146:	90 93 0e 01 	sts	0x010E, r25
		minute = 0;}
 14a:	10 92 0f 01 	sts	0x010F, r1
 14e:	ea cf       	rjmp	.-44     	; 0x124 <TimeProcessing+0x30>
	}
*/
	//second++;
	//if(second_flag == 1)
	if(dummy_counter == 127)
	{second_flag = 0;}
 150:	10 92 0c 01 	sts	0x010C, r1
 154:	80 e8       	ldi	r24, 0x80	; 128
 156:	d7 cf       	rjmp	.-82     	; 0x106 <TimeProcessing+0x12>

void TimeProcessing() 
{
	if(dummy_counter == 128)
	{
		second++;
 158:	80 91 10 01 	lds	r24, 0x0110
 15c:	8f 5f       	subi	r24, 0xFF	; 255
 15e:	80 93 10 01 	sts	0x0110, r24
		dummy_counter = 0;
 162:	10 92 0d 01 	sts	0x010D, r1
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	ce cf       	rjmp	.-100    	; 0x106 <TimeProcessing+0x12>

0000016a <__vector_16>:
//***********************************************************************
//                     ISR for timer counter zero
//***********************************************************************

ISR( TIMER0_OVF_vect ) 
{
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	0b b6       	in	r0, 0x3b	; 59
 176:	0f 92       	push	r0
 178:	2f 93       	push	r18
 17a:	3f 93       	push	r19
 17c:	4f 93       	push	r20
 17e:	5f 93       	push	r21
 180:	6f 93       	push	r22
 182:	7f 93       	push	r23
 184:	8f 93       	push	r24
 186:	9f 93       	push	r25
 188:	af 93       	push	r26
 18a:	bf 93       	push	r27
 18c:	ef 93       	push	r30
 18e:	ff 93       	push	r31
 	TimeProcessing();
 190:	0e 94 7a 00 	call	0xf4	; 0xf4 <TimeProcessing>
 	//SeperateDigits();
 	return;	
}
 194:	ff 91       	pop	r31
 196:	ef 91       	pop	r30
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	7f 91       	pop	r23
 1a2:	6f 91       	pop	r22
 1a4:	5f 91       	pop	r21
 1a6:	4f 91       	pop	r20
 1a8:	3f 91       	pop	r19
 1aa:	2f 91       	pop	r18
 1ac:	0f 90       	pop	r0
 1ae:	0b be       	out	0x3b, r0	; 59
 1b0:	0f 90       	pop	r0
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	0f 90       	pop	r0
 1b6:	1f 90       	pop	r1
 1b8:	18 95       	reti

000001ba <TIM0_RTC_init>:
//***********************************************************************
//                     Timer 0 RTC mode initialization
//***********************************************************************
void TIM0_RTC_init()
{
	ASSR |= (1<<AS0); //Timer 0 clocked from oscillator clkTOS = 32768Hz
 1ba:	80 b7       	in	r24, 0x30	; 48
 1bc:	88 60       	ori	r24, 0x08	; 8
 1be:	80 bf       	out	0x30, r24	; 48
	TCNT0 = 0x00; //Reset start value for the timer
 1c0:	12 be       	out	0x32, r1	; 50
	TCCR0 = (0<<CS2) | (0<<CS1) | (1<<CS0); //Select prescaler value of 1-> 128 interrupt every second
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	83 bf       	out	0x33, r24	; 51
	while(!bit_is_clear(ASSR, TCN0UB)) //Wait for ASSR to be updated
 1c6:	00 b6       	in	r0, 0x30	; 48
 1c8:	02 fc       	sbrc	r0, 2
 1ca:	fd cf       	rjmp	.-6      	; 0x1c6 <TIM0_RTC_init+0xc>
	{}
	TIMSK |= (1<<TOIE0); //Enable Timer 0 Overflow interrupt
 1cc:	87 b7       	in	r24, 0x37	; 55
 1ce:	81 60       	ori	r24, 0x01	; 1
 1d0:	87 bf       	out	0x37, r24	; 55
	sei(); //Enable global interrupt
 1d2:	78 94       	sei
 1d4:	08 95       	ret

000001d6 <TIM3_INT>:
}

void TIM3_INT()
{
	//TCCR3A
	TCCR3B |= 0x1; //No prescaling  
 1d6:	ea e8       	ldi	r30, 0x8A	; 138
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	81 60       	ori	r24, 0x01	; 1
 1de:	80 83       	st	Z, r24
 1e0:	08 95       	ret

000001e2 <ADC_init>:
//                     ADC single ended mode initialization
//***********************************************************************
void ADC_init()
{
	//Initalize ADC and its ports
DDRF  &= ~(_BV(DDF7)); //make port F bit 7 is ADC input  
 1e2:	e1 e6       	ldi	r30, 0x61	; 97
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	8f 77       	andi	r24, 0x7F	; 127
 1ea:	80 83       	st	Z, r24
PORTF &= ~(_BV(PF7));  //port F bit 7 pullups must be off
 1ec:	e2 e6       	ldi	r30, 0x62	; 98
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	8f 77       	andi	r24, 0x7F	; 127
 1f4:	80 83       	st	Z, r24

ADMUX = 0x47; //writes 00111 to ADMUX (4:0) for single-ended, input PORTF bit 7,
 1f6:	87 e4       	ldi	r24, 0x47	; 71
 1f8:	87 b9       	out	0x07, r24	; 7
// right adjusted, 10 bits

ADCSRA |= (1<<ADEN) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 1fa:	86 b1       	in	r24, 0x06	; 6
 1fc:	8f 68       	ori	r24, 0x8F	; 143
 1fe:	86 b9       	out	0x06, r24	; 6
 200:	08 95       	ret

00000202 <InitLEDdisplay>:

//void InitLEDdisplay()
//This function initializes the IO to use the 4Digit LED display
void InitLEDdisplay()
{
	DDRA = 0xFF; //Set PORTA to all output
 202:	8f ef       	ldi	r24, 0xFF	; 255
 204:	8a bb       	out	0x1a, r24	; 26
	DDRB |= 0XF0; //Set PORTB pins 4 to 7 to output
 206:	87 b3       	in	r24, 0x17	; 23
 208:	80 6f       	ori	r24, 0xF0	; 240
 20a:	87 bb       	out	0x17, r24	; 23
	asm("nop"); //IO Synchronization delay
 20c:	00 00       	nop
	asm("nop"); //IO Synchronization delay
 20e:	00 00       	nop
	PORTB |= 0b01100000; //Set PB5 and PB6 to 1 (no digit selected on Display)
 210:	88 b3       	in	r24, 0x18	; 24
 212:	80 66       	ori	r24, 0x60	; 96
 214:	88 bb       	out	0x18, r24	; 24
	PORTB &= 0b01101111; //Set PB4 and PB7 to 0 (transistor saturated) 
 216:	88 b3       	in	r24, 0x18	; 24
 218:	8f 76       	andi	r24, 0x6F	; 111
 21a:	88 bb       	out	0x18, r24	; 24
 21c:	08 95       	ret

0000021e <SelectDigit>:

//This function take in parameter the DigitNumber to select
//It chooses the correct parameters to turn on that digit
void SelectDigit(int DigitNumber)
{
	switch (DigitNumber)
 21e:	82 30       	cpi	r24, 0x02	; 2
 220:	91 05       	cpc	r25, r1
 222:	b9 f0       	breq	.+46     	; 0x252 <SelectDigit+0x34>
 224:	3c f4       	brge	.+14     	; 0x234 <SelectDigit+0x16>
 226:	00 97       	sbiw	r24, 0x00	; 0
 228:	91 f0       	breq	.+36     	; 0x24e <SelectDigit+0x30>
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	61 f4       	brne	.+24     	; 0x246 <SelectDigit+0x28>
        {
                case 0: //Choose digit number 1 (from the right)
                        PORTB = (0<<PORTB4) | (0<<PORTB5) | (0<<PORTB6);
                        break;
                case 1:  //Choose digit number 2 
                        PORTB = (1<<PORTB4) | (0<<PORTB5) | (0<<PORTB6);
 22e:	80 e1       	ldi	r24, 0x10	; 16
 230:	88 bb       	out	0x18, r24	; 24
                        break;
 232:	08 95       	ret

//This function take in parameter the DigitNumber to select
//It chooses the correct parameters to turn on that digit
void SelectDigit(int DigitNumber)
{
	switch (DigitNumber)
 234:	83 30       	cpi	r24, 0x03	; 3
 236:	91 05       	cpc	r25, r1
 238:	39 f0       	breq	.+14     	; 0x248 <SelectDigit+0x2a>
 23a:	04 97       	sbiw	r24, 0x04	; 4
 23c:	19 f4       	brne	.+6      	; 0x244 <SelectDigit+0x26>
                		break; 
                case 3:  //Choose digit number 3
                        PORTB = (1<<PORTB4) | (1<<PORTB5) | (0<<PORTB6);
                        break;
                case 4: //Choose digit number 4
						PORTB = (0<<PORTB4) | (0<<PORTB5) | (1<<PORTB6);
 23e:	80 e4       	ldi	r24, 0x40	; 64
 240:	88 bb       	out	0x18, r24	; 24
 242:	08 95       	ret
 244:	08 95       	ret
 246:	08 95       	ret
                        break;
                case 2: //Choose the colon 
                		PORTB = (0<<PORTB4) | (1<<PORTB5) | (0<<PORTB7);
                		break; 
                case 3:  //Choose digit number 3
                        PORTB = (1<<PORTB4) | (1<<PORTB5) | (0<<PORTB6);
 248:	80 e3       	ldi	r24, 0x30	; 48
 24a:	88 bb       	out	0x18, r24	; 24
                        break;
 24c:	08 95       	ret
void SelectDigit(int DigitNumber)
{
	switch (DigitNumber)
        {
                case 0: //Choose digit number 1 (from the right)
                        PORTB = (0<<PORTB4) | (0<<PORTB5) | (0<<PORTB6);
 24e:	18 ba       	out	0x18, r1	; 24
                        break;
 250:	08 95       	ret
                case 1:  //Choose digit number 2 
                        PORTB = (1<<PORTB4) | (0<<PORTB5) | (0<<PORTB6);
                        break;
                case 2: //Choose the colon 
                		PORTB = (0<<PORTB4) | (1<<PORTB5) | (0<<PORTB7);
 252:	80 e2       	ldi	r24, 0x20	; 32
 254:	88 bb       	out	0x18, r24	; 24
                		break; 
 256:	08 95       	ret

00000258 <SeperateDigits>:
*This function separates the counter value into 4 different digits to be displayed
*The value of the number to be displayed by each digit is a modulo of 10
*/
void SeperateDigits()
{
	segment_data[0] = dec_to_7seg[minute%10]; //The ones for minutes
 258:	e0 91 0f 01 	lds	r30, 0x010F
 25c:	8d ec       	ldi	r24, 0xCD	; 205
 25e:	e8 9f       	mul	r30, r24
 260:	91 2d       	mov	r25, r1
 262:	11 24       	eor	r1, r1
 264:	96 95       	lsr	r25
 266:	96 95       	lsr	r25
 268:	96 95       	lsr	r25
 26a:	2a e0       	ldi	r18, 0x0A	; 10
 26c:	92 9f       	mul	r25, r18
 26e:	e0 19       	sub	r30, r0
 270:	11 24       	eor	r1, r1
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	e0 50       	subi	r30, 0x00	; 0
 276:	ff 4f       	sbci	r31, 0xFF	; 255
 278:	90 81       	ld	r25, Z
 27a:	90 93 3d 01 	sts	0x013D, r25
    segment_data[1] = dec_to_7seg[(minute/10)%10]; //The tens for minutes
 27e:	e0 91 0f 01 	lds	r30, 0x010F
 282:	e8 9f       	mul	r30, r24
 284:	e1 2d       	mov	r30, r1
 286:	11 24       	eor	r1, r1
 288:	e6 95       	lsr	r30
 28a:	e6 95       	lsr	r30
 28c:	e6 95       	lsr	r30
 28e:	e8 9f       	mul	r30, r24
 290:	91 2d       	mov	r25, r1
 292:	11 24       	eor	r1, r1
 294:	96 95       	lsr	r25
 296:	96 95       	lsr	r25
 298:	96 95       	lsr	r25
 29a:	2a e0       	ldi	r18, 0x0A	; 10
 29c:	92 9f       	mul	r25, r18
 29e:	e0 19       	sub	r30, r0
 2a0:	11 24       	eor	r1, r1
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	e0 50       	subi	r30, 0x00	; 0
 2a6:	ff 4f       	sbci	r31, 0xFF	; 255
 2a8:	90 81       	ld	r25, Z
 2aa:	90 93 3e 01 	sts	0x013E, r25
    segment_data[2] = dec_to_7seg[hour%10]; //The ones for hours
 2ae:	e0 91 0e 01 	lds	r30, 0x010E
 2b2:	e8 9f       	mul	r30, r24
 2b4:	91 2d       	mov	r25, r1
 2b6:	11 24       	eor	r1, r1
 2b8:	96 95       	lsr	r25
 2ba:	96 95       	lsr	r25
 2bc:	96 95       	lsr	r25
 2be:	2a e0       	ldi	r18, 0x0A	; 10
 2c0:	92 9f       	mul	r25, r18
 2c2:	e0 19       	sub	r30, r0
 2c4:	11 24       	eor	r1, r1
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	e0 50       	subi	r30, 0x00	; 0
 2ca:	ff 4f       	sbci	r31, 0xFF	; 255
 2cc:	90 81       	ld	r25, Z
 2ce:	90 93 3f 01 	sts	0x013F, r25
    segment_data[3] = dec_to_7seg[(hour/10)%10]; //The tens for hour
 2d2:	e0 91 0e 01 	lds	r30, 0x010E
 2d6:	e8 9f       	mul	r30, r24
 2d8:	e1 2d       	mov	r30, r1
 2da:	11 24       	eor	r1, r1
 2dc:	e6 95       	lsr	r30
 2de:	e6 95       	lsr	r30
 2e0:	e6 95       	lsr	r30
 2e2:	e8 9f       	mul	r30, r24
 2e4:	81 2d       	mov	r24, r1
 2e6:	11 24       	eor	r1, r1
 2e8:	86 95       	lsr	r24
 2ea:	86 95       	lsr	r24
 2ec:	86 95       	lsr	r24
 2ee:	9a e0       	ldi	r25, 0x0A	; 10
 2f0:	89 9f       	mul	r24, r25
 2f2:	e0 19       	sub	r30, r0
 2f4:	11 24       	eor	r1, r1
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	e0 50       	subi	r30, 0x00	; 0
 2fa:	ff 4f       	sbci	r31, 0xFF	; 255
 2fc:	80 81       	ld	r24, Z
 2fe:	80 93 40 01 	sts	0x0140, r24
    segment_data[4] = 0xFC; //The tens for hour
 302:	8c ef       	ldi	r24, 0xFC	; 252
 304:	80 93 41 01 	sts	0x0141, r24
void SelectDigit(int DigitNumber)
{
	switch (DigitNumber)
        {
                case 0: //Choose digit number 1 (from the right)
                        PORTB = (0<<PORTB4) | (0<<PORTB5) | (0<<PORTB6);
 308:	18 ba       	out	0x18, r1	; 24
    segment_data[4] = 0xFC; //The tens for hour

    uint8_t colon = 0xFC; 

    SelectDigit(0); //Select digit 0
    PORTA = segment_data[0]; //Display the "ones" value
 30a:	80 91 3d 01 	lds	r24, 0x013D
 30e:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 310:	8f e9       	ldi	r24, 0x9F	; 159
 312:	9f e0       	ldi	r25, 0x0F	; 15
 314:	01 97       	sbiw	r24, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <SeperateDigits+0xbc>
 318:	00 c0       	rjmp	.+0      	; 0x31a <SeperateDigits+0xc2>
 31a:	00 00       	nop
        {
                case 0: //Choose digit number 1 (from the right)
                        PORTB = (0<<PORTB4) | (0<<PORTB5) | (0<<PORTB6);
                        break;
                case 1:  //Choose digit number 2 
                        PORTB = (1<<PORTB4) | (0<<PORTB5) | (0<<PORTB6);
 31c:	80 e1       	ldi	r24, 0x10	; 16
 31e:	88 bb       	out	0x18, r24	; 24
    SelectDigit(0); //Select digit 0
    PORTA = segment_data[0]; //Display the "ones" value
    _delay_ms(1); 

    SelectDigit(1); //Select Digit 1
    PORTA = segment_data[1]; //Dispay "tens" value
 320:	80 91 3e 01 	lds	r24, 0x013E
 324:	8b bb       	out	0x1b, r24	; 27
 326:	8f e9       	ldi	r24, 0x9F	; 159
 328:	9f e0       	ldi	r25, 0x0F	; 15
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <SeperateDigits+0xd2>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <SeperateDigits+0xd8>
 330:	00 00       	nop
                        break;
                case 1:  //Choose digit number 2 
                        PORTB = (1<<PORTB4) | (0<<PORTB5) | (0<<PORTB6);
                        break;
                case 2: //Choose the colon 
                		PORTB = (0<<PORTB4) | (1<<PORTB5) | (0<<PORTB7);
 332:	80 e2       	ldi	r24, 0x20	; 32
 334:	88 bb       	out	0x18, r24	; 24
    SelectDigit(1); //Select Digit 1
    PORTA = segment_data[1]; //Dispay "tens" value
    _delay_ms(1);

    SelectDigit(2); //Select Digit 2: colon
    if(second_flag == 0)
 336:	80 91 0c 01 	lds	r24, 0x010C
 33a:	81 11       	cpse	r24, r1
 33c:	04 c0       	rjmp	.+8      	; 0x346 <SeperateDigits+0xee>
    	PORTA = 0xFF;
 33e:	8f ef       	ldi	r24, 0xFF	; 255
 340:	8b bb       	out	0x1b, r24	; 27
 342:	80 91 0c 01 	lds	r24, 0x010C
    if(second_flag == 1)
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	11 f4       	brne	.+4      	; 0x34e <SeperateDigits+0xf6>
    {	PORTA = 0xFC;
 34a:	8c ef       	ldi	r24, 0xFC	; 252
 34c:	8b bb       	out	0x1b, r24	; 27
 34e:	8f e9       	ldi	r24, 0x9F	; 159
 350:	9f e0       	ldi	r25, 0x0F	; 15
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <SeperateDigits+0xfa>
 356:	00 c0       	rjmp	.+0      	; 0x358 <SeperateDigits+0x100>
 358:	00 00       	nop
                        break;
                case 2: //Choose the colon 
                		PORTB = (0<<PORTB4) | (1<<PORTB5) | (0<<PORTB7);
                		break; 
                case 3:  //Choose digit number 3
                        PORTB = (1<<PORTB4) | (1<<PORTB5) | (0<<PORTB6);
 35a:	80 e3       	ldi	r24, 0x30	; 48
 35c:	88 bb       	out	0x18, r24	; 24
    {	PORTA = 0xFC;
   	}
   	_delay_ms(1);

    SelectDigit(3); //Select Digit 3 
    PORTA = segment_data[2]; //Display hundreds valus
 35e:	80 91 3f 01 	lds	r24, 0x013F
 362:	8b bb       	out	0x1b, r24	; 27
 364:	8f e9       	ldi	r24, 0x9F	; 159
 366:	9f e0       	ldi	r25, 0x0F	; 15
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <SeperateDigits+0x110>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <SeperateDigits+0x116>
 36e:	00 00       	nop
                		break; 
                case 3:  //Choose digit number 3
                        PORTB = (1<<PORTB4) | (1<<PORTB5) | (0<<PORTB6);
                        break;
                case 4: //Choose digit number 4
						PORTB = (0<<PORTB4) | (0<<PORTB5) | (1<<PORTB6);
 370:	80 e4       	ldi	r24, 0x40	; 64
 372:	88 bb       	out	0x18, r24	; 24
    SelectDigit(3); //Select Digit 3 
    PORTA = segment_data[2]; //Display hundreds valus
    _delay_ms(1);

    SelectDigit(4); //Select Digit 4
    PORTA = segment_data[3]; //Display thousands value
 374:	80 91 40 01 	lds	r24, 0x0140
 378:	8b bb       	out	0x1b, r24	; 27
 37a:	8f e9       	ldi	r24, 0x9F	; 159
 37c:	9f e0       	ldi	r25, 0x0F	; 15
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <SeperateDigits+0x126>
 382:	00 c0       	rjmp	.+0      	; 0x384 <SeperateDigits+0x12c>
 384:	00 00       	nop
 386:	08 95       	ret

00000388 <PWM_init>:
{
    /* Enable non inverting 8-Bit PWM */    
    //TCCR2A = (1<<COM2A1)|(1<<WGM21)|(1<<WGM20);    
    /* Timer clock = I/O clock */    
    //TCCR2B = (1<<CS20);   
    TCCR2 = 0x69; 
 388:	89 e6       	ldi	r24, 0x69	; 105
 38a:	85 bd       	out	0x25, r24	; 37
    /* Set the compare value to control duty cycle */    
    OCR2  = 0x80;    
 38c:	80 e8       	ldi	r24, 0x80	; 128
 38e:	83 bd       	out	0x23, r24	; 35
    /* Enable Timer 2 Output Compare Match Interrupt */    
    TIMSK = 0x10;   
 390:	80 e1       	ldi	r24, 0x10	; 16
 392:	87 bf       	out	0x37, r24	; 55
    /* Set OC2A pin as output */
    //DDRB |= (1 << PB7);
    DDRB |= 0b10000000;
 394:	bf 9a       	sbi	0x17, 7	; 23
 396:	08 95       	ret

00000398 <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 398:	91 e0       	ldi	r25, 0x01	; 1
 39a:	81 11       	cpse	r24, r1
 39c:	01 c0       	rjmp	.+2      	; 0x3a0 <send_lcd+0x8>
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3a2:	77 9b       	sbis	0x0e, 7	; 14
 3a4:	fe cf       	rjmp	.-4      	; 0x3a2 <send_lcd+0xa>
  SPDR = byte;                        //send payload
 3a6:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3a8:	77 9b       	sbis	0x0e, 7	; 14
 3aa:	fe cf       	rjmp	.-4      	; 0x3a8 <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 3ac:	80 91 62 00 	lds	r24, 0x0062
 3b0:	88 60       	ori	r24, 0x08	; 8
 3b2:	80 93 62 00 	sts	0x0062, r24
 3b6:	80 91 62 00 	lds	r24, 0x0062
 3ba:	87 7f       	andi	r24, 0xF7	; 247
 3bc:	80 93 62 00 	sts	0x0062, r24
 3c0:	08 95       	ret

000003c2 <refresh_lcd>:
//  |  0|  1|  2|  3|  4|  5|  6|  7|  8|  9| 10| 11| 12| 13| 14| 15| 
//  -----------------------------------------------------------------
//  | 16| 17| 18| 19| 20| 21| 22| 23| 24| 25| 26| 27| 28| 29| 30| 31|  
//  -----------------------------------------------------------------
//
void refresh_lcd(char lcd_string_array[]) {
 3c2:	cf 93       	push	r28

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 3c4:	c0 91 11 01 	lds	r28, 0x0111
 3c8:	8c 0f       	add	r24, r28
 3ca:	91 1d       	adc	r25, r1
 3cc:	fc 01       	movw	r30, r24
 3ce:	60 81       	ld	r22, Z
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	0e 94 cc 01 	call	0x398	; 0x398 <send_lcd>
 i++;   //increment to next character
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	8c 0f       	add	r24, r28
 3da:	80 93 11 01 	sts	0x0111, r24
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 3de:	80 31       	cpi	r24, 0x10	; 16
 3e0:	a1 f0       	breq	.+40     	; 0x40a <refresh_lcd+0x48>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
 3e2:	80 32       	cpi	r24, 0x20	; 32
 3e4:	11 f0       	breq	.+4      	; 0x3ea <refresh_lcd+0x28>
}//refresh_lcd
 3e6:	cf 91       	pop	r28
 3e8:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ea:	e5 ed       	ldi	r30, 0xD5	; 213
 3ec:	ea 95       	dec	r30
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <refresh_lcd+0x2a>
 3f0:	00 00       	nop
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
 3f2:	60 e8       	ldi	r22, 0x80	; 128
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	0e 94 cc 01 	call	0x398	; 0x398 <send_lcd>
 3fa:	f5 ed       	ldi	r31, 0xD5	; 213
 3fc:	fa 95       	dec	r31
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <refresh_lcd+0x3a>
 400:	00 00       	nop
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
 402:	10 92 11 01 	sts	0x0111, r1
}//refresh_lcd
 406:	cf 91       	pop	r28
 408:	08 95       	ret
 40a:	f5 ed       	ldi	r31, 0xD5	; 213
 40c:	fa 95       	dec	r31
 40e:	f1 f7       	brne	.-4      	; 0x40c <refresh_lcd+0x4a>
 410:	00 00       	nop
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
 412:	60 ec       	ldi	r22, 0xC0	; 192
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	0e 94 cc 01 	call	0x398	; 0x398 <send_lcd>
 41a:	85 ed       	ldi	r24, 0xD5	; 213
 41c:	8a 95       	dec	r24
 41e:	f1 f7       	brne	.-4      	; 0x41c <refresh_lcd+0x5a>
 420:	00 00       	nop
 422:	80 91 11 01 	lds	r24, 0x0111
 426:	dd cf       	rjmp	.-70     	; 0x3e2 <refresh_lcd+0x20>

00000428 <set_custom_character>:
//addresses are 0x00 - 0x07 for a total of 8 custom characters (0x08 - 0x0F 
//map to 0x00 - 0x07) to display a custom character just refer to it's 
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
 428:	ef 92       	push	r14
 42a:	ff 92       	push	r15
 42c:	0f 93       	push	r16
 42e:	1f 93       	push	r17
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	1f 92       	push	r1
 436:	cd b7       	in	r28, 0x3d	; 61
 438:	de b7       	in	r29, 0x3e	; 62
 43a:	18 2f       	mov	r17, r24
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
 43c:	66 0f       	add	r22, r22
 43e:	66 0f       	add	r22, r22
 440:	66 0f       	add	r22, r22
 442:	60 5c       	subi	r22, 0xC0	; 192
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	99 83       	std	Y+1, r25	; 0x01
 448:	0e 94 cc 01 	call	0x398	; 0x398 <send_lcd>
 44c:	85 ed       	ldi	r24, 0xD5	; 213
 44e:	8a 95       	dec	r24
 450:	f1 f7       	brne	.-4      	; 0x44e <set_custom_character+0x26>
 452:	00 00       	nop
 454:	e1 2e       	mov	r14, r17
 456:	99 81       	ldd	r25, Y+1	; 0x01
 458:	f9 2e       	mov	r15, r25
 45a:	87 01       	movw	r16, r14
 45c:	08 5f       	subi	r16, 0xF8	; 248
 45e:	1f 4f       	sbci	r17, 0xFF	; 255
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
 460:	f7 01       	movw	r30, r14
 462:	61 91       	ld	r22, Z+
 464:	7f 01       	movw	r14, r30
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	0e 94 cc 01 	call	0x398	; 0x398 <send_lcd>
 46c:	f5 ed       	ldi	r31, 0xD5	; 213
 46e:	fa 95       	dec	r31
 470:	f1 f7       	brne	.-4      	; 0x46e <set_custom_character+0x46>
 472:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
 474:	e0 16       	cp	r14, r16
 476:	f1 06       	cpc	r15, r17
 478:	99 f7       	brne	.-26     	; 0x460 <set_custom_character+0x38>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
 47a:	0f 90       	pop	r0
 47c:	df 91       	pop	r29
 47e:	cf 91       	pop	r28
 480:	1f 91       	pop	r17
 482:	0f 91       	pop	r16
 484:	ff 90       	pop	r15
 486:	ef 90       	pop	r14
 488:	08 95       	ret

0000048a <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
 48a:	90 e4       	ldi	r25, 0x40	; 64
 48c:	89 9f       	mul	r24, r25
 48e:	60 0d       	add	r22, r0
 490:	11 24       	eor	r1, r1
 492:	60 5c       	subi	r22, 0xC0	; 192
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	0c 94 cc 01 	jmp	0x398	; 0x398 <send_lcd>

0000049a <uint2lcd>:
//Takes a 8bit unsigned and displays it in base ten on the LCD. Leading 0's are 
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
 49a:	cf 93       	push	r28
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
 49c:	88 23       	and	r24, r24
 49e:	b9 f1       	breq	.+110    	; 0x50e <uint2lcd+0x74>
 4a0:	c8 2f       	mov	r28, r24
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
 4a2:	84 36       	cpi	r24, 0x64	; 100
 4a4:	98 f4       	brcc	.+38     	; 0x4cc <uint2lcd+0x32>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
 4a6:	8a 30       	cpi	r24, 0x0A	; 10
 4a8:	d8 f4       	brcc	.+54     	; 0x4e0 <uint2lcd+0x46>
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
 4aa:	8d ec       	ldi	r24, 0xCD	; 205
 4ac:	c8 9f       	mul	r28, r24
 4ae:	81 2d       	mov	r24, r1
 4b0:	11 24       	eor	r1, r1
 4b2:	86 95       	lsr	r24
 4b4:	86 95       	lsr	r24
 4b6:	86 95       	lsr	r24
 4b8:	6c 2f       	mov	r22, r28
 4ba:	2a e0       	ldi	r18, 0x0A	; 10
 4bc:	82 9f       	mul	r24, r18
 4be:	60 19       	sub	r22, r0
 4c0:	11 24       	eor	r1, r1
 4c2:	60 5d       	subi	r22, 0xD0	; 208
 4c4:	81 e0       	ldi	r24, 0x01	; 1
    }
}
 4c6:	cf 91       	pop	r28
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
 4c8:	0c 94 cc 01 	jmp	0x398	; 0x398 <send_lcd>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
 4cc:	69 e2       	ldi	r22, 0x29	; 41
 4ce:	86 9f       	mul	r24, r22
 4d0:	61 2d       	mov	r22, r1
 4d2:	11 24       	eor	r1, r1
 4d4:	62 95       	swap	r22
 4d6:	6f 70       	andi	r22, 0x0F	; 15
 4d8:	60 5d       	subi	r22, 0xD0	; 208
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	0e 94 cc 01 	call	0x398	; 0x398 <send_lcd>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
 4e0:	89 e2       	ldi	r24, 0x29	; 41
 4e2:	c8 9f       	mul	r28, r24
 4e4:	81 2d       	mov	r24, r1
 4e6:	11 24       	eor	r1, r1
 4e8:	82 95       	swap	r24
 4ea:	8f 70       	andi	r24, 0x0F	; 15
 4ec:	9c 2f       	mov	r25, r28
 4ee:	24 e6       	ldi	r18, 0x64	; 100
 4f0:	82 9f       	mul	r24, r18
 4f2:	90 19       	sub	r25, r0
 4f4:	11 24       	eor	r1, r1
 4f6:	6d ec       	ldi	r22, 0xCD	; 205
 4f8:	96 9f       	mul	r25, r22
 4fa:	61 2d       	mov	r22, r1
 4fc:	11 24       	eor	r1, r1
 4fe:	66 95       	lsr	r22
 500:	66 95       	lsr	r22
 502:	66 95       	lsr	r22
 504:	60 5d       	subi	r22, 0xD0	; 208
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	0e 94 cc 01 	call	0x398	; 0x398 <send_lcd>
 50c:	ce cf       	rjmp	.-100    	; 0x4aa <uint2lcd+0x10>
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
 50e:	60 e3       	ldi	r22, 0x30	; 48
 510:	81 e0       	ldi	r24, 0x01	; 1
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    }
}
 512:	cf 91       	pop	r28
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
 514:	0c 94 cc 01 	jmp	0x398	; 0x398 <send_lcd>

00000518 <int2lcd>:
//                          int2lcd  
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
 518:	cf 93       	push	r28
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
 51a:	87 fd       	sbrc	r24, 7
 51c:	03 c0       	rjmp	.+6      	; 0x524 <int2lcd+0xc>
    else          {uint2lcd(number);                                            }
}
 51e:	cf 91       	pop	r28
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    else          {uint2lcd(number);                                            }
 520:	0c 94 4d 02 	jmp	0x49a	; 0x49a <uint2lcd>
 524:	c8 2f       	mov	r28, r24
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
 526:	6d e2       	ldi	r22, 0x2D	; 45
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	0e 94 cc 01 	call	0x398	; 0x398 <send_lcd>
 52e:	85 ed       	ldi	r24, 0xD5	; 213
 530:	8a 95       	dec	r24
 532:	f1 f7       	brne	.-4      	; 0x530 <int2lcd+0x18>
 534:	00 00       	nop
 536:	8c 2f       	mov	r24, r28
 538:	81 95       	neg	r24
    else          {uint2lcd(number);                                            }
}
 53a:	cf 91       	pop	r28
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
 53c:	0c 94 4d 02 	jmp	0x49a	; 0x49a <uint2lcd>

00000540 <cursor_on>:

//-----------------------------------------------------------------------------
//                          cursor_on
//
//Sets the cursor to display
void cursor_on(void){send_lcd(CMD_BYTE, 0x0E);}
 540:	6e e0       	ldi	r22, 0x0E	; 14
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	0c 94 cc 01 	jmp	0x398	; 0x398 <send_lcd>

00000548 <cursor_off>:

//-----------------------------------------------------------------------------
//                          cursor_off
//
//Turns the cursor display off
void cursor_off(void){send_lcd(CMD_BYTE, 0x0C);}
 548:	6c e0       	ldi	r22, 0x0C	; 12
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	0c 94 cc 01 	jmp	0x398	; 0x398 <send_lcd>

00000550 <shift_right>:

//-----------------------------------------------------------------------------
//                          shift_right 
//
//shifts the display right one character
void shift_right(void){send_lcd(CMD_BYTE, 0x1E);}
 550:	6e e1       	ldi	r22, 0x1E	; 30
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	0c 94 cc 01 	jmp	0x398	; 0x398 <send_lcd>

00000558 <shift_left>:

//-----------------------------------------------------------------------------
//                          shift_left  
//
//shifts the display left one character
void shift_left(void){send_lcd(CMD_BYTE, 0x18);}
 558:	68 e1       	ldi	r22, 0x18	; 24
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	0c 94 cc 01 	jmp	0x398	; 0x398 <send_lcd>

00000560 <strobe_lcd>:
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 560:	e2 e6       	ldi	r30, 0x62	; 98
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	80 81       	ld	r24, Z
 566:	88 60       	ori	r24, 0x08	; 8
 568:	80 83       	st	Z, r24
 56a:	80 81       	ld	r24, Z
 56c:	87 7f       	andi	r24, 0xF7	; 247
 56e:	80 83       	st	Z, r24
 570:	08 95       	ret

00000572 <clear_display>:
//
//Clears entire display and sets DDRAM address 0 in address counter. Requires
//1.8ms for execution. Use only if you can withstand the big delay.
//
void clear_display(void){
  send_lcd(CMD_BYTE, CLEAR_DISPLAY);
 572:	61 e0       	ldi	r22, 0x01	; 1
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	0e 94 cc 01 	call	0x398	; 0x398 <send_lcd>
 57a:	8f e1       	ldi	r24, 0x1F	; 31
 57c:	9c e1       	ldi	r25, 0x1C	; 28
 57e:	01 97       	sbiw	r24, 0x01	; 1
 580:	f1 f7       	brne	.-4      	; 0x57e <clear_display+0xc>
 582:	00 c0       	rjmp	.+0      	; 0x584 <clear_display+0x12>
 584:	00 00       	nop
 586:	08 95       	ret

00000588 <cursor_home>:
//shifted to original position.  DDRAM contents remain unchanged. Requires
//1.5ms to execute. Use only if you can withstand the big delay. Consider
//using line1_col1().
//
void cursor_home(void){
  send_lcd(CMD_BYTE, RETURN_HOME);
 588:	62 e0       	ldi	r22, 0x02	; 2
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	0e 94 cc 01 	call	0x398	; 0x398 <send_lcd>
 590:	8f e6       	ldi	r24, 0x6F	; 111
 592:	97 e1       	ldi	r25, 0x17	; 23
 594:	01 97       	sbiw	r24, 0x01	; 1
 596:	f1 f7       	brne	.-4      	; 0x594 <cursor_home+0xc>
 598:	00 c0       	rjmp	.+0      	; 0x59a <cursor_home+0x12>
 59a:	00 00       	nop
 59c:	08 95       	ret

0000059e <line2_col1>:
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
 59e:	60 ec       	ldi	r22, 0xC0	; 192
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	0e 94 cc 01 	call	0x398	; 0x398 <send_lcd>
 5a6:	85 ed       	ldi	r24, 0xD5	; 213
 5a8:	8a 95       	dec	r24
 5aa:	f1 f7       	brne	.-4      	; 0x5a8 <line2_col1+0xa>
 5ac:	00 00       	nop
 5ae:	08 95       	ret

000005b0 <line1_col1>:
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
 5b0:	60 e8       	ldi	r22, 0x80	; 128
 5b2:	80 e0       	ldi	r24, 0x00	; 0
 5b4:	0e 94 cc 01 	call	0x398	; 0x398 <send_lcd>
 5b8:	85 ed       	ldi	r24, 0xD5	; 213
 5ba:	8a 95       	dec	r24
 5bc:	f1 f7       	brne	.-4      	; 0x5ba <line1_col1+0xa>
 5be:	00 00       	nop
 5c0:	08 95       	ret

000005c2 <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
 5c2:	cf 93       	push	r28
 5c4:	c0 e1       	ldi	r28, 0x10	; 16
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
		send_lcd(CHAR_BYTE, ' '); 
 5c6:	60 e2       	ldi	r22, 0x20	; 32
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	0e 94 cc 01 	call	0x398	; 0x398 <send_lcd>
 5ce:	85 ed       	ldi	r24, 0xD5	; 213
 5d0:	8a 95       	dec	r24
 5d2:	f1 f7       	brne	.-4      	; 0x5d0 <fill_spaces+0xe>
 5d4:	00 00       	nop
 5d6:	c1 50       	subi	r28, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
 5d8:	b1 f7       	brne	.-20     	; 0x5c6 <fill_spaces+0x4>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
 5da:	cf 91       	pop	r28
 5dc:	08 95       	ret

000005de <char2lcd>:
//                            char2lcd
//                            
//Send a single char to the LCD.
//usage: char2lcd('H');  // send an H to the LCD
//
void char2lcd(char a_char){send_lcd(CHAR_BYTE, a_char);} 
 5de:	68 2f       	mov	r22, r24
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	0c 94 cc 01 	jmp	0x398	; 0x398 <send_lcd>

000005e6 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
 5e6:	0f 93       	push	r16
 5e8:	1f 93       	push	r17
 5ea:	cf 93       	push	r28
 5ec:	8c 01       	movw	r16, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
 5ee:	40 e0       	ldi	r20, 0x00	; 0
 5f0:	50 e0       	ldi	r21, 0x00	; 0
 5f2:	c0 e0       	ldi	r28, 0x00	; 0
 5f4:	f8 01       	movw	r30, r16
 5f6:	e4 0f       	add	r30, r20
 5f8:	f5 1f       	adc	r31, r21
 5fa:	60 81       	ld	r22, Z
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	0e 94 cc 01 	call	0x398	; 0x398 <send_lcd>
 602:	85 ed       	ldi	r24, 0xD5	; 213
 604:	8a 95       	dec	r24
 606:	f1 f7       	brne	.-4      	; 0x604 <string2lcd+0x1e>
 608:	00 00       	nop
 60a:	cf 5f       	subi	r28, 0xFF	; 255
 60c:	4c 2f       	mov	r20, r28
 60e:	50 e0       	ldi	r21, 0x00	; 0
 610:	f8 01       	movw	r30, r16
 612:	01 90       	ld	r0, Z+
 614:	00 20       	and	r0, r0
 616:	e9 f7       	brne	.-6      	; 0x612 <string2lcd+0x2c>
 618:	9f 01       	movw	r18, r30
 61a:	20 1b       	sub	r18, r16
 61c:	31 0b       	sbc	r19, r17
 61e:	22 50       	subi	r18, 0x02	; 2
 620:	31 09       	sbc	r19, r1
 622:	24 17       	cp	r18, r20
 624:	35 07       	cpc	r19, r21
 626:	30 f7       	brcc	.-52     	; 0x5f4 <string2lcd+0xe>
  _delay_us(40);  //execution takes 37us per character
  }                  
} 
 628:	cf 91       	pop	r28
 62a:	1f 91       	pop	r17
 62c:	0f 91       	pop	r16
 62e:	08 95       	ret

00000630 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 630:	8f ef       	ldi	r24, 0xFF	; 255
 632:	99 ef       	ldi	r25, 0xF9	; 249
 634:	01 97       	sbiw	r24, 0x01	; 1
 636:	f1 f7       	brne	.-4      	; 0x634 <lcd_init+0x4>
 638:	00 c0       	rjmp	.+0      	; 0x63a <lcd_init+0xa>
 63a:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
 63c:	88 e0       	ldi	r24, 0x08	; 8
 63e:	80 93 61 00 	sts	0x0061, r24
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7); //send cmd sequence 3 times 
 642:	60 e3       	ldi	r22, 0x30	; 48
 644:	80 e0       	ldi	r24, 0x00	; 0
 646:	0e 94 cc 01 	call	0x398	; 0x398 <send_lcd>
 64a:	8f e5       	ldi	r24, 0x5F	; 95
 64c:	9d e6       	ldi	r25, 0x6D	; 109
 64e:	01 97       	sbiw	r24, 0x01	; 1
 650:	f1 f7       	brne	.-4      	; 0x64e <lcd_init+0x1e>
 652:	00 c0       	rjmp	.+0      	; 0x654 <lcd_init+0x24>
 654:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
 656:	60 e3       	ldi	r22, 0x30	; 48
 658:	80 e0       	ldi	r24, 0x00	; 0
 65a:	0e 94 cc 01 	call	0x398	; 0x398 <send_lcd>
 65e:	8f e5       	ldi	r24, 0x5F	; 95
 660:	9d e6       	ldi	r25, 0x6D	; 109
 662:	01 97       	sbiw	r24, 0x01	; 1
 664:	f1 f7       	brne	.-4      	; 0x662 <lcd_init+0x32>
 666:	00 c0       	rjmp	.+0      	; 0x668 <lcd_init+0x38>
 668:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
 66a:	60 e3       	ldi	r22, 0x30	; 48
 66c:	80 e0       	ldi	r24, 0x00	; 0
 66e:	0e 94 cc 01 	call	0x398	; 0x398 <send_lcd>
 672:	8f e5       	ldi	r24, 0x5F	; 95
 674:	9d e6       	ldi	r25, 0x6D	; 109
 676:	01 97       	sbiw	r24, 0x01	; 1
 678:	f1 f7       	brne	.-4      	; 0x676 <lcd_init+0x46>
 67a:	00 c0       	rjmp	.+0      	; 0x67c <lcd_init+0x4c>
 67c:	00 00       	nop
  send_lcd(CMD_BYTE, 0x38); _delay_ms(5);
 67e:	68 e3       	ldi	r22, 0x38	; 56
 680:	80 e0       	ldi	r24, 0x00	; 0
 682:	0e 94 cc 01 	call	0x398	; 0x398 <send_lcd>
 686:	8f e1       	ldi	r24, 0x1F	; 31
 688:	9e e4       	ldi	r25, 0x4E	; 78
 68a:	01 97       	sbiw	r24, 0x01	; 1
 68c:	f1 f7       	brne	.-4      	; 0x68a <lcd_init+0x5a>
 68e:	00 c0       	rjmp	.+0      	; 0x690 <lcd_init+0x60>
 690:	00 00       	nop
  send_lcd(CMD_BYTE, 0x08); _delay_ms(5);
 692:	68 e0       	ldi	r22, 0x08	; 8
 694:	80 e0       	ldi	r24, 0x00	; 0
 696:	0e 94 cc 01 	call	0x398	; 0x398 <send_lcd>
 69a:	8f e1       	ldi	r24, 0x1F	; 31
 69c:	9e e4       	ldi	r25, 0x4E	; 78
 69e:	01 97       	sbiw	r24, 0x01	; 1
 6a0:	f1 f7       	brne	.-4      	; 0x69e <lcd_init+0x6e>
 6a2:	00 c0       	rjmp	.+0      	; 0x6a4 <lcd_init+0x74>
 6a4:	00 00       	nop
  send_lcd(CMD_BYTE, 0x01); _delay_ms(5);
 6a6:	61 e0       	ldi	r22, 0x01	; 1
 6a8:	80 e0       	ldi	r24, 0x00	; 0
 6aa:	0e 94 cc 01 	call	0x398	; 0x398 <send_lcd>
 6ae:	8f e1       	ldi	r24, 0x1F	; 31
 6b0:	9e e4       	ldi	r25, 0x4E	; 78
 6b2:	01 97       	sbiw	r24, 0x01	; 1
 6b4:	f1 f7       	brne	.-4      	; 0x6b2 <lcd_init+0x82>
 6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <lcd_init+0x88>
 6b8:	00 00       	nop
  send_lcd(CMD_BYTE, 0x06); _delay_ms(5);
 6ba:	66 e0       	ldi	r22, 0x06	; 6
 6bc:	80 e0       	ldi	r24, 0x00	; 0
 6be:	0e 94 cc 01 	call	0x398	; 0x398 <send_lcd>
 6c2:	8f e1       	ldi	r24, 0x1F	; 31
 6c4:	9e e4       	ldi	r25, 0x4E	; 78
 6c6:	01 97       	sbiw	r24, 0x01	; 1
 6c8:	f1 f7       	brne	.-4      	; 0x6c6 <lcd_init+0x96>
 6ca:	00 c0       	rjmp	.+0      	; 0x6cc <lcd_init+0x9c>
 6cc:	00 00       	nop
  send_lcd(CMD_BYTE, 0x0C + (CURSOR_VISIBLE<<1) + CURSOR_BLINK); _delay_ms(5);
 6ce:	6c e0       	ldi	r22, 0x0C	; 12
 6d0:	80 e0       	ldi	r24, 0x00	; 0
 6d2:	0e 94 cc 01 	call	0x398	; 0x398 <send_lcd>
 6d6:	8f e1       	ldi	r24, 0x1F	; 31
 6d8:	9e e4       	ldi	r25, 0x4E	; 78
 6da:	01 97       	sbiw	r24, 0x01	; 1
 6dc:	f1 f7       	brne	.-4      	; 0x6da <lcd_init+0xaa>
 6de:	00 c0       	rjmp	.+0      	; 0x6e0 <lcd_init+0xb0>
 6e0:	00 00       	nop
 6e2:	08 95       	ret

000006e4 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
 6e4:	8f 92       	push	r8
 6e6:	9f 92       	push	r9
 6e8:	af 92       	push	r10
 6ea:	bf 92       	push	r11
 6ec:	cf 92       	push	r12
 6ee:	df 92       	push	r13
 6f0:	ef 92       	push	r14
 6f2:	ff 92       	push	r15
 6f4:	0f 93       	push	r16
 6f6:	1f 93       	push	r17
 6f8:	cf 93       	push	r28
 6fa:	df 93       	push	r29
 6fc:	cd b7       	in	r28, 0x3d	; 61
 6fe:	de b7       	in	r29, 0x3e	; 62
 700:	69 97       	sbiw	r28, 0x19	; 25
 702:	0f b6       	in	r0, 0x3f	; 63
 704:	f8 94       	cli
 706:	de bf       	out	0x3e, r29	; 62
 708:	0f be       	out	0x3f, r0	; 63
 70a:	cd bf       	out	0x3d, r28	; 61
 70c:	f4 2e       	mov	r15, r20
 70e:	12 2f       	mov	r17, r18
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
 710:	00 23       	and	r16, r16
 712:	59 f0       	breq	.+22     	; 0x72a <lcd_int32+0x46>
        bSigned = (qr.quot<0);
 714:	4b 01       	movw	r8, r22
 716:	5c 01       	movw	r10, r24
 718:	88 24       	eor	r8, r8
 71a:	b7 fc       	sbrc	r11, 7
 71c:	83 94       	inc	r8
 71e:	99 24       	eor	r9, r9
 720:	aa 24       	eor	r10, r10
 722:	bb 24       	eor	r11, r11
 724:	08 2d       	mov	r16, r8
        qr.quot = labs(qr.quot);
 726:	97 fd       	sbrc	r25, 7
 728:	8f c0       	rjmp	.+286    	; 0x848 <lcd_int32+0x164>
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
 72a:	11 23       	and	r17, r17
 72c:	09 f4       	brne	.+2      	; 0x730 <lcd_int32+0x4c>
 72e:	84 c0       	rjmp	.+264    	; 0x838 <lcd_int32+0x154>
 730:	9e 01       	movw	r18, r28
 732:	2f 5f       	subi	r18, 0xFF	; 255
 734:	3f 4f       	sbci	r19, 0xFF	; 255
 736:	69 01       	movw	r12, r18
 738:	59 01       	movw	r10, r18
 73a:	88 24       	eor	r8, r8
 73c:	8a 94       	dec	r8
 73e:	81 0e       	add	r8, r17
 740:	91 2c       	mov	r9, r1
 742:	3f ef       	ldi	r19, 0xFF	; 255
 744:	83 1a       	sub	r8, r19
 746:	93 0a       	sbc	r9, r19
 748:	8c 0c       	add	r8, r12
 74a:	9d 1c       	adc	r9, r13
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
 74c:	2a e0       	ldi	r18, 0x0A	; 10
 74e:	30 e0       	ldi	r19, 0x00	; 0
 750:	40 e0       	ldi	r20, 0x00	; 0
 752:	50 e0       	ldi	r21, 0x00	; 0
 754:	0e 94 97 05 	call	0xb2e	; 0xb2e <__divmodsi4>
 758:	e6 2f       	mov	r30, r22
 75a:	2a 8b       	std	Y+18, r18	; 0x12
 75c:	3b 8b       	std	Y+19, r19	; 0x13
 75e:	4c 8b       	std	Y+20, r20	; 0x14
 760:	5d 8b       	std	Y+21, r21	; 0x15
 762:	6a 89       	ldd	r22, Y+18	; 0x12
 764:	7b 89       	ldd	r23, Y+19	; 0x13
 766:	8c 89       	ldd	r24, Y+20	; 0x14
 768:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
 76a:	20 e3       	ldi	r18, 0x30	; 48
 76c:	2e 0f       	add	r18, r30
 76e:	f5 01       	movw	r30, r10
 770:	21 93       	st	Z+, r18
 772:	5f 01       	movw	r10, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
 774:	e8 15       	cp	r30, r8
 776:	f9 05       	cpc	r31, r9
 778:	49 f7       	brne	.-46     	; 0x74c <lcd_int32+0x68>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
 77a:	bb 24       	eor	r11, r11
 77c:	b3 94       	inc	r11
 77e:	b1 0e       	add	r11, r17
 780:	f6 01       	movw	r30, r12
 782:	e1 0f       	add	r30, r17
 784:	f1 1d       	adc	r31, r1
 786:	2e e2       	ldi	r18, 0x2E	; 46
 788:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
 78a:	2a e0       	ldi	r18, 0x0A	; 10
 78c:	30 e0       	ldi	r19, 0x00	; 0
 78e:	40 e0       	ldi	r20, 0x00	; 0
 790:	50 e0       	ldi	r21, 0x00	; 0
 792:	0e 94 97 05 	call	0xb2e	; 0xb2e <__divmodsi4>
 796:	e6 2f       	mov	r30, r22
 798:	2a 8b       	std	Y+18, r18	; 0x12
 79a:	3b 8b       	std	Y+19, r19	; 0x13
 79c:	4c 8b       	std	Y+20, r20	; 0x14
 79e:	5d 8b       	std	Y+21, r21	; 0x15
 7a0:	6e 8b       	std	Y+22, r22	; 0x16
 7a2:	7f 8b       	std	Y+23, r23	; 0x17
 7a4:	88 8f       	std	Y+24, r24	; 0x18
 7a6:	99 8f       	std	Y+25, r25	; 0x19
 7a8:	6a 89       	ldd	r22, Y+18	; 0x12
 7aa:	7b 89       	ldd	r23, Y+19	; 0x13
 7ac:	8c 89       	ldd	r24, Y+20	; 0x14
 7ae:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
 7b0:	11 e0       	ldi	r17, 0x01	; 1
 7b2:	1b 0d       	add	r17, r11
 7b4:	d6 01       	movw	r26, r12
 7b6:	ab 0d       	add	r26, r11
 7b8:	b1 1d       	adc	r27, r1
 7ba:	e0 5d       	subi	r30, 0xD0	; 208
 7bc:	ec 93       	st	X, r30
 7be:	b1 2e       	mov	r11, r17
        }while(qr.quot);
 7c0:	61 15       	cp	r22, r1
 7c2:	71 05       	cpc	r23, r1
 7c4:	81 05       	cpc	r24, r1
 7c6:	91 05       	cpc	r25, r1
 7c8:	01 f7       	brne	.-64     	; 0x78a <lcd_int32+0xa6>

      // fill the whole field if a width was specified
      if (fieldwidth){
 7ca:	ff 20       	and	r15, r15
 7cc:	61 f0       	breq	.+24     	; 0x7e6 <lcd_int32+0x102>
        fillch = bZeroFill? '0': ' '; // determine the fill character
 7ce:	e1 10       	cpse	r14, r1
 7d0:	39 c0       	rjmp	.+114    	; 0x844 <lcd_int32+0x160>
 7d2:	80 e2       	ldi	r24, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
 7d4:	1f 15       	cp	r17, r15
 7d6:	38 f4       	brcc	.+14     	; 0x7e6 <lcd_int32+0x102>
 7d8:	f6 01       	movw	r30, r12
 7da:	e1 0f       	add	r30, r17
 7dc:	f1 1d       	adc	r31, r1
 7de:	80 83       	st	Z, r24
 7e0:	1f 5f       	subi	r17, 0xFF	; 255
 7e2:	1f 11       	cpse	r17, r15
 7e4:	f9 cf       	rjmp	.-14     	; 0x7d8 <lcd_int32+0xf4>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
 7e6:	00 23       	and	r16, r16
 7e8:	31 f0       	breq	.+12     	; 0x7f6 <lcd_int32+0x112>
 7ea:	f6 01       	movw	r30, r12
 7ec:	e1 0f       	add	r30, r17
 7ee:	f1 1d       	adc	r31, r1
 7f0:	8d e2       	ldi	r24, 0x2D	; 45
 7f2:	80 83       	st	Z, r24
 7f4:	1f 5f       	subi	r17, 0xFF	; 255

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
 7f6:	11 50       	subi	r17, 0x01	; 1
 7f8:	f6 01       	movw	r30, r12
 7fa:	e1 0f       	add	r30, r17
 7fc:	f1 1d       	adc	r31, r1
 7fe:	60 81       	ld	r22, Z
 800:	81 e0       	ldi	r24, 0x01	; 1
 802:	0e 94 cc 01 	call	0x398	; 0x398 <send_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 806:	35 ed       	ldi	r19, 0xD5	; 213
 808:	3a 95       	dec	r19
 80a:	f1 f7       	brne	.-4      	; 0x808 <lcd_int32+0x124>
 80c:	00 00       	nop
 80e:	11 11       	cpse	r17, r1
 810:	f2 cf       	rjmp	.-28     	; 0x7f6 <lcd_int32+0x112>

}
 812:	69 96       	adiw	r28, 0x19	; 25
 814:	0f b6       	in	r0, 0x3f	; 63
 816:	f8 94       	cli
 818:	de bf       	out	0x3e, r29	; 62
 81a:	0f be       	out	0x3f, r0	; 63
 81c:	cd bf       	out	0x3d, r28	; 61
 81e:	df 91       	pop	r29
 820:	cf 91       	pop	r28
 822:	1f 91       	pop	r17
 824:	0f 91       	pop	r16
 826:	ff 90       	pop	r15
 828:	ef 90       	pop	r14
 82a:	df 90       	pop	r13
 82c:	cf 90       	pop	r12
 82e:	bf 90       	pop	r11
 830:	af 90       	pop	r10
 832:	9f 90       	pop	r9
 834:	8f 90       	pop	r8
 836:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
 838:	b1 2c       	mov	r11, r1
 83a:	9e 01       	movw	r18, r28
 83c:	2f 5f       	subi	r18, 0xFF	; 255
 83e:	3f 4f       	sbci	r19, 0xFF	; 255
 840:	69 01       	movw	r12, r18
 842:	a3 cf       	rjmp	.-186    	; 0x78a <lcd_int32+0xa6>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
 844:	80 e3       	ldi	r24, 0x30	; 48
 846:	c6 cf       	rjmp	.-116    	; 0x7d4 <lcd_int32+0xf0>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
 848:	90 95       	com	r25
 84a:	80 95       	com	r24
 84c:	70 95       	com	r23
 84e:	61 95       	neg	r22
 850:	7f 4f       	sbci	r23, 0xFF	; 255
 852:	8f 4f       	sbci	r24, 0xFF	; 255
 854:	9f 4f       	sbci	r25, 0xFF	; 255
 856:	69 cf       	rjmp	.-302    	; 0x72a <lcd_int32+0x46>

00000858 <lcd_int16>:
 858:	5f 92       	push	r5
 85a:	6f 92       	push	r6
 85c:	7f 92       	push	r7
 85e:	8f 92       	push	r8
 860:	9f 92       	push	r9
 862:	af 92       	push	r10
 864:	bf 92       	push	r11
 866:	cf 92       	push	r12
 868:	df 92       	push	r13
 86a:	ef 92       	push	r14
 86c:	ff 92       	push	r15
 86e:	0f 93       	push	r16
 870:	1f 93       	push	r17
 872:	cf 93       	push	r28
 874:	df 93       	push	r29
 876:	cd b7       	in	r28, 0x3d	; 61
 878:	de b7       	in	r29, 0x3e	; 62
 87a:	61 97       	sbiw	r28, 0x11	; 17
 87c:	0f b6       	in	r0, 0x3f	; 63
 87e:	f8 94       	cli
 880:	de bf       	out	0x3e, r29	; 62
 882:	0f be       	out	0x3f, r0	; 63
 884:	cd bf       	out	0x3d, r28	; 61
 886:	66 2e       	mov	r6, r22
 888:	14 2f       	mov	r17, r20
 88a:	59 2e       	mov	r5, r25
 88c:	55 1c       	adc	r5, r5
 88e:	55 24       	eor	r5, r5
 890:	55 1c       	adc	r5, r5
 892:	75 2c       	mov	r7, r5
 894:	a5 2c       	mov	r10, r5
 896:	b1 2c       	mov	r11, r1
 898:	22 27       	eor	r18, r18
 89a:	33 27       	eor	r19, r19
 89c:	2a 19       	sub	r18, r10
 89e:	3b 09       	sbc	r19, r11
 8a0:	82 27       	eor	r24, r18
 8a2:	93 27       	eor	r25, r19
 8a4:	9c 01       	movw	r18, r24
 8a6:	2a 0d       	add	r18, r10
 8a8:	3b 1d       	adc	r19, r11
 8aa:	44 23       	and	r20, r20
 8ac:	09 f4       	brne	.+2      	; 0x8b0 <lcd_int16+0x58>
 8ae:	90 c0       	rjmp	.+288    	; 0x9d0 <lcd_int16+0x178>
 8b0:	ce 01       	movw	r24, r28
 8b2:	01 96       	adiw	r24, 0x01	; 1
 8b4:	7c 01       	movw	r14, r24
 8b6:	6c 01       	movw	r12, r24
 8b8:	88 24       	eor	r8, r8
 8ba:	8a 94       	dec	r8
 8bc:	84 0e       	add	r8, r20
 8be:	91 2c       	mov	r9, r1
 8c0:	9f ef       	ldi	r25, 0xFF	; 255
 8c2:	89 1a       	sub	r8, r25
 8c4:	99 0a       	sbc	r9, r25
 8c6:	8e 0c       	add	r8, r14
 8c8:	9f 1c       	adc	r9, r15
 8ca:	6a e0       	ldi	r22, 0x0A	; 10
 8cc:	70 e0       	ldi	r23, 0x00	; 0
 8ce:	c9 01       	movw	r24, r18
 8d0:	0e 94 83 05 	call	0xb06	; 0xb06 <__divmodhi4>
 8d4:	46 2f       	mov	r20, r22
 8d6:	24 2f       	mov	r18, r20
 8d8:	37 2f       	mov	r19, r23
 8da:	80 5d       	subi	r24, 0xD0	; 208
 8dc:	f6 01       	movw	r30, r12
 8de:	81 93       	st	Z+, r24
 8e0:	6f 01       	movw	r12, r30
 8e2:	e8 15       	cp	r30, r8
 8e4:	f9 05       	cpc	r31, r9
 8e6:	89 f7       	brne	.-30     	; 0x8ca <lcd_int16+0x72>
 8e8:	dd 24       	eor	r13, r13
 8ea:	d3 94       	inc	r13
 8ec:	d1 0e       	add	r13, r17
 8ee:	f7 01       	movw	r30, r14
 8f0:	e1 0f       	add	r30, r17
 8f2:	f1 1d       	adc	r31, r1
 8f4:	8e e2       	ldi	r24, 0x2E	; 46
 8f6:	80 83       	st	Z, r24
 8f8:	6a e0       	ldi	r22, 0x0A	; 10
 8fa:	70 e0       	ldi	r23, 0x00	; 0
 8fc:	c9 01       	movw	r24, r18
 8fe:	0e 94 83 05 	call	0xb06	; 0xb06 <__divmodhi4>
 902:	46 2f       	mov	r20, r22
 904:	24 2f       	mov	r18, r20
 906:	37 2f       	mov	r19, r23
 908:	11 e0       	ldi	r17, 0x01	; 1
 90a:	1d 0d       	add	r17, r13
 90c:	f7 01       	movw	r30, r14
 90e:	ed 0d       	add	r30, r13
 910:	f1 1d       	adc	r31, r1
 912:	80 5d       	subi	r24, 0xD0	; 208
 914:	80 83       	st	Z, r24
 916:	d1 2e       	mov	r13, r17
 918:	21 15       	cp	r18, r1
 91a:	31 05       	cpc	r19, r1
 91c:	69 f7       	brne	.-38     	; 0x8f8 <lcd_int16+0xa0>
 91e:	01 11       	cpse	r16, r1
 920:	15 c0       	rjmp	.+42     	; 0x94c <lcd_int16+0xf4>
 922:	55 20       	and	r5, r5
 924:	39 f0       	breq	.+14     	; 0x934 <lcd_int16+0xdc>
 926:	11 e0       	ldi	r17, 0x01	; 1
 928:	1d 0d       	add	r17, r13
 92a:	f7 01       	movw	r30, r14
 92c:	ed 0d       	add	r30, r13
 92e:	f1 1d       	adc	r31, r1
 930:	8d e2       	ldi	r24, 0x2D	; 45
 932:	80 83       	st	Z, r24
 934:	66 20       	and	r6, r6
 936:	41 f1       	breq	.+80     	; 0x988 <lcd_int16+0x130>
 938:	81 2f       	mov	r24, r17
 93a:	90 e0       	ldi	r25, 0x00	; 0
 93c:	26 2d       	mov	r18, r6
 93e:	30 e0       	ldi	r19, 0x00	; 0
 940:	82 17       	cp	r24, r18
 942:	93 07       	cpc	r25, r19
 944:	0c f5       	brge	.+66     	; 0x988 <lcd_int16+0x130>
 946:	71 2c       	mov	r7, r1
 948:	40 e2       	ldi	r20, 0x20	; 32
 94a:	0c c0       	rjmp	.+24     	; 0x964 <lcd_int16+0x10c>
 94c:	66 20       	and	r6, r6
 94e:	a1 f0       	breq	.+40     	; 0x978 <lcd_int16+0x120>
 950:	81 2f       	mov	r24, r17
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	26 2d       	mov	r18, r6
 956:	30 e0       	ldi	r19, 0x00	; 0
 958:	2a 19       	sub	r18, r10
 95a:	3b 09       	sbc	r19, r11
 95c:	82 17       	cp	r24, r18
 95e:	93 07       	cpc	r25, r19
 960:	5c f4       	brge	.+22     	; 0x978 <lcd_int16+0x120>
 962:	40 e3       	ldi	r20, 0x30	; 48
 964:	1f 5f       	subi	r17, 0xFF	; 255
 966:	f7 01       	movw	r30, r14
 968:	e8 0f       	add	r30, r24
 96a:	f9 1f       	adc	r31, r25
 96c:	40 83       	st	Z, r20
 96e:	81 2f       	mov	r24, r17
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	82 17       	cp	r24, r18
 974:	93 07       	cpc	r25, r19
 976:	b4 f3       	brlt	.-20     	; 0x964 <lcd_int16+0x10c>
 978:	77 20       	and	r7, r7
 97a:	31 f0       	breq	.+12     	; 0x988 <lcd_int16+0x130>
 97c:	f7 01       	movw	r30, r14
 97e:	e1 0f       	add	r30, r17
 980:	f1 1d       	adc	r31, r1
 982:	8d e2       	ldi	r24, 0x2D	; 45
 984:	80 83       	st	Z, r24
 986:	1f 5f       	subi	r17, 0xFF	; 255
 988:	11 50       	subi	r17, 0x01	; 1
 98a:	f7 01       	movw	r30, r14
 98c:	e1 0f       	add	r30, r17
 98e:	f1 1d       	adc	r31, r1
 990:	60 81       	ld	r22, Z
 992:	81 e0       	ldi	r24, 0x01	; 1
 994:	0e 94 cc 01 	call	0x398	; 0x398 <send_lcd>
 998:	95 ed       	ldi	r25, 0xD5	; 213
 99a:	9a 95       	dec	r25
 99c:	f1 f7       	brne	.-4      	; 0x99a <lcd_int16+0x142>
 99e:	00 00       	nop
 9a0:	11 11       	cpse	r17, r1
 9a2:	f2 cf       	rjmp	.-28     	; 0x988 <lcd_int16+0x130>
 9a4:	61 96       	adiw	r28, 0x11	; 17
 9a6:	0f b6       	in	r0, 0x3f	; 63
 9a8:	f8 94       	cli
 9aa:	de bf       	out	0x3e, r29	; 62
 9ac:	0f be       	out	0x3f, r0	; 63
 9ae:	cd bf       	out	0x3d, r28	; 61
 9b0:	df 91       	pop	r29
 9b2:	cf 91       	pop	r28
 9b4:	1f 91       	pop	r17
 9b6:	0f 91       	pop	r16
 9b8:	ff 90       	pop	r15
 9ba:	ef 90       	pop	r14
 9bc:	df 90       	pop	r13
 9be:	cf 90       	pop	r12
 9c0:	bf 90       	pop	r11
 9c2:	af 90       	pop	r10
 9c4:	9f 90       	pop	r9
 9c6:	8f 90       	pop	r8
 9c8:	7f 90       	pop	r7
 9ca:	6f 90       	pop	r6
 9cc:	5f 90       	pop	r5
 9ce:	08 95       	ret
 9d0:	d1 2c       	mov	r13, r1
 9d2:	ce 01       	movw	r24, r28
 9d4:	01 96       	adiw	r24, 0x01	; 1
 9d6:	7c 01       	movw	r14, r24
 9d8:	8f cf       	rjmp	.-226    	; 0x8f8 <lcd_int16+0xa0>

000009da <main>:

//void InitLEDdisplay()
//This function initializes the IO to use the 4Digit LED display
void InitLEDdisplay()
{
	DDRA = 0xFF; //Set PORTA to all output
 9da:	8f ef       	ldi	r24, 0xFF	; 255
 9dc:	8a bb       	out	0x1a, r24	; 26
	DDRB |= 0XF0; //Set PORTB pins 4 to 7 to output
 9de:	87 b3       	in	r24, 0x17	; 23
 9e0:	80 6f       	ori	r24, 0xF0	; 240
 9e2:	87 bb       	out	0x17, r24	; 23
	asm("nop"); //IO Synchronization delay
 9e4:	00 00       	nop
	asm("nop"); //IO Synchronization delay
 9e6:	00 00       	nop
	PORTB |= 0b01100000; //Set PB5 and PB6 to 1 (no digit selected on Display)
 9e8:	88 b3       	in	r24, 0x18	; 24
 9ea:	80 66       	ori	r24, 0x60	; 96
 9ec:	88 bb       	out	0x18, r24	; 24
	PORTB &= 0b01101111; //Set PB4 and PB7 to 0 (transistor saturated) 
 9ee:	88 b3       	in	r24, 0x18	; 24
 9f0:	8f 76       	andi	r24, 0x6F	; 111
 9f2:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9f4:	8f e3       	ldi	r24, 0x3F	; 63
 9f6:	9f e1       	ldi	r25, 0x1F	; 31
 9f8:	01 97       	sbiw	r24, 0x01	; 1
 9fa:	f1 f7       	brne	.-4      	; 0x9f8 <main+0x1e>
 9fc:	00 c0       	rjmp	.+0      	; 0x9fe <main+0x24>
 9fe:	00 00       	nop
 a00:	8f e9       	ldi	r24, 0x9F	; 159
 a02:	9f e0       	ldi	r25, 0x0F	; 15
 a04:	01 97       	sbiw	r24, 0x01	; 1
 a06:	f1 f7       	brne	.-4      	; 0xa04 <main+0x2a>
 a08:	00 c0       	rjmp	.+0      	; 0xa0a <main+0x30>
 a0a:	00 00       	nop
{
    /* Enable non inverting 8-Bit PWM */    
    //TCCR2A = (1<<COM2A1)|(1<<WGM21)|(1<<WGM20);    
    /* Timer clock = I/O clock */    
    //TCCR2B = (1<<CS20);   
    TCCR2 = 0x69; 
 a0c:	89 e6       	ldi	r24, 0x69	; 105
 a0e:	85 bd       	out	0x25, r24	; 37
    /* Set the compare value to control duty cycle */    
    OCR2  = 0x80;    
 a10:	80 e8       	ldi	r24, 0x80	; 128
 a12:	83 bd       	out	0x23, r24	; 35
    /* Enable Timer 2 Output Compare Match Interrupt */    
    TIMSK = 0x10;   
 a14:	80 e1       	ldi	r24, 0x10	; 16
 a16:	87 bf       	out	0x37, r24	; 55
    /* Set OC2A pin as output */
    //DDRB |= (1 << PB7);
    DDRB |= 0b10000000;
 a18:	bf 9a       	sbi	0x17, 7	; 23
	_delay_ms(2);
	//DDRB = 0xFF; 
	_delay_ms(1);
	//PORTB = 0xFF;
	PWM_init();	
 	TIM0_RTC_init();
 a1a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <TIM0_RTC_init>

	//initalize the SPI port then the LCD
	spi_init();
 a1e:	0e 94 67 00 	call	0xce	; 0xce <spi_init>
	lcd_init(); 
 a22:	0e 94 18 03 	call	0x630	; 0x630 <lcd_init>
	clear_display();
 a26:	0e 94 b9 02 	call	0x572	; 0x572 <clear_display>
//                     ADC single ended mode initialization
//***********************************************************************
void ADC_init()
{
	//Initalize ADC and its ports
DDRF  &= ~(_BV(DDF7)); //make port F bit 7 is ADC input  
 a2a:	80 91 61 00 	lds	r24, 0x0061
 a2e:	8f 77       	andi	r24, 0x7F	; 127
 a30:	80 93 61 00 	sts	0x0061, r24
PORTF &= ~(_BV(PF7));  //port F bit 7 pullups must be off
 a34:	80 91 62 00 	lds	r24, 0x0062
 a38:	8f 77       	andi	r24, 0x7F	; 127
 a3a:	80 93 62 00 	sts	0x0062, r24

ADMUX = 0x47; //writes 00111 to ADMUX (4:0) for single-ended, input PORTF bit 7,
 a3e:	87 e4       	ldi	r24, 0x47	; 71
 a40:	87 b9       	out	0x07, r24	; 7
// right adjusted, 10 bits

ADCSRA |= (1<<ADEN) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 a42:	86 b1       	in	r24, 0x06	; 6
 a44:	8f 68       	ori	r24, 0x8F	; 143
 a46:	86 b9       	out	0x06, r24	; 6

 
		//now determine Vin, where Vin = (adc_result/204.8)
    	fp_adc_result = div(adc_result, 205);              //do division by 205 (204.8 to be exact)
    	itoa(fp_adc_result.quot, lcd_str_h, 10);           //convert non-fractional part to ascii string
    	fp_low_result = div((fp_adc_result.rem*100), 205); //get the decimal fraction into non-fractional form 
 a48:	c4 e6       	ldi	r28, 0x64	; 100
	clear_display();
	ADC_init();

	while(1)
    {
    	SeperateDigits();
 a4a:	0e 94 2c 01 	call	0x258	; 0x258 <SeperateDigits>
    	ADCSRA |= (1<<ADSC); //poke ADSC and start conversion
 a4e:	36 9a       	sbi	0x06, 6	; 6

 		while(bit_is_clear(ADCSRA,ADIF)){}; //spin while interrupt flag not set
 a50:	34 9b       	sbis	0x06, 4	; 6
 a52:	fe cf       	rjmp	.-4      	; 0xa50 <main+0x76>

		ADCSRA |= (1<<ADIF); //its done, clear flag by writing a one 
 a54:	34 9a       	sbi	0x06, 4	; 6
    	adc_result = ADC;                      //read the ADC output as 16 bits
 a56:	84 b1       	in	r24, 0x04	; 4
 a58:	95 b1       	in	r25, 0x05	; 5
 a5a:	90 93 13 01 	sts	0x0113, r25
 a5e:	80 93 12 01 	sts	0x0112, r24

 
		//now determine Vin, where Vin = (adc_result/204.8)
    	fp_adc_result = div(adc_result, 205);              //do division by 205 (204.8 to be exact)
 a62:	6d ec       	ldi	r22, 0xCD	; 205
 a64:	70 e0       	ldi	r23, 0x00	; 0
 a66:	0e 94 83 05 	call	0xb06	; 0xb06 <__divmodhi4>
 a6a:	9b 01       	movw	r18, r22
 a6c:	60 93 39 01 	sts	0x0139, r22
 a70:	70 93 3a 01 	sts	0x013A, r23
 a74:	80 93 3b 01 	sts	0x013B, r24
 a78:	90 93 3c 01 	sts	0x013C, r25
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 a7c:	4a e0       	ldi	r20, 0x0A	; 10
 a7e:	69 e2       	ldi	r22, 0x29	; 41
 a80:	71 e0       	ldi	r23, 0x01	; 1
 a82:	c9 01       	movw	r24, r18
 a84:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__itoa_ncheck>
    	itoa(fp_adc_result.quot, lcd_str_h, 10);           //convert non-fractional part to ascii string
    	fp_low_result = div((fp_adc_result.rem*100), 205); //get the decimal fraction into non-fractional form 
 a88:	80 91 3b 01 	lds	r24, 0x013B
 a8c:	90 91 3c 01 	lds	r25, 0x013C
 a90:	6d ec       	ldi	r22, 0xCD	; 205
 a92:	70 e0       	ldi	r23, 0x00	; 0
 a94:	9c 01       	movw	r18, r24
 a96:	c2 9f       	mul	r28, r18
 a98:	c0 01       	movw	r24, r0
 a9a:	c3 9f       	mul	r28, r19
 a9c:	90 0d       	add	r25, r0
 a9e:	11 24       	eor	r1, r1
 aa0:	0e 94 83 05 	call	0xb06	; 0xb06 <__divmodhi4>
 aa4:	9b 01       	movw	r18, r22
 aa6:	60 93 25 01 	sts	0x0125, r22
 aaa:	70 93 26 01 	sts	0x0126, r23
 aae:	80 93 27 01 	sts	0x0127, r24
 ab2:	90 93 28 01 	sts	0x0128, r25
 ab6:	4a e0       	ldi	r20, 0x0A	; 10
 ab8:	64 e1       	ldi	r22, 0x14	; 20
 aba:	71 e0       	ldi	r23, 0x01	; 1
 abc:	c9 01       	movw	r24, r18
 abe:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__itoa_ncheck>
    	itoa(fp_low_result.quot, lcd_str_l, 10);           //convert fractional part to ascii string

    	//send string to LCD
    	string2lcd(lcd_str_h);  //write upper half
 ac2:	89 e2       	ldi	r24, 0x29	; 41
 ac4:	91 e0       	ldi	r25, 0x01	; 1
 ac6:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <string2lcd>
    	char2lcd('.');          //write decimal point
 aca:	8e e2       	ldi	r24, 0x2E	; 46
 acc:	0e 94 ef 02 	call	0x5de	; 0x5de <char2lcd>
    	string2lcd(lcd_str_l);  //write lower half
 ad0:	84 e1       	ldi	r24, 0x14	; 20
 ad2:	91 e0       	ldi	r25, 0x01	; 1
 ad4:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <string2lcd>

    	for(i=0;i<=10;i++){ _delay_ms(50);}  //delay 0.5 sec
 ad8:	10 92 24 01 	sts	0x0124, r1
 adc:	3f ef       	ldi	r19, 0xFF	; 255
 ade:	80 e7       	ldi	r24, 0x70	; 112
 ae0:	92 e0       	ldi	r25, 0x02	; 2
 ae2:	31 50       	subi	r19, 0x01	; 1
 ae4:	80 40       	sbci	r24, 0x00	; 0
 ae6:	90 40       	sbci	r25, 0x00	; 0
 ae8:	e1 f7       	brne	.-8      	; 0xae2 <main+0x108>
 aea:	00 c0       	rjmp	.+0      	; 0xaec <main+0x112>
 aec:	00 00       	nop
 aee:	80 91 24 01 	lds	r24, 0x0124
 af2:	8f 5f       	subi	r24, 0xFF	; 255
 af4:	80 93 24 01 	sts	0x0124, r24
 af8:	8b 30       	cpi	r24, 0x0B	; 11
 afa:	80 f3       	brcs	.-32     	; 0xadc <main+0x102>
    	clear_display();
 afc:	0e 94 b9 02 	call	0x572	; 0x572 <clear_display>
    	cursor_home();
 b00:	0e 94 c4 02 	call	0x588	; 0x588 <cursor_home>
 	} //while(1)
 b04:	a2 cf       	rjmp	.-188    	; 0xa4a <main+0x70>

00000b06 <__divmodhi4>:
 b06:	97 fb       	bst	r25, 7
 b08:	07 2e       	mov	r0, r23
 b0a:	16 f4       	brtc	.+4      	; 0xb10 <__divmodhi4+0xa>
 b0c:	00 94       	com	r0
 b0e:	07 d0       	rcall	.+14     	; 0xb1e <__divmodhi4_neg1>
 b10:	77 fd       	sbrc	r23, 7
 b12:	09 d0       	rcall	.+18     	; 0xb26 <__divmodhi4_neg2>
 b14:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__udivmodhi4>
 b18:	07 fc       	sbrc	r0, 7
 b1a:	05 d0       	rcall	.+10     	; 0xb26 <__divmodhi4_neg2>
 b1c:	3e f4       	brtc	.+14     	; 0xb2c <__divmodhi4_exit>

00000b1e <__divmodhi4_neg1>:
 b1e:	90 95       	com	r25
 b20:	81 95       	neg	r24
 b22:	9f 4f       	sbci	r25, 0xFF	; 255
 b24:	08 95       	ret

00000b26 <__divmodhi4_neg2>:
 b26:	70 95       	com	r23
 b28:	61 95       	neg	r22
 b2a:	7f 4f       	sbci	r23, 0xFF	; 255

00000b2c <__divmodhi4_exit>:
 b2c:	08 95       	ret

00000b2e <__divmodsi4>:
 b2e:	05 2e       	mov	r0, r21
 b30:	97 fb       	bst	r25, 7
 b32:	1e f4       	brtc	.+6      	; 0xb3a <__divmodsi4+0xc>
 b34:	00 94       	com	r0
 b36:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__negsi2>
 b3a:	57 fd       	sbrc	r21, 7
 b3c:	07 d0       	rcall	.+14     	; 0xb4c <__divmodsi4_neg2>
 b3e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__udivmodsi4>
 b42:	07 fc       	sbrc	r0, 7
 b44:	03 d0       	rcall	.+6      	; 0xb4c <__divmodsi4_neg2>
 b46:	4e f4       	brtc	.+18     	; 0xb5a <__divmodsi4_exit>
 b48:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__negsi2>

00000b4c <__divmodsi4_neg2>:
 b4c:	50 95       	com	r21
 b4e:	40 95       	com	r20
 b50:	30 95       	com	r19
 b52:	21 95       	neg	r18
 b54:	3f 4f       	sbci	r19, 0xFF	; 255
 b56:	4f 4f       	sbci	r20, 0xFF	; 255
 b58:	5f 4f       	sbci	r21, 0xFF	; 255

00000b5a <__divmodsi4_exit>:
 b5a:	08 95       	ret

00000b5c <__negsi2>:
 b5c:	90 95       	com	r25
 b5e:	80 95       	com	r24
 b60:	70 95       	com	r23
 b62:	61 95       	neg	r22
 b64:	7f 4f       	sbci	r23, 0xFF	; 255
 b66:	8f 4f       	sbci	r24, 0xFF	; 255
 b68:	9f 4f       	sbci	r25, 0xFF	; 255
 b6a:	08 95       	ret

00000b6c <__udivmodhi4>:
 b6c:	aa 1b       	sub	r26, r26
 b6e:	bb 1b       	sub	r27, r27
 b70:	51 e1       	ldi	r21, 0x11	; 17
 b72:	07 c0       	rjmp	.+14     	; 0xb82 <__udivmodhi4_ep>

00000b74 <__udivmodhi4_loop>:
 b74:	aa 1f       	adc	r26, r26
 b76:	bb 1f       	adc	r27, r27
 b78:	a6 17       	cp	r26, r22
 b7a:	b7 07       	cpc	r27, r23
 b7c:	10 f0       	brcs	.+4      	; 0xb82 <__udivmodhi4_ep>
 b7e:	a6 1b       	sub	r26, r22
 b80:	b7 0b       	sbc	r27, r23

00000b82 <__udivmodhi4_ep>:
 b82:	88 1f       	adc	r24, r24
 b84:	99 1f       	adc	r25, r25
 b86:	5a 95       	dec	r21
 b88:	a9 f7       	brne	.-22     	; 0xb74 <__udivmodhi4_loop>
 b8a:	80 95       	com	r24
 b8c:	90 95       	com	r25
 b8e:	bc 01       	movw	r22, r24
 b90:	cd 01       	movw	r24, r26
 b92:	08 95       	ret

00000b94 <__udivmodsi4>:
 b94:	a1 e2       	ldi	r26, 0x21	; 33
 b96:	1a 2e       	mov	r1, r26
 b98:	aa 1b       	sub	r26, r26
 b9a:	bb 1b       	sub	r27, r27
 b9c:	fd 01       	movw	r30, r26
 b9e:	0d c0       	rjmp	.+26     	; 0xbba <__udivmodsi4_ep>

00000ba0 <__udivmodsi4_loop>:
 ba0:	aa 1f       	adc	r26, r26
 ba2:	bb 1f       	adc	r27, r27
 ba4:	ee 1f       	adc	r30, r30
 ba6:	ff 1f       	adc	r31, r31
 ba8:	a2 17       	cp	r26, r18
 baa:	b3 07       	cpc	r27, r19
 bac:	e4 07       	cpc	r30, r20
 bae:	f5 07       	cpc	r31, r21
 bb0:	20 f0       	brcs	.+8      	; 0xbba <__udivmodsi4_ep>
 bb2:	a2 1b       	sub	r26, r18
 bb4:	b3 0b       	sbc	r27, r19
 bb6:	e4 0b       	sbc	r30, r20
 bb8:	f5 0b       	sbc	r31, r21

00000bba <__udivmodsi4_ep>:
 bba:	66 1f       	adc	r22, r22
 bbc:	77 1f       	adc	r23, r23
 bbe:	88 1f       	adc	r24, r24
 bc0:	99 1f       	adc	r25, r25
 bc2:	1a 94       	dec	r1
 bc4:	69 f7       	brne	.-38     	; 0xba0 <__udivmodsi4_loop>
 bc6:	60 95       	com	r22
 bc8:	70 95       	com	r23
 bca:	80 95       	com	r24
 bcc:	90 95       	com	r25
 bce:	9b 01       	movw	r18, r22
 bd0:	ac 01       	movw	r20, r24
 bd2:	bd 01       	movw	r22, r26
 bd4:	cf 01       	movw	r24, r30
 bd6:	08 95       	ret

00000bd8 <__itoa_ncheck>:
 bd8:	bb 27       	eor	r27, r27
 bda:	4a 30       	cpi	r20, 0x0A	; 10
 bdc:	31 f4       	brne	.+12     	; 0xbea <__itoa_ncheck+0x12>
 bde:	99 23       	and	r25, r25
 be0:	22 f4       	brpl	.+8      	; 0xbea <__itoa_ncheck+0x12>
 be2:	bd e2       	ldi	r27, 0x2D	; 45
 be4:	90 95       	com	r25
 be6:	81 95       	neg	r24
 be8:	9f 4f       	sbci	r25, 0xFF	; 255
 bea:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__utoa_common>

00000bee <__utoa_ncheck>:
 bee:	bb 27       	eor	r27, r27

00000bf0 <__utoa_common>:
 bf0:	fb 01       	movw	r30, r22
 bf2:	55 27       	eor	r21, r21
 bf4:	aa 27       	eor	r26, r26
 bf6:	88 0f       	add	r24, r24
 bf8:	99 1f       	adc	r25, r25
 bfa:	aa 1f       	adc	r26, r26
 bfc:	a4 17       	cp	r26, r20
 bfe:	10 f0       	brcs	.+4      	; 0xc04 <__utoa_common+0x14>
 c00:	a4 1b       	sub	r26, r20
 c02:	83 95       	inc	r24
 c04:	50 51       	subi	r21, 0x10	; 16
 c06:	b9 f7       	brne	.-18     	; 0xbf6 <__utoa_common+0x6>
 c08:	a0 5d       	subi	r26, 0xD0	; 208
 c0a:	aa 33       	cpi	r26, 0x3A	; 58
 c0c:	08 f0       	brcs	.+2      	; 0xc10 <__utoa_common+0x20>
 c0e:	a9 5d       	subi	r26, 0xD9	; 217
 c10:	a1 93       	st	Z+, r26
 c12:	00 97       	sbiw	r24, 0x00	; 0
 c14:	79 f7       	brne	.-34     	; 0xbf4 <__utoa_common+0x4>
 c16:	b1 11       	cpse	r27, r1
 c18:	b1 93       	st	Z+, r27
 c1a:	11 92       	st	Z+, r1
 c1c:	cb 01       	movw	r24, r22
 c1e:	0c 94 11 06 	jmp	0xc22	; 0xc22 <strrev>

00000c22 <strrev>:
 c22:	dc 01       	movw	r26, r24
 c24:	fc 01       	movw	r30, r24
 c26:	67 2f       	mov	r22, r23
 c28:	71 91       	ld	r23, Z+
 c2a:	77 23       	and	r23, r23
 c2c:	e1 f7       	brne	.-8      	; 0xc26 <strrev+0x4>
 c2e:	32 97       	sbiw	r30, 0x02	; 2
 c30:	04 c0       	rjmp	.+8      	; 0xc3a <strrev+0x18>
 c32:	7c 91       	ld	r23, X
 c34:	6d 93       	st	X+, r22
 c36:	70 83       	st	Z, r23
 c38:	62 91       	ld	r22, -Z
 c3a:	ae 17       	cp	r26, r30
 c3c:	bf 07       	cpc	r27, r31
 c3e:	c8 f3       	brcs	.-14     	; 0xc32 <strrev+0x10>
 c40:	08 95       	ret

00000c42 <_exit>:
 c42:	f8 94       	cli

00000c44 <__stop_program>:
 c44:	ff cf       	rjmp	.-2      	; 0xc44 <__stop_program>
