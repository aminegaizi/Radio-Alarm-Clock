
lab6_3.elf:     format de fichier elf32-avr

Sections :
Idx Nom           Taille    VMA       LMA       Fich off  Algn
  0 .data         00000028  00800100  00002250  000022e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002250  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000166  00800128  00800128  0000230c  2**0
                  ALLOC
  3 .stab         00005ea4  00000000  00000000  0000230c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001cf7  00000000  00000000  000081b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00009ea7  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00009eb8  2**2
                  CONTENTS, READONLY

Déassemblage de la section .text :

00000000 <__vectors>:
       0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__ctors_end>
       4:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
       8:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
       c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      10:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      14:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      18:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      1c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      20:	0c 94 02 07 	jmp	0xe04	; 0xe04 <__vector_8>
      24:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      28:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      2c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      30:	0c 94 86 01 	jmp	0x30c	; 0x30c <__vector_12>
      34:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      38:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      3c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      40:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__vector_16>
      44:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      48:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__vector_18>
      4c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      50:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      54:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__vector_21>
      58:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      5c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      60:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      64:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      68:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      6c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      70:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      74:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      78:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      7c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      80:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      84:	0c 94 a9 0a 	jmp	0x1552	; 0x1552 <__vector_33>
      88:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      8c:	5e 07       	cpc	r21, r30
      8e:	65 07       	cpc	r22, r21
      90:	6c 07       	cpc	r22, r28
      92:	73 07       	cpc	r23, r19
      94:	7a 07       	cpc	r23, r26
      96:	81 07       	cpc	r24, r17
      98:	57 07       	cpc	r21, r23
      9a:	50 07       	cpc	r21, r16
      9c:	ea 0a       	sbc	r14, r26
      9e:	c1 0a       	sbc	r12, r17
      a0:	c1 0a       	sbc	r12, r17
      a2:	c1 0a       	sbc	r12, r17
      a4:	c1 0a       	sbc	r12, r17
      a6:	c1 0a       	sbc	r12, r17
      a8:	c1 0a       	sbc	r12, r17
      aa:	c1 0a       	sbc	r12, r17
      ac:	ea 0a       	sbc	r14, r26
      ae:	c1 0a       	sbc	r12, r17
      b0:	c1 0a       	sbc	r12, r17
      b2:	c1 0a       	sbc	r12, r17
      b4:	c1 0a       	sbc	r12, r17
      b6:	c1 0a       	sbc	r12, r17
      b8:	c1 0a       	sbc	r12, r17
      ba:	c1 0a       	sbc	r12, r17
      bc:	f4 0a       	sbc	r15, r20
      be:	c1 0a       	sbc	r12, r17
      c0:	c1 0a       	sbc	r12, r17
      c2:	c1 0a       	sbc	r12, r17
      c4:	c1 0a       	sbc	r12, r17
      c6:	c1 0a       	sbc	r12, r17
      c8:	c1 0a       	sbc	r12, r17
      ca:	c1 0a       	sbc	r12, r17
      cc:	c1 0a       	sbc	r12, r17
      ce:	c1 0a       	sbc	r12, r17
      d0:	c1 0a       	sbc	r12, r17
      d2:	c1 0a       	sbc	r12, r17
      d4:	c1 0a       	sbc	r12, r17
      d6:	c1 0a       	sbc	r12, r17
      d8:	c1 0a       	sbc	r12, r17
      da:	c1 0a       	sbc	r12, r17
      dc:	f4 0a       	sbc	r15, r20
      de:	c1 0a       	sbc	r12, r17
      e0:	c1 0a       	sbc	r12, r17
      e2:	c1 0a       	sbc	r12, r17
      e4:	c1 0a       	sbc	r12, r17
      e6:	c1 0a       	sbc	r12, r17
      e8:	c1 0a       	sbc	r12, r17
      ea:	c1 0a       	sbc	r12, r17
      ec:	c1 0a       	sbc	r12, r17
      ee:	c1 0a       	sbc	r12, r17
      f0:	c1 0a       	sbc	r12, r17
      f2:	c1 0a       	sbc	r12, r17
      f4:	c1 0a       	sbc	r12, r17
      f6:	c1 0a       	sbc	r12, r17
      f8:	c1 0a       	sbc	r12, r17
      fa:	c1 0a       	sbc	r12, r17
      fc:	0b 0b       	sbc	r16, r27
      fe:	c1 0a       	sbc	r12, r17
     100:	c1 0a       	sbc	r12, r17
     102:	c1 0a       	sbc	r12, r17
     104:	c1 0a       	sbc	r12, r17
     106:	c1 0a       	sbc	r12, r17
     108:	c1 0a       	sbc	r12, r17
     10a:	c1 0a       	sbc	r12, r17
     10c:	0f 0b       	sbc	r16, r31
     10e:	c1 0a       	sbc	r12, r17
     110:	c1 0a       	sbc	r12, r17
     112:	c1 0a       	sbc	r12, r17
     114:	c1 0a       	sbc	r12, r17
     116:	c1 0a       	sbc	r12, r17
     118:	c1 0a       	sbc	r12, r17
     11a:	c1 0a       	sbc	r12, r17
     11c:	c1 0a       	sbc	r12, r17
     11e:	c1 0a       	sbc	r12, r17
     120:	c1 0a       	sbc	r12, r17
     122:	c1 0a       	sbc	r12, r17
     124:	c1 0a       	sbc	r12, r17
     126:	c1 0a       	sbc	r12, r17
     128:	c1 0a       	sbc	r12, r17
     12a:	c1 0a       	sbc	r12, r17
     12c:	1d 0b       	sbc	r17, r29
     12e:	c1 0a       	sbc	r12, r17
     130:	c1 0a       	sbc	r12, r17
     132:	c1 0a       	sbc	r12, r17
     134:	c1 0a       	sbc	r12, r17
     136:	c1 0a       	sbc	r12, r17
     138:	c1 0a       	sbc	r12, r17
     13a:	c1 0a       	sbc	r12, r17
     13c:	db 0a       	sbc	r13, r27

0000013e <__ctors_end>:
     13e:	11 24       	eor	r1, r1
     140:	1f be       	out	0x3f, r1	; 63
     142:	cf ef       	ldi	r28, 0xFF	; 255
     144:	d0 e1       	ldi	r29, 0x10	; 16
     146:	de bf       	out	0x3e, r29	; 62
     148:	cd bf       	out	0x3d, r28	; 61

0000014a <__do_copy_data>:
     14a:	11 e0       	ldi	r17, 0x01	; 1
     14c:	a0 e0       	ldi	r26, 0x00	; 0
     14e:	b1 e0       	ldi	r27, 0x01	; 1
     150:	e0 e5       	ldi	r30, 0x50	; 80
     152:	f2 e2       	ldi	r31, 0x22	; 34
     154:	00 e0       	ldi	r16, 0x00	; 0
     156:	0b bf       	out	0x3b, r16	; 59
     158:	02 c0       	rjmp	.+4      	; 0x15e <__do_copy_data+0x14>
     15a:	07 90       	elpm	r0, Z+
     15c:	0d 92       	st	X+, r0
     15e:	a8 32       	cpi	r26, 0x28	; 40
     160:	b1 07       	cpc	r27, r17
     162:	d9 f7       	brne	.-10     	; 0x15a <__do_copy_data+0x10>

00000164 <__do_clear_bss>:
     164:	22 e0       	ldi	r18, 0x02	; 2
     166:	a8 e2       	ldi	r26, 0x28	; 40
     168:	b1 e0       	ldi	r27, 0x01	; 1
     16a:	01 c0       	rjmp	.+2      	; 0x16e <.do_clear_bss_start>

0000016c <.do_clear_bss_loop>:
     16c:	1d 92       	st	X+, r1

0000016e <.do_clear_bss_start>:
     16e:	ae 38       	cpi	r26, 0x8E	; 142
     170:	b2 07       	cpc	r27, r18
     172:	e1 f7       	brne	.-8      	; 0x16c <.do_clear_bss_loop>
     174:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <main>
     178:	0c 94 26 11 	jmp	0x224c	; 0x224c <_exit>

0000017c <__bad_interrupt>:
     17c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000180 <InitPushButtons>:
//                     void InitPushButtons()
//***********************************************************************
//This function initializes the IO to read the state of the push buttons
void InitPushButtons()
{
        DDRA = 0x00; //Set all PortA to input
     180:	1a ba       	out	0x1a, r1	; 26
        DDRB |= 0xF0; //Set PortB pin fom 4 to 7 as output
     182:	87 b3       	in	r24, 0x17	; 23
     184:	80 6f       	ori	r24, 0xF0	; 240
     186:	87 bb       	out	0x17, r24	; 23
        asm("nop"); //IO Synchronization necessary delay
     188:	00 00       	nop
        asm("nop");
     18a:	00 00       	nop
        PORTA = 0xFF; //Pull up resistor on PORTA input pins
     18c:	8f ef       	ldi	r24, 0xFF	; 255
     18e:	8b bb       	out	0x1b, r24	; 27
        PORTB |= (1<<PORTB4) | (1<<PORTB5) | (1<<PORTB6) | (1<<PORTB7); //Enable Tri-State buffer and cutoff Transistor
     190:	88 b3       	in	r24, 0x18	; 24
     192:	80 6f       	ori	r24, 0xF0	; 240
     194:	88 bb       	out	0x18, r24	; 24
     196:	08 95       	ret

00000198 <spi_init>:
//                     void spi_init()
//***********************************************************************
//This function initializes the SPI peripheral for LCD, BarGraph and Encoders
void spi_init(void){

	DDRF  |= 0x08;  //port F bit 3 is enable for LCD
     198:	e1 e6       	ldi	r30, 0x61	; 97
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	80 81       	ld	r24, Z
     19e:	88 60       	ori	r24, 0x08	; 8
     1a0:	80 83       	st	Z, r24
	asm("nop");//IO sync delay
     1a2:	00 00       	nop
	asm("nop");
     1a4:	00 00       	nop
	PORTF &= 0xF7;  //port F bit 3 is initially low
     1a6:	e2 e6       	ldi	r30, 0x62	; 98
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
     1aa:	80 81       	ld	r24, Z
     1ac:	87 7f       	andi	r24, 0xF7	; 247
     1ae:	80 83       	st	Z, r24

        DDRB |= 0b00000111; //Set PB0, PB1 and PB2 as output (resp. SS_N, CLK, MOSI) 
     1b0:	87 b3       	in	r24, 0x17	; 23
     1b2:	87 60       	ori	r24, 0x07	; 7
     1b4:	87 bb       	out	0x17, r24	; 23
        DDRB &= 0b11110111; //Set PB3 as input (MISO)
     1b6:	bb 98       	cbi	0x17, 3	; 23
        asm("nop"); //IO sync delay
     1b8:	00 00       	nop
        asm("nop");
     1ba:	00 00       	nop

        SPCR   = (1<<SPE) | (1<<MSTR); //master mode, clk low on idle, leading edge sample
     1bc:	80 e5       	ldi	r24, 0x50	; 80
     1be:	8d b9       	out	0x0d, r24	; 13
        SPSR   = (1<<SPI2X); //choose double speed operation
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	8e b9       	out	0x0e, r24	; 14
        DDRE   |= (1<<PE6) | (1<<PE5); //config PORTE6 and 5 as output
     1c4:	82 b1       	in	r24, 0x02	; 2
     1c6:	80 66       	ori	r24, 0x60	; 96
     1c8:	82 b9       	out	0x02, r24	; 2
        asm("nop"); //IO sync delay
     1ca:	00 00       	nop
        asm("nop");
     1cc:	00 00       	nop
        PORTE |= (1<<PORTE6) | (1<<PORTE5); //SH/LD_N to high : no shifting, clkinh high
     1ce:	83 b1       	in	r24, 0x03	; 3
     1d0:	80 66       	ori	r24, 0x60	; 96
     1d2:	83 b9       	out	0x03, r24	; 3
     1d4:	08 95       	ret

000001d6 <spi_read>:
//***********************************************************************
// This function reads data from the Encoders
int spi_read()
{

        PORTE |= (1<<PE6);            //send rising edge to SH/LD_N on HC165
     1d6:	1e 9a       	sbi	0x03, 6	; 3
        PORTE &= 0b10111111;             //send falling edge to  on HC165
     1d8:	1e 98       	cbi	0x03, 6	; 3
        PORTE |= (1<<PE6);            //send rising edge to SH/LD_N on HC165
     1da:	1e 9a       	sbi	0x03, 6	; 3
        PORTE &= (1<<PE6) | (0<<PE5); //Clk inhibit low, send data through miso
     1dc:	83 b1       	in	r24, 0x03	; 3
     1de:	80 74       	andi	r24, 0x40	; 64
     1e0:	83 b9       	out	0x03, r24	; 3
        SPDR = 0x00; //reset data value
     1e2:	1f b8       	out	0x0f, r1	; 15
        while (bit_is_clear(SPSR,SPIF)){} //spin till SPI data has been received (interrupt flag cleared)
     1e4:	77 9b       	sbis	0x0e, 7	; 14
     1e6:	fe cf       	rjmp	.-4      	; 0x1e4 <spi_read+0xe>
        PORTE |= (1<<PE5);
     1e8:	1d 9a       	sbi	0x03, 5	; 3
        return SPDR;
     1ea:	8f b1       	in	r24, 0x0f	; 15
}
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	08 95       	ret

000001f0 <spi_write>:
//***********************************************************************
//This function sends data via the MOSI port of the SPI 
//The data is sent to the bargraph
void spi_write(uint8_t display_count)
{
        SPDR = display_count;//send display_count to the display 
     1f0:	8f b9       	out	0x0f, r24	; 15
        while (bit_is_clear(SPSR,SPIF)){} //spin till SPI data has been sent 
     1f2:	77 9b       	sbis	0x0e, 7	; 14
     1f4:	fe cf       	rjmp	.-4      	; 0x1f2 <spi_write+0x2>

        PORTB |= 0b00000001; //Rising edge on PORTB0 (SRCLK of the  bargraph)
     1f6:	c0 9a       	sbi	0x18, 0	; 24
        PORTB &= 0b11111110;  //falling edge on PORTB0 (SRCLK of the bargraph)
     1f8:	c0 98       	cbi	0x18, 0	; 24
     1fa:	08 95       	ret

000001fc <TimeProcessing>:
//***********************************************************************
//This function processes the increments in seconds to compute the time past
//Called in Timer 0 RTC interrupt
void TimeProcessing() 
{
  if(dummy_counter == 128)//No prescaler, 128Hz
     1fc:	80 91 38 01 	lds	r24, 0x0138
     200:	80 38       	cpi	r24, 0x80	; 128
     202:	71 f1       	breq	.+92     	; 0x260 <TimeProcessing+0x64>
    second++;
    LocalTemp_flag = 1;
    uart_putc('t');
    dummy_counter = 0;
  }
  if(dummy_counter == 127) //second half of a second
     204:	8f 37       	cpi	r24, 0x7F	; 127
     206:	41 f1       	breq	.+80     	; 0x258 <TimeProcessing+0x5c>
  {second_flag = 0;}

  if(dummy_counter == 63) //first half of a second
     208:	8f 33       	cpi	r24, 0x3F	; 63
     20a:	c9 f0       	breq	.+50     	; 0x23e <TimeProcessing+0x42>
     20c:	8f 5f       	subi	r24, 0xFF	; 255
  {second_flag = 1;}

  if(second >= 60) 
     20e:	90 91 3f 01 	lds	r25, 0x013F
     212:	9c 33       	cpi	r25, 0x3C	; 60
     214:	38 f0       	brcs	.+14     	; 0x224 <TimeProcessing+0x28>
  { minute_clk++; 
     216:	90 91 3e 01 	lds	r25, 0x013E
     21a:	9f 5f       	subi	r25, 0xFF	; 255
     21c:	90 93 3e 01 	sts	0x013E, r25
    second = 0;}
     220:	10 92 3f 01 	sts	0x013F, r1
  if(minute_clk == 60) //60 mins = 1 hour
     224:	90 91 3e 01 	lds	r25, 0x013E
     228:	9c 33       	cpi	r25, 0x3C	; 60
     22a:	71 f0       	breq	.+28     	; 0x248 <TimeProcessing+0x4c>
  { hour_clk++;
    minute_clk = 0;}
  if(hour_clk == 24)
     22c:	90 91 3d 01 	lds	r25, 0x013D
     230:	98 31       	cpi	r25, 0x18	; 24
     232:	11 f4       	brne	.+4      	; 0x238 <TimeProcessing+0x3c>
  { hour_clk = 0;} 
     234:	10 92 3d 01 	sts	0x013D, r1
  dummy_counter++;  
     238:	80 93 38 01 	sts	0x0138, r24
     23c:	08 95       	ret
  }
  if(dummy_counter == 127) //second half of a second
  {second_flag = 0;}

  if(dummy_counter == 63) //first half of a second
  {second_flag = 1;}
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	80 93 37 01 	sts	0x0137, r24
     244:	80 e4       	ldi	r24, 0x40	; 64
     246:	e3 cf       	rjmp	.-58     	; 0x20e <TimeProcessing+0x12>

  if(second >= 60) 
  { minute_clk++; 
    second = 0;}
  if(minute_clk == 60) //60 mins = 1 hour
  { hour_clk++;
     248:	90 91 3d 01 	lds	r25, 0x013D
     24c:	9f 5f       	subi	r25, 0xFF	; 255
     24e:	90 93 3d 01 	sts	0x013D, r25
    minute_clk = 0;}
     252:	10 92 3e 01 	sts	0x013E, r1
     256:	ea cf       	rjmp	.-44     	; 0x22c <TimeProcessing+0x30>
    LocalTemp_flag = 1;
    uart_putc('t');
    dummy_counter = 0;
  }
  if(dummy_counter == 127) //second half of a second
  {second_flag = 0;}
     258:	10 92 37 01 	sts	0x0137, r1
     25c:	80 e8       	ldi	r24, 0x80	; 128
     25e:	d7 cf       	rjmp	.-82     	; 0x20e <TimeProcessing+0x12>
//Called in Timer 0 RTC interrupt
void TimeProcessing() 
{
  if(dummy_counter == 128)//No prescaler, 128Hz
  {
    second++;
     260:	80 91 3f 01 	lds	r24, 0x013F
     264:	8f 5f       	subi	r24, 0xFF	; 255
     266:	80 93 3f 01 	sts	0x013F, r24
    LocalTemp_flag = 1;
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	80 93 2e 01 	sts	0x012E, r24
    uart_putc('t');
     270:	84 e7       	ldi	r24, 0x74	; 116
     272:	0e 94 67 0b 	call	0x16ce	; 0x16ce <uart_putc>
    dummy_counter = 0;
     276:	10 92 38 01 	sts	0x0138, r1
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	c8 cf       	rjmp	.-112    	; 0x20e <TimeProcessing+0x12>

0000027e <__vector_16>:

//***********************************************************************
//                     ISR for timer counter zero
//***********************************************************************
ISR( TIMER0_OVF_vect ) 
{
     27e:	1f 92       	push	r1
     280:	0f 92       	push	r0
     282:	0f b6       	in	r0, 0x3f	; 63
     284:	0f 92       	push	r0
     286:	11 24       	eor	r1, r1
     288:	0b b6       	in	r0, 0x3b	; 59
     28a:	0f 92       	push	r0
     28c:	2f 93       	push	r18
     28e:	3f 93       	push	r19
     290:	4f 93       	push	r20
     292:	5f 93       	push	r21
     294:	6f 93       	push	r22
     296:	7f 93       	push	r23
     298:	8f 93       	push	r24
     29a:	9f 93       	push	r25
     29c:	af 93       	push	r26
     29e:	bf 93       	push	r27
     2a0:	ef 93       	push	r30
     2a2:	ff 93       	push	r31
	TimeProcessing(); //Count the time for the clock
     2a4:	0e 94 fe 00 	call	0x1fc	; 0x1fc <TimeProcessing>
	if(snooze == 1 && alarm_set ==1)
     2a8:	80 91 32 01 	lds	r24, 0x0132
     2ac:	88 23       	and	r24, r24
     2ae:	69 f0       	breq	.+26     	; 0x2ca <__vector_16+0x4c>
     2b0:	80 91 34 01 	lds	r24, 0x0134
     2b4:	88 23       	and	r24, r24
     2b6:	49 f0       	breq	.+18     	; 0x2ca <__vector_16+0x4c>
		TENsec_counter++; //Count 10 seconds for Snooze
     2b8:	80 91 2f 01 	lds	r24, 0x012F
     2bc:	90 91 30 01 	lds	r25, 0x0130
     2c0:	01 96       	adiw	r24, 0x01	; 1
     2c2:	90 93 30 01 	sts	0x0130, r25
     2c6:	80 93 2f 01 	sts	0x012F, r24
	
	return; 
}
     2ca:	ff 91       	pop	r31
     2cc:	ef 91       	pop	r30
     2ce:	bf 91       	pop	r27
     2d0:	af 91       	pop	r26
     2d2:	9f 91       	pop	r25
     2d4:	8f 91       	pop	r24
     2d6:	7f 91       	pop	r23
     2d8:	6f 91       	pop	r22
     2da:	5f 91       	pop	r21
     2dc:	4f 91       	pop	r20
     2de:	3f 91       	pop	r19
     2e0:	2f 91       	pop	r18
     2e2:	0f 90       	pop	r0
     2e4:	0b be       	out	0x3b, r0	; 59
     2e6:	0f 90       	pop	r0
     2e8:	0f be       	out	0x3f, r0	; 63
     2ea:	0f 90       	pop	r0
     2ec:	1f 90       	pop	r1
     2ee:	18 95       	reti

000002f0 <TIM0_RTC_init>:
//                     Timer 0 RTC mode initialization
//***********************************************************************
//Init Timer 0 as RTC with a frequency of 128Hz
void TIM0_RTC_init()
{
	ASSR |= (1<<AS0); //Timer 0 clocked from oscillator clkTOS = 32768Hz
     2f0:	80 b7       	in	r24, 0x30	; 48
     2f2:	88 60       	ori	r24, 0x08	; 8
     2f4:	80 bf       	out	0x30, r24	; 48
	TCNT0 = 0x00; //Reset start value for the timer
     2f6:	12 be       	out	0x32, r1	; 50
	TCCR0 = (0<<CS2) | (0<<CS1) | (1<<CS0); //Select prescaler value of 1-> 128 interrupt every second
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	83 bf       	out	0x33, r24	; 51
	while(!bit_is_clear(ASSR, TCN0UB)) //Wait for ASSR to be updated
     2fc:	00 b6       	in	r0, 0x30	; 48
     2fe:	02 fc       	sbrc	r0, 2
     300:	fd cf       	rjmp	.-6      	; 0x2fc <TIM0_RTC_init+0xc>
  	{}
  	TIMSK |= (1<<TOIE0); //Enable Timer 0 Overflow interrupt
     302:	87 b7       	in	r24, 0x37	; 55
     304:	81 60       	ori	r24, 0x01	; 1
     306:	87 bf       	out	0x37, r24	; 55
  	sei(); //Enable global interrupt
     308:	78 94       	sei
     30a:	08 95       	ret

0000030c <__vector_12>:

//***********************************************************************
//                     ISR for timer one
//***********************************************************************
ISR(TIMER1_COMPA_vect)
{
     30c:	1f 92       	push	r1
     30e:	0f 92       	push	r0
     310:	0f b6       	in	r0, 0x3f	; 63
     312:	0f 92       	push	r0
     314:	11 24       	eor	r1, r1
     316:	0b b6       	in	r0, 0x3b	; 59
     318:	0f 92       	push	r0
     31a:	2f 93       	push	r18
     31c:	3f 93       	push	r19
     31e:	4f 93       	push	r20
     320:	5f 93       	push	r21
     322:	6f 93       	push	r22
     324:	7f 93       	push	r23
     326:	8f 93       	push	r24
     328:	9f 93       	push	r25
     32a:	af 93       	push	r26
     32c:	bf 93       	push	r27
     32e:	ef 93       	push	r30
     330:	ff 93       	push	r31
	if(trigger_alarm) //If alarm should be triggered, write on LCD and send a signal to speaker
     332:	80 91 33 01 	lds	r24, 0x0133
     336:	88 23       	and	r24, r24
     338:	d9 f1       	breq	.+118    	; 0x3b0 <__vector_12+0xa4>
 	{	
		PORTD ^= (1<<PD2); //Toggle PORTD pin 2 with XOR operation
     33a:	92 b3       	in	r25, 0x12	; 18
     33c:	84 e0       	ldi	r24, 0x04	; 4
     33e:	89 27       	eor	r24, r25
     340:	82 bb       	out	0x12, r24	; 18
	//	duty_cycle = 90;
	//	TIM3_set_PWM();
		if(!display_WR)
     342:	80 91 31 01 	lds	r24, 0x0131
     346:	88 23       	and	r24, r24
     348:	09 f4       	brne	.+2      	; 0x34c <__vector_12+0x40>
     34a:	41 c0       	rjmp	.+130    	; 0x3ce <__vector_12+0xc2>
		{	string2lcd("Alarm!");
			display_WR = 1;}
                	duty_cycle = 90;
     34c:	8a e5       	ldi	r24, 0x5A	; 90
     34e:	80 93 2c 01 	sts	0x012C, r24
//                     void TIM3_set_PWM()
//***********************************************************************
//Change the PWM duty cycle for volume control
void TIM3_set_PWM()
{
	uint16_t conversion = (duty_cycle*10.23); // duty*1023/100 = duty*10.23 
     352:	60 91 2c 01 	lds	r22, 0x012C
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__floatsisf>
     360:	24 e1       	ldi	r18, 0x14	; 20
     362:	3e ea       	ldi	r19, 0xAE	; 174
     364:	43 e2       	ldi	r20, 0x23	; 35
     366:	51 e4       	ldi	r21, 0x41	; 65
     368:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <__mulsf3>
     36c:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__fixunssfsi>
	OCR3A = 1023 - conversion; //set the duty cycle value
     370:	2f ef       	ldi	r18, 0xFF	; 255
     372:	33 e0       	ldi	r19, 0x03	; 3
     374:	c9 01       	movw	r24, r18
     376:	86 1b       	sub	r24, r22
     378:	97 0b       	sbc	r25, r23
     37a:	90 93 87 00 	sts	0x0087, r25
     37e:	80 93 86 00 	sts	0x0086, r24
		trigger_alarm = 1; //trigger the alarm
		TENsec_counter = 0; //reset counter
		//clear_display();
		display_WR = 0;
	}
	if((display_WR == 1) && (trigger_alarm == 0)) //if alarm disabled, clear LCD
     382:	80 91 33 01 	lds	r24, 0x0133
     386:	88 23       	and	r24, r24
     388:	e9 f0       	breq	.+58     	; 0x3c4 <__vector_12+0xb8>
	{	PORTD &= (0<<PD2);
		//duty_cycle = 0;
		//TIM3_set_PWM();
	}
		
}
     38a:	ff 91       	pop	r31
     38c:	ef 91       	pop	r30
     38e:	bf 91       	pop	r27
     390:	af 91       	pop	r26
     392:	9f 91       	pop	r25
     394:	8f 91       	pop	r24
     396:	7f 91       	pop	r23
     398:	6f 91       	pop	r22
     39a:	5f 91       	pop	r21
     39c:	4f 91       	pop	r20
     39e:	3f 91       	pop	r19
     3a0:	2f 91       	pop	r18
     3a2:	0f 90       	pop	r0
     3a4:	0b be       	out	0x3b, r0	; 59
     3a6:	0f 90       	pop	r0
     3a8:	0f be       	out	0x3f, r0	; 63
     3aa:	0f 90       	pop	r0
     3ac:	1f 90       	pop	r1
     3ae:	18 95       	reti
		{	string2lcd("Alarm!");
			display_WR = 1;}
                	duty_cycle = 90;
                	TIM3_set_PWM();			
		}	
	else if(TENsec_counter == 1280) //If its been 10 secs since snooze button was pushed
     3b0:	80 91 2f 01 	lds	r24, 0x012F
     3b4:	90 91 30 01 	lds	r25, 0x0130
     3b8:	81 15       	cp	r24, r1
     3ba:	95 40       	sbci	r25, 0x05	; 5
     3bc:	81 f0       	breq	.+32     	; 0x3de <__vector_12+0xd2>
		trigger_alarm = 1; //trigger the alarm
		TENsec_counter = 0; //reset counter
		//clear_display();
		display_WR = 0;
	}
	if((display_WR == 1) && (trigger_alarm == 0)) //if alarm disabled, clear LCD
     3be:	80 91 31 01 	lds	r24, 0x0131
     3c2:	81 11       	cpse	r24, r1
	{
		display_WR = 0; 
     3c4:	10 92 31 01 	sts	0x0131, r1
		//clear_display();
	}
	if(!trigger_alarm) //keep signal low if alarm disabled
	{	PORTD &= (0<<PD2);
     3c8:	82 b3       	in	r24, 0x12	; 18
     3ca:	12 ba       	out	0x12, r1	; 18
     3cc:	de cf       	rjmp	.-68     	; 0x38a <__vector_12+0x7e>
 	{	
		PORTD ^= (1<<PD2); //Toggle PORTD pin 2 with XOR operation
	//	duty_cycle = 90;
	//	TIM3_set_PWM();
		if(!display_WR)
		{	string2lcd("Alarm!");
     3ce:	88 e1       	ldi	r24, 0x18	; 24
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	0e 94 af 08 	call	0x115e	; 0x115e <string2lcd>
			display_WR = 1;}
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	80 93 31 01 	sts	0x0131, r24
     3dc:	b7 cf       	rjmp	.-146    	; 0x34c <__vector_12+0x40>
                	duty_cycle = 90;
                	TIM3_set_PWM();			
		}	
	else if(TENsec_counter == 1280) //If its been 10 secs since snooze button was pushed
	{	snooze = 0; //reset snooze flag
     3de:	10 92 32 01 	sts	0x0132, r1
		trigger_alarm = 1; //trigger the alarm
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	80 93 33 01 	sts	0x0133, r24
		TENsec_counter = 0; //reset counter
     3e8:	10 92 30 01 	sts	0x0130, r1
     3ec:	10 92 2f 01 	sts	0x012F, r1
		//clear_display();
		display_WR = 0;
     3f0:	10 92 31 01 	sts	0x0131, r1
     3f4:	ca cf       	rjmp	.-108    	; 0x38a <__vector_12+0x7e>

000003f6 <TIM1_init>:
//                     TIM1_init()
//***********************************************************************
//Initialize timer 1 ISR 
void TIM1_init()
{
  	TCCR1A = 0x00;                  //Normal mode operation
     3f6:	1f bc       	out	0x2f, r1	; 47
  	TCCR1B = (1<<WGM12) | (1<<CS10) | (1<<CS11);   //use OCR1A as source for TOP, use clk/1024
     3f8:	8b e0       	ldi	r24, 0x0B	; 11
     3fa:	8e bd       	out	0x2e, r24	; 46
  	TCCR1C = 0x00;                          //no forced compare 
     3fc:	10 92 7a 00 	sts	0x007A, r1
  	OCR1A = 0x0269; //top value
     400:	89 e6       	ldi	r24, 0x69	; 105
     402:	92 e0       	ldi	r25, 0x02	; 2
     404:	9b bd       	out	0x2b, r25	; 43
     406:	8a bd       	out	0x2a, r24	; 42
  	TIMSK |= (1<<OCIE1A); //enable interrupt
     408:	87 b7       	in	r24, 0x37	; 55
     40a:	80 61       	ori	r24, 0x10	; 16
     40c:	87 bf       	out	0x37, r24	; 55

  	DDRD |= (1<<PORTD2); // Port D bit 2 output
     40e:	8a 9a       	sbi	0x11, 2	; 17
  	PORTD |= (0<<PD2); //high state
     410:	82 b3       	in	r24, 0x12	; 18
     412:	82 bb       	out	0x12, r24	; 18
     414:	08 95       	ret

00000416 <InitLEDdisplay>:
//                     void InitLEDdisplay()
//***********************************************************************
//This function initializes the IO to use the 4Digit LED display
void InitLEDdisplay()
{
  	DDRA = 0xFF; //Set PORTA to all output
     416:	8f ef       	ldi	r24, 0xFF	; 255
     418:	8a bb       	out	0x1a, r24	; 26
  	DDRB |= 0XF0; //Set PORTB pins 4 to 7 to output
     41a:	87 b3       	in	r24, 0x17	; 23
     41c:	80 6f       	ori	r24, 0xF0	; 240
     41e:	87 bb       	out	0x17, r24	; 23
  	asm("nop"); //IO Synchronization delay
     420:	00 00       	nop
  	asm("nop"); //IO Synchronization delay
     422:	00 00       	nop
  	PORTB |= 0b01100000; //Set PB5 and PB6 to 1 (no digit selected on Display)
     424:	88 b3       	in	r24, 0x18	; 24
     426:	80 66       	ori	r24, 0x60	; 96
     428:	88 bb       	out	0x18, r24	; 24
  	PORTB &= 0b01101111; //Set PB4 and PB7 to 0 (transistor saturated) 
     42a:	88 b3       	in	r24, 0x18	; 24
     42c:	8f 76       	andi	r24, 0x6F	; 111
     42e:	88 bb       	out	0x18, r24	; 24
     430:	08 95       	ret

00000432 <SelectDigit>:
//***********************************************************************
//This function take in parameter the DigitNumber to select
//It chooses the correct parameters to turn on that digit
void SelectDigit(int DigitNumber)
{
  	switch (DigitNumber)
     432:	82 30       	cpi	r24, 0x02	; 2
     434:	91 05       	cpc	r25, r1
     436:	b9 f0       	breq	.+46     	; 0x466 <SelectDigit+0x34>
     438:	3c f4       	brge	.+14     	; 0x448 <SelectDigit+0x16>
     43a:	00 97       	sbiw	r24, 0x00	; 0
     43c:	91 f0       	breq	.+36     	; 0x462 <SelectDigit+0x30>
     43e:	01 97       	sbiw	r24, 0x01	; 1
     440:	61 f4       	brne	.+24     	; 0x45a <SelectDigit+0x28>
        {
                case 0: //Choose digit number 1 (from the right)
                        PORTB = (0<<PORTB4) | (0<<PORTB5) | (0<<PORTB6);
                        break;
                case 1:  //Choose digit number 2 
                        PORTB = (1<<PORTB4) | (0<<PORTB5) | (0<<PORTB6);
     442:	80 e1       	ldi	r24, 0x10	; 16
     444:	88 bb       	out	0x18, r24	; 24
                        break;
     446:	08 95       	ret
//***********************************************************************
//This function take in parameter the DigitNumber to select
//It chooses the correct parameters to turn on that digit
void SelectDigit(int DigitNumber)
{
  	switch (DigitNumber)
     448:	83 30       	cpi	r24, 0x03	; 3
     44a:	91 05       	cpc	r25, r1
     44c:	39 f0       	breq	.+14     	; 0x45c <SelectDigit+0x2a>
     44e:	04 97       	sbiw	r24, 0x04	; 4
     450:	19 f4       	brne	.+6      	; 0x458 <SelectDigit+0x26>
                    break; 
                case 3:  //Choose digit number 3
                        PORTB = (1<<PORTB4) | (1<<PORTB5) | (0<<PORTB6);
                        break;
                case 4: //Choose digit number 4
            		PORTB = (0<<PORTB4) | (0<<PORTB5) | (1<<PORTB6);
     452:	80 e4       	ldi	r24, 0x40	; 64
     454:	88 bb       	out	0x18, r24	; 24
     456:	08 95       	ret
     458:	08 95       	ret
     45a:	08 95       	ret
                        break;
                case 2: //Choose the colon 
                    	PORTB = (0<<PORTB4) | (1<<PORTB5) | (0<<PORTB7);
                    break; 
                case 3:  //Choose digit number 3
                        PORTB = (1<<PORTB4) | (1<<PORTB5) | (0<<PORTB6);
     45c:	80 e3       	ldi	r24, 0x30	; 48
     45e:	88 bb       	out	0x18, r24	; 24
                        break;
     460:	08 95       	ret
void SelectDigit(int DigitNumber)
{
  	switch (DigitNumber)
        {
                case 0: //Choose digit number 1 (from the right)
                        PORTB = (0<<PORTB4) | (0<<PORTB5) | (0<<PORTB6);
     462:	18 ba       	out	0x18, r1	; 24
                        break;
     464:	08 95       	ret
                case 1:  //Choose digit number 2 
                        PORTB = (1<<PORTB4) | (0<<PORTB5) | (0<<PORTB6);
                        break;
                case 2: //Choose the colon 
                    	PORTB = (0<<PORTB4) | (1<<PORTB5) | (0<<PORTB7);
     466:	80 e2       	ldi	r24, 0x20	; 32
     468:	88 bb       	out	0x18, r24	; 24
                    break; 
     46a:	08 95       	ret

0000046c <SeperateDigits>:
//                     void SeperateDigits()
//***********************************************************************
//This function separates the counter value into 4 different digits to be displayed
//The value of the number to be displayed by each digit is a modulo of 10
void SeperateDigits()
{
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29

	uint8_t minute = 0, hour = 0;
	if(set_alarm_ena == 1)
     470:	80 91 35 01 	lds	r24, 0x0135
     474:	88 23       	and	r24, r24
     476:	09 f4       	brne	.+2      	; 0x47a <SeperateDigits+0xe>
     478:	84 c0       	rjmp	.+264    	; 0x582 <SeperateDigits+0x116>
	{	minute = minute_alarm;
     47a:	c0 91 0d 01 	lds	r28, 0x010D
		hour = hour_alarm;
     47e:	a0 91 3c 01 	lds	r26, 0x013C
	else
	{	minute = minute_clk;
		hour = hour_clk;
	}

	segment_data[0] = dec_to_7seg[minute%10]; //The ones for minutes
     482:	8d ec       	ldi	r24, 0xCD	; 205
     484:	c8 9f       	mul	r28, r24
     486:	e1 2d       	mov	r30, r1
     488:	11 24       	eor	r1, r1
     48a:	e6 95       	lsr	r30
     48c:	e6 95       	lsr	r30
     48e:	e6 95       	lsr	r30
     490:	2a e0       	ldi	r18, 0x0A	; 10
     492:	e2 9f       	mul	r30, r18
     494:	c0 19       	sub	r28, r0
     496:	11 24       	eor	r1, r1
     498:	d0 e0       	ldi	r29, 0x00	; 0
     49a:	cf 5f       	subi	r28, 0xFF	; 255
     49c:	de 4f       	sbci	r29, 0xFE	; 254
     49e:	98 81       	ld	r25, Y
     4a0:	90 93 7f 01 	sts	0x017F, r25
	segment_data[1] = dec_to_7seg[(minute/10)%10]; //The tens for minutes
     4a4:	e8 9f       	mul	r30, r24
     4a6:	91 2d       	mov	r25, r1
     4a8:	11 24       	eor	r1, r1
     4aa:	96 95       	lsr	r25
     4ac:	96 95       	lsr	r25
     4ae:	96 95       	lsr	r25
     4b0:	2a e0       	ldi	r18, 0x0A	; 10
     4b2:	92 9f       	mul	r25, r18
     4b4:	e0 19       	sub	r30, r0
     4b6:	11 24       	eor	r1, r1
     4b8:	f0 e0       	ldi	r31, 0x00	; 0
     4ba:	ef 5f       	subi	r30, 0xFF	; 255
     4bc:	fe 4f       	sbci	r31, 0xFE	; 254
     4be:	90 81       	ld	r25, Z
     4c0:	90 93 80 01 	sts	0x0180, r25
	segment_data[2] = dec_to_7seg[hour%10]; //The ones for hours
     4c4:	a8 9f       	mul	r26, r24
     4c6:	e1 2d       	mov	r30, r1
     4c8:	11 24       	eor	r1, r1
     4ca:	e6 95       	lsr	r30
     4cc:	e6 95       	lsr	r30
     4ce:	e6 95       	lsr	r30
     4d0:	9a e0       	ldi	r25, 0x0A	; 10
     4d2:	e9 9f       	mul	r30, r25
     4d4:	a0 19       	sub	r26, r0
     4d6:	11 24       	eor	r1, r1
     4d8:	b0 e0       	ldi	r27, 0x00	; 0
     4da:	af 5f       	subi	r26, 0xFF	; 255
     4dc:	be 4f       	sbci	r27, 0xFE	; 254
     4de:	9c 91       	ld	r25, X
     4e0:	90 93 81 01 	sts	0x0181, r25
	segment_data[3] = dec_to_7seg[(hour/10)%10]; //The tens for hour
     4e4:	e8 9f       	mul	r30, r24
     4e6:	81 2d       	mov	r24, r1
     4e8:	11 24       	eor	r1, r1
     4ea:	86 95       	lsr	r24
     4ec:	86 95       	lsr	r24
     4ee:	86 95       	lsr	r24
     4f0:	2a e0       	ldi	r18, 0x0A	; 10
     4f2:	82 9f       	mul	r24, r18
     4f4:	e0 19       	sub	r30, r0
     4f6:	11 24       	eor	r1, r1
     4f8:	f0 e0       	ldi	r31, 0x00	; 0
     4fa:	ef 5f       	subi	r30, 0xFF	; 255
     4fc:	fe 4f       	sbci	r31, 0xFE	; 254
     4fe:	80 81       	ld	r24, Z
     500:	80 93 82 01 	sts	0x0182, r24
	segment_data[4] = 0xFC; //Colon 
     504:	8c ef       	ldi	r24, 0xFC	; 252
     506:	80 93 83 01 	sts	0x0183, r24
void SelectDigit(int DigitNumber)
{
  	switch (DigitNumber)
        {
                case 0: //Choose digit number 1 (from the right)
                        PORTB = (0<<PORTB4) | (0<<PORTB5) | (0<<PORTB6);
     50a:	18 ba       	out	0x18, r1	; 24
	segment_data[2] = dec_to_7seg[hour%10]; //The ones for hours
	segment_data[3] = dec_to_7seg[(hour/10)%10]; //The tens for hour
	segment_data[4] = 0xFC; //Colon 

	SelectDigit(0); //Select digit 0
	PORTA = segment_data[0]; //Display the "ones" value
     50c:	80 91 7f 01 	lds	r24, 0x017F
     510:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     512:	8f ec       	ldi	r24, 0xCF	; 207
     514:	97 e0       	ldi	r25, 0x07	; 7
     516:	01 97       	sbiw	r24, 0x01	; 1
     518:	f1 f7       	brne	.-4      	; 0x516 <SeperateDigits+0xaa>
     51a:	00 c0       	rjmp	.+0      	; 0x51c <SeperateDigits+0xb0>
     51c:	00 00       	nop
        {
                case 0: //Choose digit number 1 (from the right)
                        PORTB = (0<<PORTB4) | (0<<PORTB5) | (0<<PORTB6);
                        break;
                case 1:  //Choose digit number 2 
                        PORTB = (1<<PORTB4) | (0<<PORTB5) | (0<<PORTB6);
     51e:	80 e1       	ldi	r24, 0x10	; 16
     520:	88 bb       	out	0x18, r24	; 24
	PORTA = segment_data[0]; //Display the "ones" value
	_delay_us(500);


	SelectDigit(1); //Select Digit 1
	PORTA = segment_data[1]; //Dispay "tens" value
     522:	80 91 80 01 	lds	r24, 0x0180
     526:	8b bb       	out	0x1b, r24	; 27
     528:	8f ec       	ldi	r24, 0xCF	; 207
     52a:	97 e0       	ldi	r25, 0x07	; 7
     52c:	01 97       	sbiw	r24, 0x01	; 1
     52e:	f1 f7       	brne	.-4      	; 0x52c <SeperateDigits+0xc0>
     530:	00 c0       	rjmp	.+0      	; 0x532 <SeperateDigits+0xc6>
     532:	00 00       	nop
	_delay_us(500);
	

	if((set_clock_ena == 0) && ( set_alarm_ena == 0))
     534:	80 91 36 01 	lds	r24, 0x0136
     538:	88 23       	and	r24, r24
     53a:	41 f1       	breq	.+80     	; 0x58c <SeperateDigits+0x120>
                        break;
                case 1:  //Choose digit number 2 
                        PORTB = (1<<PORTB4) | (0<<PORTB5) | (0<<PORTB6);
                        break;
                case 2: //Choose the colon 
                    	PORTB = (0<<PORTB4) | (1<<PORTB5) | (0<<PORTB7);
     53c:	80 e2       	ldi	r24, 0x20	; 32
     53e:	88 bb       	out	0x18, r24	; 24
				PORTA = 0xFC; //On
		}
	}
	else if((set_clock_ena || set_alarm_ena) == 1)
	{	SelectDigit(2); //If time or alarm are being set, no blinking of colon
		PORTA = 0xFC;
     540:	8c ef       	ldi	r24, 0xFC	; 252
     542:	8b bb       	out	0x1b, r24	; 27
     544:	8f ec       	ldi	r24, 0xCF	; 207
     546:	97 e0       	ldi	r25, 0x07	; 7
     548:	01 97       	sbiw	r24, 0x01	; 1
     54a:	f1 f7       	brne	.-4      	; 0x548 <SeperateDigits+0xdc>
     54c:	00 c0       	rjmp	.+0      	; 0x54e <SeperateDigits+0xe2>
     54e:	00 00       	nop
                        break;
                case 2: //Choose the colon 
                    	PORTB = (0<<PORTB4) | (1<<PORTB5) | (0<<PORTB7);
                    break; 
                case 3:  //Choose digit number 3
                        PORTB = (1<<PORTB4) | (1<<PORTB5) | (0<<PORTB6);
     550:	80 e3       	ldi	r24, 0x30	; 48
     552:	88 bb       	out	0x18, r24	; 24
	}
	_delay_us(500);
	

	SelectDigit(3); //Select Digit 3 
	PORTA = segment_data[2]; //Display hundreds valus
     554:	80 91 81 01 	lds	r24, 0x0181
     558:	8b bb       	out	0x1b, r24	; 27
     55a:	8f ec       	ldi	r24, 0xCF	; 207
     55c:	97 e0       	ldi	r25, 0x07	; 7
     55e:	01 97       	sbiw	r24, 0x01	; 1
     560:	f1 f7       	brne	.-4      	; 0x55e <SeperateDigits+0xf2>
     562:	00 c0       	rjmp	.+0      	; 0x564 <SeperateDigits+0xf8>
     564:	00 00       	nop
                    break; 
                case 3:  //Choose digit number 3
                        PORTB = (1<<PORTB4) | (1<<PORTB5) | (0<<PORTB6);
                        break;
                case 4: //Choose digit number 4
            		PORTB = (0<<PORTB4) | (0<<PORTB5) | (1<<PORTB6);
     566:	80 e4       	ldi	r24, 0x40	; 64
     568:	88 bb       	out	0x18, r24	; 24
	_delay_us(500);	



	SelectDigit(4); //Select Digit 4
	PORTA = segment_data[3]; //Display thousands value
     56a:	80 91 82 01 	lds	r24, 0x0182
     56e:	8b bb       	out	0x1b, r24	; 27
     570:	8f ec       	ldi	r24, 0xCF	; 207
     572:	97 e0       	ldi	r25, 0x07	; 7
     574:	01 97       	sbiw	r24, 0x01	; 1
     576:	f1 f7       	brne	.-4      	; 0x574 <SeperateDigits+0x108>
     578:	00 c0       	rjmp	.+0      	; 0x57a <SeperateDigits+0x10e>
     57a:	00 00       	nop
	_delay_us(500);


}
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
     580:	08 95       	ret
	if(set_alarm_ena == 1)
	{	minute = minute_alarm;
		hour = hour_alarm;
	}
	else
	{	minute = minute_clk;
     582:	c0 91 3e 01 	lds	r28, 0x013E
		hour = hour_clk;
     586:	a0 91 3d 01 	lds	r26, 0x013D
     58a:	7b cf       	rjmp	.-266    	; 0x482 <SeperateDigits+0x16>
	SelectDigit(1); //Select Digit 1
	PORTA = segment_data[1]; //Dispay "tens" value
	_delay_us(500);
	

	if((set_clock_ena == 0) && ( set_alarm_ena == 0))
     58c:	80 91 35 01 	lds	r24, 0x0135
     590:	81 11       	cpse	r24, r1
     592:	d4 cf       	rjmp	.-88     	; 0x53c <SeperateDigits+0xd0>
                        break;
                case 1:  //Choose digit number 2 
                        PORTB = (1<<PORTB4) | (0<<PORTB5) | (0<<PORTB6);
                        break;
                case 2: //Choose the colon 
                    	PORTB = (0<<PORTB4) | (1<<PORTB5) | (0<<PORTB7);
     594:	80 e2       	ldi	r24, 0x20	; 32
     596:	88 bb       	out	0x18, r24	; 24
	_delay_us(500);
	

	if((set_clock_ena == 0) && ( set_alarm_ena == 0))
	{	SelectDigit(2); //Select Digit 2: colon
		if(second_flag == 0) //Flag for a half second
     598:	80 91 37 01 	lds	r24, 0x0137
     59c:	81 11       	cpse	r24, r1
     59e:	08 c0       	rjmp	.+16     	; 0x5b0 <SeperateDigits+0x144>
		{	if(alarm_set) //add celsius point to notify alarm set
     5a0:	80 91 34 01 	lds	r24, 0x0134
     5a4:	88 23       	and	r24, r24
     5a6:	69 f0       	breq	.+26     	; 0x5c2 <SeperateDigits+0x156>
				PORTA = 0xFB;
     5a8:	8b ef       	ldi	r24, 0xFB	; 251
     5aa:	8b bb       	out	0x1b, r24	; 27
     5ac:	80 91 37 01 	lds	r24, 0x0137
			else 	
				PORTA = 0xFF; //Off
		}
		if(second_flag == 1)
     5b0:	81 30       	cpi	r24, 0x01	; 1
     5b2:	41 f6       	brne	.-112    	; 0x544 <SeperateDigits+0xd8>
		{ 	if(alarm_set)
     5b4:	80 91 34 01 	lds	r24, 0x0134
     5b8:	88 23       	and	r24, r24
     5ba:	11 f2       	breq	.-124    	; 0x540 <SeperateDigits+0xd4>
				PORTA = 0xF8;
     5bc:	88 ef       	ldi	r24, 0xF8	; 248
     5be:	8b bb       	out	0x1b, r24	; 27
     5c0:	c1 cf       	rjmp	.-126    	; 0x544 <SeperateDigits+0xd8>
	{	SelectDigit(2); //Select Digit 2: colon
		if(second_flag == 0) //Flag for a half second
		{	if(alarm_set) //add celsius point to notify alarm set
				PORTA = 0xFB;
			else 	
				PORTA = 0xFF; //Off
     5c2:	8f ef       	ldi	r24, 0xFF	; 255
     5c4:	8b bb       	out	0x1b, r24	; 27
     5c6:	80 91 37 01 	lds	r24, 0x0137
     5ca:	f2 cf       	rjmp	.-28     	; 0x5b0 <SeperateDigits+0x144>

000005cc <SeperateDigits_fm>:

}


void SeperateDigits_fm(uint16_t counter_fm)
{
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
    counter_fm = counter_fm + 881;
     5d0:	ec 01       	movw	r28, r24
     5d2:	cf 58       	subi	r28, 0x8F	; 143
     5d4:	dc 4f       	sbci	r29, 0xFC	; 252
    segment_data[0] = dec_to_7seg[counter_fm%10]; //The ones
     5d6:	9e 01       	movw	r18, r28
     5d8:	ad ec       	ldi	r26, 0xCD	; 205
     5da:	bc ec       	ldi	r27, 0xCC	; 204
     5dc:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__umulhisi3>
     5e0:	ac 01       	movw	r20, r24
     5e2:	56 95       	lsr	r21
     5e4:	47 95       	ror	r20
     5e6:	56 95       	lsr	r21
     5e8:	47 95       	ror	r20
     5ea:	56 95       	lsr	r21
     5ec:	47 95       	ror	r20
     5ee:	9a 01       	movw	r18, r20
     5f0:	22 0f       	add	r18, r18
     5f2:	33 1f       	adc	r19, r19
     5f4:	ca 01       	movw	r24, r20
     5f6:	88 0f       	add	r24, r24
     5f8:	99 1f       	adc	r25, r25
     5fa:	88 0f       	add	r24, r24
     5fc:	99 1f       	adc	r25, r25
     5fe:	88 0f       	add	r24, r24
     600:	99 1f       	adc	r25, r25
     602:	82 0f       	add	r24, r18
     604:	93 1f       	adc	r25, r19
     606:	fe 01       	movw	r30, r28
     608:	e8 1b       	sub	r30, r24
     60a:	f9 0b       	sbc	r31, r25
     60c:	ef 5f       	subi	r30, 0xFF	; 255
     60e:	fe 4f       	sbci	r31, 0xFE	; 254
     610:	80 81       	ld	r24, Z
     612:	80 93 7f 01 	sts	0x017F, r24
    segment_data[1] = dec_to_7seg[(counter_fm/10)%10]; //The tens
     616:	9a 01       	movw	r18, r20
     618:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__umulhisi3>
     61c:	96 95       	lsr	r25
     61e:	87 95       	ror	r24
     620:	96 95       	lsr	r25
     622:	87 95       	ror	r24
     624:	96 95       	lsr	r25
     626:	87 95       	ror	r24
     628:	9c 01       	movw	r18, r24
     62a:	22 0f       	add	r18, r18
     62c:	33 1f       	adc	r19, r19
     62e:	88 0f       	add	r24, r24
     630:	99 1f       	adc	r25, r25
     632:	88 0f       	add	r24, r24
     634:	99 1f       	adc	r25, r25
     636:	88 0f       	add	r24, r24
     638:	99 1f       	adc	r25, r25
     63a:	82 0f       	add	r24, r18
     63c:	93 1f       	adc	r25, r19
     63e:	48 1b       	sub	r20, r24
     640:	59 0b       	sbc	r21, r25
     642:	fa 01       	movw	r30, r20
     644:	ef 5f       	subi	r30, 0xFF	; 255
     646:	fe 4f       	sbci	r31, 0xFE	; 254
     648:	80 81       	ld	r24, Z
     64a:	80 93 80 01 	sts	0x0180, r24
    segment_data[2] = dec_to_7seg[(counter_fm/100)%10]; //The hundreds
     64e:	9e 01       	movw	r18, r28
     650:	36 95       	lsr	r19
     652:	27 95       	ror	r18
     654:	36 95       	lsr	r19
     656:	27 95       	ror	r18
     658:	ab e7       	ldi	r26, 0x7B	; 123
     65a:	b4 e1       	ldi	r27, 0x14	; 20
     65c:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__umulhisi3>
     660:	ac 01       	movw	r20, r24
     662:	56 95       	lsr	r21
     664:	47 95       	ror	r20
     666:	9a 01       	movw	r18, r20
     668:	ad ec       	ldi	r26, 0xCD	; 205
     66a:	bc ec       	ldi	r27, 0xCC	; 204
     66c:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__umulhisi3>
     670:	96 95       	lsr	r25
     672:	87 95       	ror	r24
     674:	96 95       	lsr	r25
     676:	87 95       	ror	r24
     678:	96 95       	lsr	r25
     67a:	87 95       	ror	r24
     67c:	9c 01       	movw	r18, r24
     67e:	22 0f       	add	r18, r18
     680:	33 1f       	adc	r19, r19
     682:	88 0f       	add	r24, r24
     684:	99 1f       	adc	r25, r25
     686:	88 0f       	add	r24, r24
     688:	99 1f       	adc	r25, r25
     68a:	88 0f       	add	r24, r24
     68c:	99 1f       	adc	r25, r25
     68e:	82 0f       	add	r24, r18
     690:	93 1f       	adc	r25, r19
     692:	48 1b       	sub	r20, r24
     694:	59 0b       	sbc	r21, r25
     696:	fa 01       	movw	r30, r20
     698:	ef 5f       	subi	r30, 0xFF	; 255
     69a:	fe 4f       	sbci	r31, 0xFE	; 254
     69c:	80 81       	ld	r24, Z
     69e:	80 93 81 01 	sts	0x0181, r24
    segment_data[3] = dec_to_7seg[(counter_fm/1000)%10]; //The Thousands
     6a2:	9e 01       	movw	r18, r28
     6a4:	36 95       	lsr	r19
     6a6:	27 95       	ror	r18
     6a8:	36 95       	lsr	r19
     6aa:	27 95       	ror	r18
     6ac:	36 95       	lsr	r19
     6ae:	27 95       	ror	r18
     6b0:	a5 ec       	ldi	r26, 0xC5	; 197
     6b2:	b0 e2       	ldi	r27, 0x20	; 32
     6b4:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__umulhisi3>
     6b8:	ac 01       	movw	r20, r24
     6ba:	52 95       	swap	r21
     6bc:	42 95       	swap	r20
     6be:	4f 70       	andi	r20, 0x0F	; 15
     6c0:	45 27       	eor	r20, r21
     6c2:	5f 70       	andi	r21, 0x0F	; 15
     6c4:	45 27       	eor	r20, r21
     6c6:	9a 01       	movw	r18, r20
     6c8:	ad ec       	ldi	r26, 0xCD	; 205
     6ca:	bc ec       	ldi	r27, 0xCC	; 204
     6cc:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__umulhisi3>
     6d0:	96 95       	lsr	r25
     6d2:	87 95       	ror	r24
     6d4:	96 95       	lsr	r25
     6d6:	87 95       	ror	r24
     6d8:	96 95       	lsr	r25
     6da:	87 95       	ror	r24
     6dc:	9c 01       	movw	r18, r24
     6de:	22 0f       	add	r18, r18
     6e0:	33 1f       	adc	r19, r19
     6e2:	88 0f       	add	r24, r24
     6e4:	99 1f       	adc	r25, r25
     6e6:	88 0f       	add	r24, r24
     6e8:	99 1f       	adc	r25, r25
     6ea:	88 0f       	add	r24, r24
     6ec:	99 1f       	adc	r25, r25
     6ee:	82 0f       	add	r24, r18
     6f0:	93 1f       	adc	r25, r19
     6f2:	48 1b       	sub	r20, r24
     6f4:	59 0b       	sbc	r21, r25
     6f6:	fa 01       	movw	r30, r20
     6f8:	ef 5f       	subi	r30, 0xFF	; 255
     6fa:	fe 4f       	sbci	r31, 0xFE	; 254
     6fc:	80 81       	ld	r24, Z

    //Leading zero suppression
    // If the counter is less than 10 (resp. 100, 1000), the digits 1, 3 and 4 should not display anything
    // (resp. digits 3 and 4, digit 4)
    if(counter_fm<1000)
     6fe:	c8 3e       	cpi	r28, 0xE8	; 232
     700:	d3 40       	sbci	r29, 0x03	; 3
     702:	08 f4       	brcc	.+2      	; 0x706 <SeperateDigits_fm+0x13a>
        segment_data[3] = 0xFF; //Turn off digit 4
     704:	8f ef       	ldi	r24, 0xFF	; 255
     706:	80 93 82 01 	sts	0x0182, r24
void SelectDigit(int DigitNumber)
{
  	switch (DigitNumber)
        {
                case 0: //Choose digit number 1 (from the right)
                        PORTB = (0<<PORTB4) | (0<<PORTB5) | (0<<PORTB6);
     70a:	18 ba       	out	0x18, r1	; 24
    // (resp. digits 3 and 4, digit 4)
    if(counter_fm<1000)
        segment_data[3] = 0xFF; //Turn off digit 4

    SelectDigit(0); //Select digit 0
    PORTA = segment_data[0]; //Display the "ones" value
     70c:	80 91 7f 01 	lds	r24, 0x017F
     710:	8b bb       	out	0x1b, r24	; 27
     712:	8f ec       	ldi	r24, 0xCF	; 207
     714:	97 e0       	ldi	r25, 0x07	; 7
     716:	01 97       	sbiw	r24, 0x01	; 1
     718:	f1 f7       	brne	.-4      	; 0x716 <SeperateDigits_fm+0x14a>
     71a:	00 c0       	rjmp	.+0      	; 0x71c <SeperateDigits_fm+0x150>
     71c:	00 00       	nop
        {
                case 0: //Choose digit number 1 (from the right)
                        PORTB = (0<<PORTB4) | (0<<PORTB5) | (0<<PORTB6);
                        break;
                case 1:  //Choose digit number 2 
                        PORTB = (1<<PORTB4) | (0<<PORTB5) | (0<<PORTB6);
     71e:	80 e1       	ldi	r24, 0x10	; 16
     720:	88 bb       	out	0x18, r24	; 24
    SelectDigit(0); //Select digit 0
    PORTA = segment_data[0]; //Display the "ones" value
    _delay_us(500);

    SelectDigit(1); //Select Digit 1
    PORTA = segment_data[1]; //Dispay "tens" value
     722:	80 91 80 01 	lds	r24, 0x0180
     726:	8b bb       	out	0x1b, r24	; 27
    asm("nop");
     728:	00 00       	nop
    asm("nop");
     72a:	00 00       	nop
    PORTA &= 0b01111111;
     72c:	df 98       	cbi	0x1b, 7	; 27
     72e:	8f ec       	ldi	r24, 0xCF	; 207
     730:	97 e0       	ldi	r25, 0x07	; 7
     732:	01 97       	sbiw	r24, 0x01	; 1
     734:	f1 f7       	brne	.-4      	; 0x732 <SeperateDigits_fm+0x166>
     736:	00 c0       	rjmp	.+0      	; 0x738 <SeperateDigits_fm+0x16c>
     738:	00 00       	nop
                        break;
                case 2: //Choose the colon 
                    	PORTB = (0<<PORTB4) | (1<<PORTB5) | (0<<PORTB7);
                    break; 
                case 3:  //Choose digit number 3
                        PORTB = (1<<PORTB4) | (1<<PORTB5) | (0<<PORTB6);
     73a:	80 e3       	ldi	r24, 0x30	; 48
     73c:	88 bb       	out	0x18, r24	; 24
    asm("nop");
    PORTA &= 0b01111111;
    _delay_us(500);

    SelectDigit(3); //Select Digit 3 
    PORTA = segment_data[2]; //Display hundreds valus
     73e:	80 91 81 01 	lds	r24, 0x0181
     742:	8b bb       	out	0x1b, r24	; 27
     744:	8f ec       	ldi	r24, 0xCF	; 207
     746:	97 e0       	ldi	r25, 0x07	; 7
     748:	01 97       	sbiw	r24, 0x01	; 1
     74a:	f1 f7       	brne	.-4      	; 0x748 <SeperateDigits_fm+0x17c>
     74c:	00 c0       	rjmp	.+0      	; 0x74e <SeperateDigits_fm+0x182>
     74e:	00 00       	nop
                    break; 
                case 3:  //Choose digit number 3
                        PORTB = (1<<PORTB4) | (1<<PORTB5) | (0<<PORTB6);
                        break;
                case 4: //Choose digit number 4
            		PORTB = (0<<PORTB4) | (0<<PORTB5) | (1<<PORTB6);
     750:	80 e4       	ldi	r24, 0x40	; 64
     752:	88 bb       	out	0x18, r24	; 24
    SelectDigit(3); //Select Digit 3 
    PORTA = segment_data[2]; //Display hundreds valus
    _delay_us(500);

    SelectDigit(4); //Select Digit 4
    PORTA = segment_data[3]; //Display thousands value
     754:	80 91 82 01 	lds	r24, 0x0182
     758:	8b bb       	out	0x1b, r24	; 27
     75a:	8f ec       	ldi	r24, 0xCF	; 207
     75c:	97 e0       	ldi	r25, 0x07	; 7
     75e:	01 97       	sbiw	r24, 0x01	; 1
     760:	f1 f7       	brne	.-4      	; 0x75e <SeperateDigits_fm+0x192>
     762:	00 c0       	rjmp	.+0      	; 0x764 <SeperateDigits_fm+0x198>
     764:	00 00       	nop
    _delay_us(500);
}
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	08 95       	ret

0000076c <TIM2_PWM_init>:
//***********************************************************************
//Init PWM for brightness control
void TIM2_PWM_init(void)
{
    /* Timer clock = I/O clock */    
    TCCR2 = 0x69; 
     76c:	89 e6       	ldi	r24, 0x69	; 105
     76e:	85 bd       	out	0x25, r24	; 37
    /* Set the compare value to control duty cycle */    
    OCR2  = 0x80;    
     770:	80 e8       	ldi	r24, 0x80	; 128
     772:	83 bd       	out	0x23, r24	; 35
    /* Set OC2A pin as output */
    DDRB |= 0b10000000;
     774:	bf 9a       	sbi	0x17, 7	; 23
     776:	08 95       	ret

00000778 <TIM3_PWM_init>:
//                     void TIM3_PWM_init()
//***********************************************************************
//Initialize PWM for volume control
void TIM3_PWM_init()
{
	DDRE |= (1<<PE3); //PORTE pin 3 as output
     778:	13 9a       	sbi	0x02, 3	; 2
	OCR3A = 0x00; //50% duty cycle
     77a:	10 92 87 00 	sts	0x0087, r1
     77e:	10 92 86 00 	sts	0x0086, r1
	TCCR3A = (1<<COM3A1) | (1<<COM3A0) | (1<<WGM31) | (1<<WGM30); //Fast PWM 10bit 
     782:	83 ec       	ldi	r24, 0xC3	; 195
     784:	80 93 8b 00 	sts	0x008B, r24
	TCCR3B = (1<<WGM32) | (1<<CS30); //Set OC3A on compare match
     788:	89 e0       	ldi	r24, 0x09	; 9
     78a:	80 93 8a 00 	sts	0x008A, r24
     78e:	08 95       	ret

00000790 <TIM3_set_PWM>:
//                     void TIM3_set_PWM()
//***********************************************************************
//Change the PWM duty cycle for volume control
void TIM3_set_PWM()
{
	uint16_t conversion = (duty_cycle*10.23); // duty*1023/100 = duty*10.23 
     790:	60 91 2c 01 	lds	r22, 0x012C
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__floatsisf>
     79e:	24 e1       	ldi	r18, 0x14	; 20
     7a0:	3e ea       	ldi	r19, 0xAE	; 174
     7a2:	43 e2       	ldi	r20, 0x23	; 35
     7a4:	51 e4       	ldi	r21, 0x41	; 65
     7a6:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <__mulsf3>
     7aa:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__fixunssfsi>
	OCR3A = 1023 - conversion; //set the duty cycle value
     7ae:	2f ef       	ldi	r18, 0xFF	; 255
     7b0:	33 e0       	ldi	r19, 0x03	; 3
     7b2:	c9 01       	movw	r24, r18
     7b4:	86 1b       	sub	r24, r22
     7b6:	97 0b       	sbc	r25, r23
     7b8:	90 93 87 00 	sts	0x0087, r25
     7bc:	80 93 86 00 	sts	0x0086, r24
     7c0:	08 95       	ret

000007c2 <ADC_init>:
//***********************************************************************
//Initialize ADC for reading the brightness level from photocell
void ADC_init()
{
  //Initalize ADC and its ports
  	DDRF  &= ~(_BV(DDF7)); //make port F bit 7 is ADC input  
     7c2:	e1 e6       	ldi	r30, 0x61	; 97
     7c4:	f0 e0       	ldi	r31, 0x00	; 0
     7c6:	80 81       	ld	r24, Z
     7c8:	8f 77       	andi	r24, 0x7F	; 127
     7ca:	80 83       	st	Z, r24
  	PORTF &= ~(_BV(PF7));  //port F bit 7 pullups must be off
     7cc:	e2 e6       	ldi	r30, 0x62	; 98
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
     7d0:	80 81       	ld	r24, Z
     7d2:	8f 77       	andi	r24, 0x7F	; 127
     7d4:	80 83       	st	Z, r24
  	ADMUX = 0x47; //writes 00111 to ADMUX (4:0) for single-ended, input PORTF bit 7, right adjusted, 10 bits
     7d6:	87 e4       	ldi	r24, 0x47	; 71
     7d8:	87 b9       	out	0x07, r24	; 7
  	ADCSRA |= (1<<ADEN) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
     7da:	86 b1       	in	r24, 0x06	; 6
     7dc:	8f 68       	ori	r24, 0x8F	; 143
     7de:	86 b9       	out	0x06, r24	; 6
     7e0:	08 95       	ret

000007e2 <__vector_21>:

//***********************************************************************
//                     		ADC ISR
//***********************************************************************
ISR(ADC_vect)
{
     7e2:	1f 92       	push	r1
     7e4:	0f 92       	push	r0
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	0f 92       	push	r0
     7ea:	11 24       	eor	r1, r1
     7ec:	2f 93       	push	r18
     7ee:	3f 93       	push	r19
     7f0:	5f 93       	push	r21
     7f2:	6f 93       	push	r22
     7f4:	7f 93       	push	r23
     7f6:	8f 93       	push	r24
     7f8:	9f 93       	push	r25
     7fa:	af 93       	push	r26
     7fc:	bf 93       	push	r27
  	int brightness_lvl = -1;
  	adc_result = ADC; //read the ADC output as 16 bits
     7fe:	84 b1       	in	r24, 0x04	; 4
     800:	95 b1       	in	r25, 0x05	; 5
     802:	90 93 55 01 	sts	0x0155, r25
     806:	80 93 54 01 	sts	0x0154, r24
  	brightness_lvl = (5*adc_result)/1023; 
     80a:	9c 01       	movw	r18, r24
     80c:	22 0f       	add	r18, r18
     80e:	33 1f       	adc	r19, r19
     810:	22 0f       	add	r18, r18
     812:	33 1f       	adc	r19, r19
     814:	82 0f       	add	r24, r18
     816:	93 1f       	adc	r25, r19
     818:	6f ef       	ldi	r22, 0xFF	; 255
     81a:	73 e0       	ldi	r23, 0x03	; 3
     81c:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__udivmodhi4>

  	switch(brightness_lvl)
     820:	62 30       	cpi	r22, 0x02	; 2
     822:	71 05       	cpc	r23, r1
     824:	51 f1       	breq	.+84     	; 0x87a <__vector_21+0x98>
     826:	bc f4       	brge	.+46     	; 0x856 <__vector_21+0x74>
     828:	61 15       	cp	r22, r1
     82a:	71 05       	cpc	r23, r1
     82c:	19 f1       	breq	.+70     	; 0x874 <__vector_21+0x92>
     82e:	61 30       	cpi	r22, 0x01	; 1
     830:	71 05       	cpc	r23, r1
     832:	d1 f4       	brne	.+52     	; 0x868 <__vector_21+0x86>
	{
		case(1): //Resistance very high, dark environment  
			OCR2 = 0xCC; //80% duty cycle, LED display is active low
     834:	8c ec       	ldi	r24, 0xCC	; 204
     836:	83 bd       	out	0x23, r24	; 35
		default: 
			OCR2 = 0x80; //Default duty cycle is 50% 
			break;
	}//switch case

  	ADCSRA |= (1<<ADSC); //Start next ADC conversion
     838:	36 9a       	sbi	0x06, 6	; 6
}
     83a:	bf 91       	pop	r27
     83c:	af 91       	pop	r26
     83e:	9f 91       	pop	r25
     840:	8f 91       	pop	r24
     842:	7f 91       	pop	r23
     844:	6f 91       	pop	r22
     846:	5f 91       	pop	r21
     848:	3f 91       	pop	r19
     84a:	2f 91       	pop	r18
     84c:	0f 90       	pop	r0
     84e:	0f be       	out	0x3f, r0	; 63
     850:	0f 90       	pop	r0
     852:	1f 90       	pop	r1
     854:	18 95       	reti
{
  	int brightness_lvl = -1;
  	adc_result = ADC; //read the ADC output as 16 bits
  	brightness_lvl = (5*adc_result)/1023; 

  	switch(brightness_lvl)
     856:	63 30       	cpi	r22, 0x03	; 3
     858:	71 05       	cpc	r23, r1
     85a:	49 f0       	breq	.+18     	; 0x86e <__vector_21+0x8c>
     85c:	64 30       	cpi	r22, 0x04	; 4
     85e:	71 05       	cpc	r23, r1
     860:	19 f4       	brne	.+6      	; 0x868 <__vector_21+0x86>
			break; 
		case(3):
			OCR2 = 0x66; //40% duty cycle
			break;
		case(4):
			OCR2 = 0x33; //20% duty cycle 
     862:	83 e3       	ldi	r24, 0x33	; 51
     864:	83 bd       	out	0x23, r24	; 35
			break; 
     866:	e8 cf       	rjmp	.-48     	; 0x838 <__vector_21+0x56>
		case(0):
			OCR2 = 0x1A; //10% duty cycle
			break;
		default: 
			OCR2 = 0x80; //Default duty cycle is 50% 
     868:	80 e8       	ldi	r24, 0x80	; 128
     86a:	83 bd       	out	0x23, r24	; 35
			break;
     86c:	e5 cf       	rjmp	.-54     	; 0x838 <__vector_21+0x56>
			break;
		case(2): 
			OCR2 = 0x9A; //60% duty cycle
			break; 
		case(3):
			OCR2 = 0x66; //40% duty cycle
     86e:	86 e6       	ldi	r24, 0x66	; 102
     870:	83 bd       	out	0x23, r24	; 35
			break;
     872:	e2 cf       	rjmp	.-60     	; 0x838 <__vector_21+0x56>
		case(4):
			OCR2 = 0x33; //20% duty cycle 
			break; 
		case(0):
			OCR2 = 0x1A; //10% duty cycle
     874:	8a e1       	ldi	r24, 0x1A	; 26
     876:	83 bd       	out	0x23, r24	; 35
			break;
     878:	df cf       	rjmp	.-66     	; 0x838 <__vector_21+0x56>
	{
		case(1): //Resistance very high, dark environment  
			OCR2 = 0xCC; //80% duty cycle, LED display is active low
			break;
		case(2): 
			OCR2 = 0x9A; //60% duty cycle
     87a:	8a e9       	ldi	r24, 0x9A	; 154
     87c:	83 bd       	out	0x23, r24	; 35
			break; 
     87e:	dc cf       	rjmp	.-72     	; 0x838 <__vector_21+0x56>

00000880 <chk_buttons>:
//Checks the state of the button number passed to it. 
//It calls the debounce switch function for each pin of port A
int chk_buttons(uint8_t PinNumber)
{
  	static uint16_t state[8] ={0}; //holds present state
  	state[PinNumber] = (state[PinNumber] << 1) | (! bit_is_clear(PINA, PinNumber)) | 0xE000;
     880:	e8 2f       	mov	r30, r24
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	29 b3       	in	r18, 0x19	; 25
     886:	ee 0f       	add	r30, r30
     888:	ff 1f       	adc	r31, r31
     88a:	ee 5b       	subi	r30, 0xBE	; 190
     88c:	fe 4f       	sbci	r31, 0xFE	; 254
     88e:	40 81       	ld	r20, Z
     890:	51 81       	ldd	r21, Z+1	; 0x01
     892:	44 0f       	add	r20, r20
     894:	55 1f       	adc	r21, r21
     896:	50 6e       	ori	r21, 0xE0	; 224
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	b9 01       	movw	r22, r18
     89c:	02 c0       	rjmp	.+4      	; 0x8a2 <chk_buttons+0x22>
     89e:	75 95       	asr	r23
     8a0:	67 95       	ror	r22
     8a2:	8a 95       	dec	r24
     8a4:	e2 f7       	brpl	.-8      	; 0x89e <chk_buttons+0x1e>
     8a6:	cb 01       	movw	r24, r22
     8a8:	81 70       	andi	r24, 0x01	; 1
     8aa:	99 27       	eor	r25, r25
     8ac:	84 2b       	or	r24, r20
     8ae:	95 2b       	or	r25, r21
     8b0:	91 83       	std	Z+1, r25	; 0x01
     8b2:	80 83       	st	Z, r24
  	if (state[PinNumber] == 0xF000) return 1;
     8b4:	81 15       	cp	r24, r1
     8b6:	90 4f       	sbci	r25, 0xF0	; 240
     8b8:	49 f0       	breq	.+18     	; 0x8cc <chk_buttons+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8ba:	8f e9       	ldi	r24, 0x9F	; 159
     8bc:	9f e0       	ldi	r25, 0x0F	; 15
     8be:	01 97       	sbiw	r24, 0x01	; 1
     8c0:	f1 f7       	brne	.-4      	; 0x8be <chk_buttons+0x3e>
     8c2:	00 c0       	rjmp	.+0      	; 0x8c4 <chk_buttons+0x44>
     8c4:	00 00       	nop
  	_delay_ms(1);
  	return 0;
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	08 95       	ret
//It calls the debounce switch function for each pin of port A
int chk_buttons(uint8_t PinNumber)
{
  	static uint16_t state[8] ={0}; //holds present state
  	state[PinNumber] = (state[PinNumber] << 1) | (! bit_is_clear(PINA, PinNumber)) | 0xE000;
  	if (state[PinNumber] == 0xF000) return 1;
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	90 e0       	ldi	r25, 0x00	; 0
  	_delay_ms(1);
  	return 0;
}
     8d0:	08 95       	ret

000008d2 <Encoder1_handling>:
//***********************************************************************
//This function takes in input the data received by the encoder via SPI
//Data is being processed to increment the counter properly 
uint8_t Encoder1_handling(int data_encoder, uint8_t counter)
{
        uint8_t A_value = data_encoder & 0x01; //isolate bit0 of the data sent by the encoder
     8d2:	48 2f       	mov	r20, r24
     8d4:	41 70       	andi	r20, 0x01	; 1
        uint8_t B_value = (data_encoder>>1) & 0x01; //isolate bit1 of the data sent by the encoder  
     8d6:	9c 01       	movw	r18, r24
     8d8:	35 95       	asr	r19
     8da:	27 95       	ror	r18
     8dc:	21 70       	andi	r18, 0x01	; 1

        if(((A_old == 1) && (A_value == 0)) && ((B_old == 1) && (B_value == 1))) 
     8de:	80 91 17 01 	lds	r24, 0x0117
     8e2:	81 30       	cpi	r24, 0x01	; 1
     8e4:	31 f0       	breq	.+12     	; 0x8f2 <Encoder1_handling+0x20>
                        else
                        {	counter = 0;} //reset the counter value 
                }
        }

        A_old = A_value; //Update the past A switch value
     8e6:	40 93 17 01 	sts	0x0117, r20
        B_old = B_value; //Update the past B switch value
     8ea:	20 93 16 01 	sts	0x0116, r18
	return counter;
}
     8ee:	86 2f       	mov	r24, r22
     8f0:	08 95       	ret
uint8_t Encoder1_handling(int data_encoder, uint8_t counter)
{
        uint8_t A_value = data_encoder & 0x01; //isolate bit0 of the data sent by the encoder
        uint8_t B_value = (data_encoder>>1) & 0x01; //isolate bit1 of the data sent by the encoder  

        if(((A_old == 1) && (A_value == 0)) && ((B_old == 1) && (B_value == 1))) 
     8f2:	80 91 16 01 	lds	r24, 0x0116
     8f6:	44 23       	and	r20, r20
     8f8:	59 f0       	breq	.+22     	; 0x910 <Encoder1_handling+0x3e>
                	{       counter = 59; //reset the counter value 
                	}

        	}
        }
        else if ((A_old == 1) && (A_value == 1)&& ((B_old == 1) && (B_value == 0))) 
     8fa:	81 30       	cpi	r24, 0x01	; 1
     8fc:	a1 f7       	brne	.-24     	; 0x8e6 <Encoder1_handling+0x14>
     8fe:	21 11       	cpse	r18, r1
     900:	f2 cf       	rjmp	.-28     	; 0x8e6 <Encoder1_handling+0x14>
        {//if the encoder switches were toggled counter clockwise

                direction = CCW; //set the direction
     902:	82 e0       	ldi	r24, 0x02	; 2
     904:	80 93 40 01 	sts	0x0140, r24
                if ((direction == 2) & ((A_old != A_value) | (B_old != B_value)))
                {	//make sure to increment by 1 from resting state to resting state, 
                	//if the 2 buttons were pushed, no incrementation
		        if(counter <= 59 && (counter + 1) <= 59) //Make sure to respect the boundaries
     908:	6b 33       	cpi	r22, 0x3B	; 59
     90a:	60 f4       	brcc	.+24     	; 0x924 <Encoder1_handling+0x52>
			{	counter++;} //incrementation of the counter
     90c:	6f 5f       	subi	r22, 0xFF	; 255
     90e:	eb cf       	rjmp	.-42     	; 0x8e6 <Encoder1_handling+0x14>
uint8_t Encoder1_handling(int data_encoder, uint8_t counter)
{
        uint8_t A_value = data_encoder & 0x01; //isolate bit0 of the data sent by the encoder
        uint8_t B_value = (data_encoder>>1) & 0x01; //isolate bit1 of the data sent by the encoder  

        if(((A_old == 1) && (A_value == 0)) && ((B_old == 1) && (B_value == 1))) 
     910:	81 30       	cpi	r24, 0x01	; 1
     912:	49 f7       	brne	.-46     	; 0x8e6 <Encoder1_handling+0x14>
     914:	21 30       	cpi	r18, 0x01	; 1
     916:	39 f7       	brne	.-50     	; 0x8e6 <Encoder1_handling+0x14>
        {//If the encoder switches were toggled clockwise

                direction = CW;  // set the direction 
     918:	20 93 40 01 	sts	0x0140, r18
                if((direction == 1) &((A_old != A_value) | (B_old !=  B_value)))
        	{	//make sure to decrement by 1 from resting state to resting state, 
                	//if the 2 buttons were pushed, no decrementation

                	if(counter >= 0  && (counter - 1)>=0) // Make sure to respect the boundaries 
     91c:	66 23       	and	r22, r22
     91e:	21 f0       	breq	.+8      	; 0x928 <Encoder1_handling+0x56>
                	{	counter--;
     920:	61 50       	subi	r22, 0x01	; 1
     922:	e1 cf       	rjmp	.-62     	; 0x8e6 <Encoder1_handling+0x14>
                {	//make sure to increment by 1 from resting state to resting state, 
                	//if the 2 buttons were pushed, no incrementation
		        if(counter <= 59 && (counter + 1) <= 59) //Make sure to respect the boundaries
			{	counter++;} //incrementation of the counter
                        else
                        {	counter = 0;} //reset the counter value 
     924:	60 e0       	ldi	r22, 0x00	; 0
     926:	df cf       	rjmp	.-66     	; 0x8e6 <Encoder1_handling+0x14>

                	if(counter >= 0  && (counter - 1)>=0) // Make sure to respect the boundaries 
                	{	counter--;
			}
                	else
                	{       counter = 59; //reset the counter value 
     928:	6b e3       	ldi	r22, 0x3B	; 59
     92a:	dd cf       	rjmp	.-70     	; 0x8e6 <Encoder1_handling+0x14>

0000092c <Encoder1_handling_vol>:
//***********************************************************************
//This function takes in input the data received by the encoder via SPI
//Data is being processed to increment the counter properly 
uint8_t Encoder1_handling_vol(int data_encoder, uint8_t counter)
{
        uint8_t A_value = data_encoder & 0x01; //isolate bit0 of the data sent by the encoder
     92c:	48 2f       	mov	r20, r24
     92e:	41 70       	andi	r20, 0x01	; 1
        uint8_t B_value = (data_encoder>>1) & 0x01; //isolate bit1 of the data sent by the encoder  
     930:	9c 01       	movw	r18, r24
     932:	35 95       	asr	r19
     934:	27 95       	ror	r18
     936:	21 70       	andi	r18, 0x01	; 1

        if(((A4_old == 1) && (A_value == 0)) && ((B4_old == 1) && (B_value == 1)))
     938:	80 91 10 01 	lds	r24, 0x0110
     93c:	81 30       	cpi	r24, 0x01	; 1
     93e:	31 f0       	breq	.+12     	; 0x94c <Encoder1_handling_vol+0x20>
                        else
                        {       counter = 20;} //reset the counter value 
                }
        }

        A4_old = A_value; //Update the past A switch value
     940:	40 93 10 01 	sts	0x0110, r20
        B4_old = B_value; //Update the past B switch value
     944:	20 93 11 01 	sts	0x0111, r18
        return counter;
}
     948:	86 2f       	mov	r24, r22
     94a:	08 95       	ret
uint8_t Encoder1_handling_vol(int data_encoder, uint8_t counter)
{
        uint8_t A_value = data_encoder & 0x01; //isolate bit0 of the data sent by the encoder
        uint8_t B_value = (data_encoder>>1) & 0x01; //isolate bit1 of the data sent by the encoder  

        if(((A4_old == 1) && (A_value == 0)) && ((B4_old == 1) && (B_value == 1)))
     94c:	80 91 11 01 	lds	r24, 0x0111
     950:	44 23       	and	r20, r20
     952:	79 f0       	breq	.+30     	; 0x972 <Encoder1_handling_vol+0x46>
                        {       counter = 100; //reset the counter value 
                        }
         
                }
        }
        else if ((A4_old == 1) && (A_value == 1)&& ((B4_old == 1) && (B_value == 0)))
     954:	81 30       	cpi	r24, 0x01	; 1
     956:	a1 f7       	brne	.-24     	; 0x940 <Encoder1_handling_vol+0x14>
     958:	21 11       	cpse	r18, r1
     95a:	f2 cf       	rjmp	.-28     	; 0x940 <Encoder1_handling_vol+0x14>
        {//if the encoder switches were toggled counter clockwise

                direction = CCW; //set the direction
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	80 93 40 01 	sts	0x0140, r24
                if ((direction == 2) & ((A_old != A_value) | (B_old != B_value)))
     962:	80 91 16 01 	lds	r24, 0x0116
     966:	88 23       	and	r24, r24
     968:	81 f0       	breq	.+32     	; 0x98a <Encoder1_handling_vol+0x5e>
                {       //make sure to increment by 1 from resting state to resting state, 
                        //if the 2 buttons were pushed, no incrementation
                        if(counter <= 100 && (counter + 1) <= 100) //Make sure to respect the boundaries
     96a:	64 36       	cpi	r22, 0x64	; 100
     96c:	98 f0       	brcs	.+38     	; 0x994 <Encoder1_handling_vol+0x68>
                        {       counter = counter + 5;} //incrementation of the counter
                        else
                        {       counter = 20;} //reset the counter value 
     96e:	64 e1       	ldi	r22, 0x14	; 20
     970:	e7 cf       	rjmp	.-50     	; 0x940 <Encoder1_handling_vol+0x14>
uint8_t Encoder1_handling_vol(int data_encoder, uint8_t counter)
{
        uint8_t A_value = data_encoder & 0x01; //isolate bit0 of the data sent by the encoder
        uint8_t B_value = (data_encoder>>1) & 0x01; //isolate bit1 of the data sent by the encoder  

        if(((A4_old == 1) && (A_value == 0)) && ((B4_old == 1) && (B_value == 1)))
     972:	81 30       	cpi	r24, 0x01	; 1
     974:	29 f7       	brne	.-54     	; 0x940 <Encoder1_handling_vol+0x14>
     976:	21 30       	cpi	r18, 0x01	; 1
     978:	19 f7       	brne	.-58     	; 0x940 <Encoder1_handling_vol+0x14>
        {//If the encoder switches were toggled clockwise

                direction = CW;  // set the direction 
     97a:	20 93 40 01 	sts	0x0140, r18
                if((direction == 1) &((A4_old != A_value) | (B4_old !=  B_value)))
                {       //make sure to decrement by 1 from resting state to resting state, 
                        //if the 2 buttons were pushed, no decrementation

                        if(counter >= 20  && (counter - 1)>=20) // Make sure to respect the boundaries 
     97e:	8b ee       	ldi	r24, 0xEB	; 235
     980:	86 0f       	add	r24, r22
     982:	8b 3e       	cpi	r24, 0xEB	; 235
     984:	48 f0       	brcs	.+18     	; 0x998 <Encoder1_handling_vol+0x6c>
                        {       counter = counter - 5;
                        }
                        else
                        {       counter = 100; //reset the counter value 
     986:	64 e6       	ldi	r22, 0x64	; 100
     988:	db cf       	rjmp	.-74     	; 0x940 <Encoder1_handling_vol+0x14>
        }
        else if ((A4_old == 1) && (A_value == 1)&& ((B4_old == 1) && (B_value == 0)))
        {//if the encoder switches were toggled counter clockwise

                direction = CCW; //set the direction
                if ((direction == 2) & ((A_old != A_value) | (B_old != B_value)))
     98a:	80 91 17 01 	lds	r24, 0x0117
     98e:	81 30       	cpi	r24, 0x01	; 1
     990:	61 f7       	brne	.-40     	; 0x96a <Encoder1_handling_vol+0x3e>
     992:	d6 cf       	rjmp	.-84     	; 0x940 <Encoder1_handling_vol+0x14>
                {       //make sure to increment by 1 from resting state to resting state, 
                        //if the 2 buttons were pushed, no incrementation
                        if(counter <= 100 && (counter + 1) <= 100) //Make sure to respect the boundaries
                        {       counter = counter + 5;} //incrementation of the counter
     994:	6b 5f       	subi	r22, 0xFB	; 251
     996:	d4 cf       	rjmp	.-88     	; 0x940 <Encoder1_handling_vol+0x14>
                if((direction == 1) &((A4_old != A_value) | (B4_old !=  B_value)))
                {       //make sure to decrement by 1 from resting state to resting state, 
                        //if the 2 buttons were pushed, no decrementation

                        if(counter >= 20  && (counter - 1)>=20) // Make sure to respect the boundaries 
                        {       counter = counter - 5;
     998:	65 50       	subi	r22, 0x05	; 5
     99a:	d2 cf       	rjmp	.-92     	; 0x940 <Encoder1_handling_vol+0x14>

0000099c <Encoder1_handling_fm>:
//***********************************************************************
//This function takes in input the data received by the encoder via SPI
//Data is being processed to increment the counter properly 
uint8_t Encoder1_handling_fm(int data_encoder, uint8_t counter, uint8_t bound)
{       
	uint8_t A_value = (data_encoder>>2) & 0x01; //isolate bit0 of the data sent by the encoder
     99c:	9c 01       	movw	r18, r24
     99e:	35 95       	asr	r19
     9a0:	27 95       	ror	r18
     9a2:	35 95       	asr	r19
     9a4:	27 95       	ror	r18
     9a6:	52 2f       	mov	r21, r18
     9a8:	51 70       	andi	r21, 0x01	; 1
        uint8_t B_value = (data_encoder>>3) & 0x01; //isolate bit1 of the data sent by the encoder  
     9aa:	9c 01       	movw	r18, r24
     9ac:	35 95       	asr	r19
     9ae:	27 95       	ror	r18
     9b0:	35 95       	asr	r19
     9b2:	27 95       	ror	r18
     9b4:	35 95       	asr	r19
     9b6:	27 95       	ror	r18
     9b8:	21 70       	andi	r18, 0x01	; 1

        if(((A3_old == 1) && (A_value == 0)) && ((B3_old == 1) && (B_value == 1)))
     9ba:	80 91 13 01 	lds	r24, 0x0113
     9be:	81 30       	cpi	r24, 0x01	; 1
     9c0:	31 f0       	breq	.+12     	; 0x9ce <Encoder1_handling_fm+0x32>
                        else
                        {       counter = 0;} //reset the counter value 
                }
        }

        A3_old = A_value; //Update the past A switch value
     9c2:	50 93 13 01 	sts	0x0113, r21
        B3_old = B_value; //Update the past B switch value
     9c6:	20 93 12 01 	sts	0x0112, r18
        return counter;

}
     9ca:	86 2f       	mov	r24, r22
     9cc:	08 95       	ret
uint8_t Encoder1_handling_fm(int data_encoder, uint8_t counter, uint8_t bound)
{       
	uint8_t A_value = (data_encoder>>2) & 0x01; //isolate bit0 of the data sent by the encoder
        uint8_t B_value = (data_encoder>>3) & 0x01; //isolate bit1 of the data sent by the encoder  

        if(((A3_old == 1) && (A_value == 0)) && ((B3_old == 1) && (B_value == 1)))
     9ce:	80 91 12 01 	lds	r24, 0x0112
     9d2:	55 23       	and	r21, r21
     9d4:	b9 f0       	breq	.+46     	; 0xa04 <Encoder1_handling_fm+0x68>
                        {       counter = bound; //reset the counter value 
                        }

                }
        }
        else if ((A3_old == 1) && (A_value == 1)&& ((B3_old == 1) && (B_value == 0)))
     9d6:	81 30       	cpi	r24, 0x01	; 1
     9d8:	a1 f7       	brne	.-24     	; 0x9c2 <Encoder1_handling_fm+0x26>
     9da:	21 11       	cpse	r18, r1
     9dc:	f2 cf       	rjmp	.-28     	; 0x9c2 <Encoder1_handling_fm+0x26>
        {//if the encoder switches were toggled counter clockwise
                direction = CCW; //set the direction
     9de:	82 e0       	ldi	r24, 0x02	; 2
     9e0:	80 93 40 01 	sts	0x0140, r24
                if ((direction == 2) & ((A2_old != A_value) | (B2_old != B_value)))
     9e4:	80 91 14 01 	lds	r24, 0x0114
     9e8:	88 23       	and	r24, r24
     9ea:	b1 f0       	breq	.+44     	; 0xa18 <Encoder1_handling_fm+0x7c>
                {       //make sure to increment by 1 from resting state to resting state, 
                        //if the 2 buttons were pushed, no incrementation 

                        if(counter < bound && (counter + 1) < bound) //Make sure to respect the boundaries
     9ec:	64 17       	cp	r22, r20
     9ee:	c8 f4       	brcc	.+50     	; 0xa22 <Encoder1_handling_fm+0x86>
     9f0:	e6 2f       	mov	r30, r22
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	31 96       	adiw	r30, 0x01	; 1
     9f6:	84 2f       	mov	r24, r20
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	e8 17       	cp	r30, r24
     9fc:	f9 07       	cpc	r31, r25
     9fe:	8c f4       	brge	.+34     	; 0xa22 <Encoder1_handling_fm+0x86>
                        {       counter++;} //incrementation of the counter
     a00:	6f 5f       	subi	r22, 0xFF	; 255
     a02:	df cf       	rjmp	.-66     	; 0x9c2 <Encoder1_handling_fm+0x26>
uint8_t Encoder1_handling_fm(int data_encoder, uint8_t counter, uint8_t bound)
{       
	uint8_t A_value = (data_encoder>>2) & 0x01; //isolate bit0 of the data sent by the encoder
        uint8_t B_value = (data_encoder>>3) & 0x01; //isolate bit1 of the data sent by the encoder  

        if(((A3_old == 1) && (A_value == 0)) && ((B3_old == 1) && (B_value == 1)))
     a04:	81 30       	cpi	r24, 0x01	; 1
     a06:	e9 f6       	brne	.-70     	; 0x9c2 <Encoder1_handling_fm+0x26>
     a08:	21 30       	cpi	r18, 0x01	; 1
     a0a:	d9 f6       	brne	.-74     	; 0x9c2 <Encoder1_handling_fm+0x26>
        {//If the encoder switches were toggled clockwise

                direction = CW;  // set the direction 
     a0c:	20 93 40 01 	sts	0x0140, r18
                if((direction == 1) &((A3_old != A_value) | (B3_old !=  B_value)))
                {
                        //make sure to decrement by 1 from resting state to resting state, 
                        //if the 2 buttons were pushed, no decrementation
                        if(counter >= 0  && (counter - 1)>=0) // Make sure to respect the boundaries 
     a10:	66 23       	and	r22, r22
     a12:	49 f0       	breq	.+18     	; 0xa26 <Encoder1_handling_fm+0x8a>
                        {       counter--;}
     a14:	61 50       	subi	r22, 0x01	; 1
     a16:	d5 cf       	rjmp	.-86     	; 0x9c2 <Encoder1_handling_fm+0x26>
                }
        }
        else if ((A3_old == 1) && (A_value == 1)&& ((B3_old == 1) && (B_value == 0)))
        {//if the encoder switches were toggled counter clockwise
                direction = CCW; //set the direction
                if ((direction == 2) & ((A2_old != A_value) | (B2_old != B_value)))
     a18:	80 91 15 01 	lds	r24, 0x0115
     a1c:	81 30       	cpi	r24, 0x01	; 1
     a1e:	31 f7       	brne	.-52     	; 0x9ec <Encoder1_handling_fm+0x50>
     a20:	d0 cf       	rjmp	.-96     	; 0x9c2 <Encoder1_handling_fm+0x26>
                        //if the 2 buttons were pushed, no incrementation 

                        if(counter < bound && (counter + 1) < bound) //Make sure to respect the boundaries
                        {       counter++;} //incrementation of the counter
                        else
                        {       counter = 0;} //reset the counter value 
     a22:	60 e0       	ldi	r22, 0x00	; 0
     a24:	ce cf       	rjmp	.-100    	; 0x9c2 <Encoder1_handling_fm+0x26>
     a26:	64 2f       	mov	r22, r20
     a28:	cc cf       	rjmp	.-104    	; 0x9c2 <Encoder1_handling_fm+0x26>

00000a2a <Encoder2_handling>:
//***********************************************************************
//This function takes in input the data received by the encoder2 via SPI
//Data is being processed to increment the counter properly 
uint8_t Encoder2_handling(int data_encoder, uint8_t counter, uint8_t bound)
{
        uint8_t A_value = (data_encoder>>2) & 0x01; //isolate bit0 of the data sent by the encoder
     a2a:	9c 01       	movw	r18, r24
     a2c:	35 95       	asr	r19
     a2e:	27 95       	ror	r18
     a30:	35 95       	asr	r19
     a32:	27 95       	ror	r18
     a34:	52 2f       	mov	r21, r18
     a36:	51 70       	andi	r21, 0x01	; 1
        uint8_t B_value = (data_encoder>>3) & 0x01; //isolate bit1 of the data sent by the encoder  
     a38:	9c 01       	movw	r18, r24
     a3a:	35 95       	asr	r19
     a3c:	27 95       	ror	r18
     a3e:	35 95       	asr	r19
     a40:	27 95       	ror	r18
     a42:	35 95       	asr	r19
     a44:	27 95       	ror	r18
     a46:	21 70       	andi	r18, 0x01	; 1

        if(((A2_old == 1) && (A_value == 0)) && ((B2_old == 1) && (B_value == 1))) 
     a48:	80 91 15 01 	lds	r24, 0x0115
     a4c:	81 30       	cpi	r24, 0x01	; 1
     a4e:	31 f0       	breq	.+12     	; 0xa5c <Encoder2_handling+0x32>
                        else
                        {       counter = 0;} //reset the counter value 
                }
        }

        A2_old = A_value; //Update the past A switch value
     a50:	50 93 15 01 	sts	0x0115, r21
        B2_old = B_value; //Update the past B switch value
     a54:	20 93 14 01 	sts	0x0114, r18
        return counter;
}
     a58:	86 2f       	mov	r24, r22
     a5a:	08 95       	ret
uint8_t Encoder2_handling(int data_encoder, uint8_t counter, uint8_t bound)
{
        uint8_t A_value = (data_encoder>>2) & 0x01; //isolate bit0 of the data sent by the encoder
        uint8_t B_value = (data_encoder>>3) & 0x01; //isolate bit1 of the data sent by the encoder  

        if(((A2_old == 1) && (A_value == 0)) && ((B2_old == 1) && (B_value == 1))) 
     a5c:	80 91 14 01 	lds	r24, 0x0114
     a60:	55 23       	and	r21, r21
     a62:	99 f0       	breq	.+38     	; 0xa8a <Encoder2_handling+0x60>
                        {       counter = bound; //reset the counter value 
                        }

        	}
        }
        else if ((A2_old == 1) && (A_value == 1)&& ((B2_old == 1) && (B_value == 0))) 
     a64:	81 30       	cpi	r24, 0x01	; 1
     a66:	a1 f7       	brne	.-24     	; 0xa50 <Encoder2_handling+0x26>
     a68:	21 11       	cpse	r18, r1
     a6a:	f2 cf       	rjmp	.-28     	; 0xa50 <Encoder2_handling+0x26>
        {//if the encoder switches were toggled counter clockwise
                direction = CCW; //set the direction
     a6c:	82 e0       	ldi	r24, 0x02	; 2
     a6e:	80 93 40 01 	sts	0x0140, r24
                if ((direction == 2) & ((A2_old != A_value) | (B2_old != B_value)))
                {       //make sure to increment by 1 from resting state to resting state, 
                	//if the 2 buttons were pushed, no incrementation 

		        if(counter < bound && (counter + 1) < bound) //Make sure to respect the boundaries
     a72:	64 17       	cp	r22, r20
     a74:	a0 f4       	brcc	.+40     	; 0xa9e <Encoder2_handling+0x74>
     a76:	e6 2f       	mov	r30, r22
     a78:	f0 e0       	ldi	r31, 0x00	; 0
     a7a:	31 96       	adiw	r30, 0x01	; 1
     a7c:	84 2f       	mov	r24, r20
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	e8 17       	cp	r30, r24
     a82:	f9 07       	cpc	r31, r25
     a84:	64 f4       	brge	.+24     	; 0xa9e <Encoder2_handling+0x74>
                        {       counter++;} //incrementation of the counter
     a86:	6f 5f       	subi	r22, 0xFF	; 255
     a88:	e3 cf       	rjmp	.-58     	; 0xa50 <Encoder2_handling+0x26>
uint8_t Encoder2_handling(int data_encoder, uint8_t counter, uint8_t bound)
{
        uint8_t A_value = (data_encoder>>2) & 0x01; //isolate bit0 of the data sent by the encoder
        uint8_t B_value = (data_encoder>>3) & 0x01; //isolate bit1 of the data sent by the encoder  

        if(((A2_old == 1) && (A_value == 0)) && ((B2_old == 1) && (B_value == 1))) 
     a8a:	81 30       	cpi	r24, 0x01	; 1
     a8c:	09 f7       	brne	.-62     	; 0xa50 <Encoder2_handling+0x26>
     a8e:	21 30       	cpi	r18, 0x01	; 1
     a90:	f9 f6       	brne	.-66     	; 0xa50 <Encoder2_handling+0x26>
        {//If the encoder switches were toggled clockwise

                direction = CW;  // set the direction 
     a92:	20 93 40 01 	sts	0x0140, r18
                if((direction == 1) &((A2_old != A_value) | (B2_old !=  B_value)))
                {
			//make sure to decrement by 1 from resting state to resting state, 
                	//if the 2 buttons were pushed, no decrementation
                        if(counter >= 0  && (counter - 1)>=0) // Make sure to respect the boundaries 
     a96:	66 23       	and	r22, r22
     a98:	21 f0       	breq	.+8      	; 0xaa2 <Encoder2_handling+0x78>
                        {       counter--;}
     a9a:	61 50       	subi	r22, 0x01	; 1
     a9c:	d9 cf       	rjmp	.-78     	; 0xa50 <Encoder2_handling+0x26>
                	//if the 2 buttons were pushed, no incrementation 

		        if(counter < bound && (counter + 1) < bound) //Make sure to respect the boundaries
                        {       counter++;} //incrementation of the counter
                        else
                        {       counter = 0;} //reset the counter value 
     a9e:	60 e0       	ldi	r22, 0x00	; 0
     aa0:	d7 cf       	rjmp	.-82     	; 0xa50 <Encoder2_handling+0x26>
     aa2:	64 2f       	mov	r22, r20
     aa4:	d5 cf       	rjmp	.-86     	; 0xa50 <Encoder2_handling+0x26>

00000aa6 <Set_Clock>:
//***********************************************************************
//                     void Set_Clock()
//***********************************************************************
// Handles the hour/min setting of the clock
void Set_Clock()
{
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	1f 92       	push	r1
     aac:	cd b7       	in	r28, 0x3d	; 61
     aae:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0x00; //Disable timer 0
     ab0:	13 be       	out	0x33, r1	; 51

	minute_clk = Encoder1_handling(spi_read(), minute_clk);//Read encoder 1
     ab2:	60 91 3e 01 	lds	r22, 0x013E
     ab6:	69 83       	std	Y+1, r22	; 0x01
     ab8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <spi_read>
     abc:	69 81       	ldd	r22, Y+1	; 0x01
     abe:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Encoder1_handling>
     ac2:	80 93 3e 01 	sts	0x013E, r24
	hour_clk = Encoder2_handling(spi_read(), hour_clk, 23); //Read encoder 2
     ac6:	60 91 3d 01 	lds	r22, 0x013D
     aca:	69 83       	std	Y+1, r22	; 0x01
     acc:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <spi_read>
     ad0:	47 e1       	ldi	r20, 0x17	; 23
     ad2:	69 81       	ldd	r22, Y+1	; 0x01
     ad4:	0e 94 15 05 	call	0xa2a	; 0xa2a <Encoder2_handling>
     ad8:	80 93 3d 01 	sts	0x013D, r24
}
     adc:	0f 90       	pop	r0
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	08 95       	ret

00000ae4 <Set_Alarm>:
//***********************************************************************
//                     void Set_Alarm()
//***********************************************************************
// Handles the hour/min setting for the alarm
void Set_Alarm()
{
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	1f 92       	push	r1
     aea:	cd b7       	in	r28, 0x3d	; 61
     aec:	de b7       	in	r29, 0x3e	; 62
	minute_alarm = Encoder1_handling(spi_read(), minute_alarm); //Read encoder 1
     aee:	60 91 0d 01 	lds	r22, 0x010D
     af2:	69 83       	std	Y+1, r22	; 0x01
     af4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <spi_read>
     af8:	69 81       	ldd	r22, Y+1	; 0x01
     afa:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Encoder1_handling>
     afe:	80 93 0d 01 	sts	0x010D, r24
	hour_alarm = Encoder2_handling(spi_read(), hour_alarm, 23);  //Read encoder 2
     b02:	60 91 3c 01 	lds	r22, 0x013C
     b06:	69 83       	std	Y+1, r22	; 0x01
     b08:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <spi_read>
     b0c:	47 e1       	ldi	r20, 0x17	; 23
     b0e:	69 81       	ldd	r22, Y+1	; 0x01
     b10:	0e 94 15 05 	call	0xa2a	; 0xa2a <Encoder2_handling>
     b14:	80 93 3c 01 	sts	0x013C, r24
	alarm_set = 1; //Set the alarm
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	80 93 34 01 	sts	0x0134, r24
}
     b1e:	0f 90       	pop	r0
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	08 95       	ret

00000b26 <Alarm>:
//***********************************************************************
//Checks if the alarm time is reached
//Triggers the alarm
void Alarm()
{
	if((hour_clk == hour_alarm) && (snooze == 0) && (alarm_set == 1)) //if hour is similar
     b26:	90 91 3d 01 	lds	r25, 0x013D
     b2a:	80 91 3c 01 	lds	r24, 0x013C
     b2e:	98 13       	cpse	r25, r24
     b30:	08 95       	ret
     b32:	80 91 32 01 	lds	r24, 0x0132
     b36:	81 11       	cpse	r24, r1
     b38:	fb cf       	rjmp	.-10     	; 0xb30 <Alarm+0xa>
     b3a:	80 91 34 01 	lds	r24, 0x0134
     b3e:	88 23       	and	r24, r24
     b40:	b9 f3       	breq	.-18     	; 0xb30 <Alarm+0xa>
	{	if(minute_clk == minute_alarm)//if minute is similar
     b42:	90 91 3e 01 	lds	r25, 0x013E
     b46:	80 91 0d 01 	lds	r24, 0x010D
     b4a:	98 13       	cpse	r25, r24
     b4c:	f1 cf       	rjmp	.-30     	; 0xb30 <Alarm+0xa>
		{	
			trigger_alarm = 1; 
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	80 93 33 01 	sts	0x0133, r24
     b54:	08 95       	ret

00000b56 <LocalTemperature>:
		}
	}
}

void LocalTemperature()
{
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
	uint16_t lm73_temp;
	twi_start_rd(LM73_ADDRESS,lm73_rd_buf,2);  //save high temperature byte into lm73_temp
     b5a:	42 e0       	ldi	r20, 0x02	; 2
     b5c:	66 eb       	ldi	r22, 0xB6	; 182
     b5e:	71 e0       	ldi	r23, 0x01	; 1
     b60:	80 e9       	ldi	r24, 0x90	; 144
     b62:	0e 94 4d 0b 	call	0x169a	; 0x169a <twi_start_rd>

  	lm73_temp = (lm73_rd_buf[0]<<8); //shift it into upper byte 
     b66:	e6 eb       	ldi	r30, 0xB6	; 182
     b68:	f1 e0       	ldi	r31, 0x01	; 1
     b6a:	80 81       	ld	r24, Z
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	98 2f       	mov	r25, r24
     b70:	88 27       	eor	r24, r24
  	lm73_temp |= lm73_rd_buf[1]; //"OR" in the low temp byte to lm73_temp 
     b72:	21 81       	ldd	r18, Z+1	; 0x01
     b74:	82 2b       	or	r24, r18
  	uint8_t temp_degree = 0;
	uint16_t temp = lm73_temp/128;
     b76:	88 0f       	add	r24, r24
     b78:	89 2f       	mov	r24, r25
     b7a:	88 1f       	adc	r24, r24
     b7c:	99 0b       	sbc	r25, r25
     b7e:	91 95       	neg	r25
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     b80:	4a e0       	ldi	r20, 0x0A	; 10
     b82:	67 e5       	ldi	r22, 0x57	; 87
     b84:	71 e0       	ldi	r23, 0x01	; 1
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <__itoa_ncheck>
	temp_degree = temp; 
	itoa(temp_degree, TempValue, 10);
 //convert to string in array with itoa() from avr-libc                           
//	cursor_home();
//	string2lcd(TempValue);
	cursor_on();
     b8c:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <cursor_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b90:	85 ec       	ldi	r24, 0xC5	; 197
     b92:	8a 95       	dec	r24
     b94:	f1 f7       	brne	.-4      	; 0xb92 <LocalTemperature+0x3c>
     b96:	00 00       	nop
	_delay_us(37);
	set_cursor(2,3);
     b98:	63 e0       	ldi	r22, 0x03	; 3
     b9a:	82 e0       	ldi	r24, 0x02	; 2
     b9c:	0e 94 01 08 	call	0x1002	; 0x1002 <set_cursor>
     ba0:	85 ec       	ldi	r24, 0xC5	; 197
     ba2:	8a 95       	dec	r24
     ba4:	f1 f7       	brne	.-4      	; 0xba2 <LocalTemperature+0x4c>
     ba6:	00 00       	nop
	_delay_us(37);
	char2lcd(TempValue[0]);
     ba8:	c7 e5       	ldi	r28, 0x57	; 87
     baa:	d1 e0       	ldi	r29, 0x01	; 1
     bac:	88 81       	ld	r24, Y
     bae:	0e 94 ab 08 	call	0x1156	; 0x1156 <char2lcd>
     bb2:	85 ec       	ldi	r24, 0xC5	; 197
     bb4:	8a 95       	dec	r24
     bb6:	f1 f7       	brne	.-4      	; 0xbb4 <LocalTemperature+0x5e>
     bb8:	00 00       	nop
	_delay_us(37);
	set_cursor(2,4);
     bba:	64 e0       	ldi	r22, 0x04	; 4
     bbc:	82 e0       	ldi	r24, 0x02	; 2
     bbe:	0e 94 01 08 	call	0x1002	; 0x1002 <set_cursor>
     bc2:	85 ec       	ldi	r24, 0xC5	; 197
     bc4:	8a 95       	dec	r24
     bc6:	f1 f7       	brne	.-4      	; 0xbc4 <LocalTemperature+0x6e>
     bc8:	00 00       	nop
	_delay_us(37);
	char2lcd(TempValue[1]);
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	0e 94 ab 08 	call	0x1156	; 0x1156 <char2lcd>
     bd0:	85 ec       	ldi	r24, 0xC5	; 197
     bd2:	8a 95       	dec	r24
     bd4:	f1 f7       	brne	.-4      	; 0xbd2 <LocalTemperature+0x7c>
     bd6:	00 00       	nop
	_delay_us(37);
	cursor_home();
     bd8:	0e 94 80 08 	call	0x1100	; 0x1100 <cursor_home>
     bdc:	85 ec       	ldi	r24, 0xC5	; 197
     bde:	8a 95       	dec	r24
     be0:	f1 f7       	brne	.-4      	; 0xbde <LocalTemperature+0x88>
     be2:	00 00       	nop
	_delay_us(37);
	cursor_off();
  	//string2lcd(lcd_string_array);
}
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
	_delay_us(37);
	char2lcd(TempValue[1]);
	_delay_us(37);
	cursor_home();
	_delay_us(37);
	cursor_off();
     be8:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <cursor_off>

00000bec <RemoteTemperature>:
  	//string2lcd(lcd_string_array);
}

void RemoteTemperature()
{	
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
	cursor_on();
     bf0:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <cursor_on>
     bf4:	85 ec       	ldi	r24, 0xC5	; 197
     bf6:	8a 95       	dec	r24
     bf8:	f1 f7       	brne	.-4      	; 0xbf6 <RemoteTemperature+0xa>
     bfa:	00 00       	nop
	_delay_us(37);
	set_cursor(2,10);
     bfc:	6a e0       	ldi	r22, 0x0A	; 10
     bfe:	82 e0       	ldi	r24, 0x02	; 2
     c00:	0e 94 01 08 	call	0x1002	; 0x1002 <set_cursor>
     c04:	85 ec       	ldi	r24, 0xC5	; 197
     c06:	8a 95       	dec	r24
     c08:	f1 f7       	brne	.-4      	; 0xc06 <RemoteTemperature+0x1a>
     c0a:	00 00       	nop
	_delay_us(37);
        char2lcd(RemoteTempValue[0]);
     c0c:	ce e6       	ldi	r28, 0x6E	; 110
     c0e:	d1 e0       	ldi	r29, 0x01	; 1
     c10:	88 81       	ld	r24, Y
     c12:	0e 94 ab 08 	call	0x1156	; 0x1156 <char2lcd>
     c16:	85 ec       	ldi	r24, 0xC5	; 197
     c18:	8a 95       	dec	r24
     c1a:	f1 f7       	brne	.-4      	; 0xc18 <RemoteTemperature+0x2c>
     c1c:	00 00       	nop
	_delay_us(37);
        set_cursor(2,11);
     c1e:	6b e0       	ldi	r22, 0x0B	; 11
     c20:	82 e0       	ldi	r24, 0x02	; 2
     c22:	0e 94 01 08 	call	0x1002	; 0x1002 <set_cursor>
     c26:	85 ec       	ldi	r24, 0xC5	; 197
     c28:	8a 95       	dec	r24
     c2a:	f1 f7       	brne	.-4      	; 0xc28 <RemoteTemperature+0x3c>
     c2c:	00 00       	nop
	_delay_us(37);
        char2lcd(RemoteTempValue[1]);
     c2e:	89 81       	ldd	r24, Y+1	; 0x01
     c30:	0e 94 ab 08 	call	0x1156	; 0x1156 <char2lcd>
     c34:	85 ec       	ldi	r24, 0xC5	; 197
     c36:	8a 95       	dec	r24
     c38:	f1 f7       	brne	.-4      	; 0xc36 <RemoteTemperature+0x4a>
     c3a:	00 00       	nop
	_delay_us(37);
	cursor_home();
     c3c:	0e 94 80 08 	call	0x1100	; 0x1100 <cursor_home>
     c40:	85 ec       	ldi	r24, 0xC5	; 197
     c42:	8a 95       	dec	r24
     c44:	f1 f7       	brne	.-4      	; 0xc42 <RemoteTemperature+0x56>
     c46:	00 00       	nop
	_delay_us(37);
	cursor_off();        
}
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
	_delay_us(37);
        char2lcd(RemoteTempValue[1]);
	_delay_us(37);
	cursor_home();
	_delay_us(37);
	cursor_off();        
     c4c:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <cursor_off>

00000c50 <__vector_18>:
}


ISR(USART0_RX_vect){
     c50:	1f 92       	push	r1
     c52:	0f 92       	push	r0
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	0f 92       	push	r0
     c58:	11 24       	eor	r1, r1
     c5a:	0b b6       	in	r0, 0x3b	; 59
     c5c:	0f 92       	push	r0
     c5e:	8f 93       	push	r24
     c60:	9f 93       	push	r25
     c62:	ef 93       	push	r30
     c64:	ff 93       	push	r31
        static  uint8_t  i;
        //clear_display();
        rx_char = UDR0;              //get character
     c66:	8c b1       	in	r24, 0x0c	; 12
     c68:	80 93 7e 01 	sts	0x017E, r24
        RemoteTempValue[i++] = rx_char;
     c6c:	e0 91 41 01 	lds	r30, 0x0141
     c70:	91 e0       	ldi	r25, 0x01	; 1
     c72:	9e 0f       	add	r25, r30
     c74:	90 93 41 01 	sts	0x0141, r25
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	e2 59       	subi	r30, 0x92	; 146
     c7c:	fe 4f       	sbci	r31, 0xFE	; 254
     c7e:	80 83       	st	Z, r24

        if(rx_char == '\0')
     c80:	81 11       	cpse	r24, r1
     c82:	05 c0       	rjmp	.+10     	; 0xc8e <__vector_18+0x3e>
        {       RemoteTemp_flag=1;
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	80 93 2d 01 	sts	0x012D, r24
                i = 0;
     c8a:	10 92 41 01 	sts	0x0141, r1
        }
        //lcd_str_array[i++]=rx_char;  //store in array 
        //if entire string has arrived, set flag, reset index
        //string2lcd(rx_char);
}
     c8e:	ff 91       	pop	r31
     c90:	ef 91       	pop	r30
     c92:	9f 91       	pop	r25
     c94:	8f 91       	pop	r24
     c96:	0f 90       	pop	r0
     c98:	0b be       	out	0x3b, r0	; 59
     c9a:	0f 90       	pop	r0
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	0f 90       	pop	r0
     ca0:	1f 90       	pop	r1
     ca2:	18 95       	reti

00000ca4 <LCD_setup>:

void LCD_setup()
{
        set_cursor(2,0);
     ca4:	60 e0       	ldi	r22, 0x00	; 0
     ca6:	82 e0       	ldi	r24, 0x02	; 2
     ca8:	0e 94 01 08 	call	0x1002	; 0x1002 <set_cursor>
     cac:	85 ec       	ldi	r24, 0xC5	; 197
     cae:	8a 95       	dec	r24
     cb0:	f1 f7       	brne	.-4      	; 0xcae <LCD_setup+0xa>
     cb2:	00 00       	nop
        _delay_us(37);
        char2lcd('T');
     cb4:	84 e5       	ldi	r24, 0x54	; 84
     cb6:	0e 94 ab 08 	call	0x1156	; 0x1156 <char2lcd>
     cba:	85 ec       	ldi	r24, 0xC5	; 197
     cbc:	8a 95       	dec	r24
     cbe:	f1 f7       	brne	.-4      	; 0xcbc <LCD_setup+0x18>
     cc0:	00 00       	nop
        _delay_us(37);
        set_cursor(2,1);
     cc2:	61 e0       	ldi	r22, 0x01	; 1
     cc4:	82 e0       	ldi	r24, 0x02	; 2
     cc6:	0e 94 01 08 	call	0x1002	; 0x1002 <set_cursor>
     cca:	85 ec       	ldi	r24, 0xC5	; 197
     ccc:	8a 95       	dec	r24
     cce:	f1 f7       	brne	.-4      	; 0xccc <LCD_setup+0x28>
     cd0:	00 00       	nop
        _delay_us(37);
        char2lcd('l');
     cd2:	8c e6       	ldi	r24, 0x6C	; 108
     cd4:	0e 94 ab 08 	call	0x1156	; 0x1156 <char2lcd>
     cd8:	85 ec       	ldi	r24, 0xC5	; 197
     cda:	8a 95       	dec	r24
     cdc:	f1 f7       	brne	.-4      	; 0xcda <LCD_setup+0x36>
     cde:	00 00       	nop
        _delay_us(37);

        set_cursor(2,3);
     ce0:	63 e0       	ldi	r22, 0x03	; 3
     ce2:	82 e0       	ldi	r24, 0x02	; 2
     ce4:	0e 94 01 08 	call	0x1002	; 0x1002 <set_cursor>
     ce8:	85 ec       	ldi	r24, 0xC5	; 197
     cea:	8a 95       	dec	r24
     cec:	f1 f7       	brne	.-4      	; 0xcea <LCD_setup+0x46>
     cee:	00 00       	nop
        _delay_us(37);
        char2lcd('X');
     cf0:	88 e5       	ldi	r24, 0x58	; 88
     cf2:	0e 94 ab 08 	call	0x1156	; 0x1156 <char2lcd>
     cf6:	85 ec       	ldi	r24, 0xC5	; 197
     cf8:	8a 95       	dec	r24
     cfa:	f1 f7       	brne	.-4      	; 0xcf8 <LCD_setup+0x54>
     cfc:	00 00       	nop
        _delay_us(37);
        set_cursor(2,4);
     cfe:	64 e0       	ldi	r22, 0x04	; 4
     d00:	82 e0       	ldi	r24, 0x02	; 2
     d02:	0e 94 01 08 	call	0x1002	; 0x1002 <set_cursor>
     d06:	85 ec       	ldi	r24, 0xC5	; 197
     d08:	8a 95       	dec	r24
     d0a:	f1 f7       	brne	.-4      	; 0xd08 <LCD_setup+0x64>
     d0c:	00 00       	nop
        _delay_us(37);
        char2lcd('X');
     d0e:	88 e5       	ldi	r24, 0x58	; 88
     d10:	0e 94 ab 08 	call	0x1156	; 0x1156 <char2lcd>
     d14:	85 ec       	ldi	r24, 0xC5	; 197
     d16:	8a 95       	dec	r24
     d18:	f1 f7       	brne	.-4      	; 0xd16 <LCD_setup+0x72>
     d1a:	00 00       	nop

        _delay_us(37);
        set_cursor(2,5);
     d1c:	65 e0       	ldi	r22, 0x05	; 5
     d1e:	82 e0       	ldi	r24, 0x02	; 2
     d20:	0e 94 01 08 	call	0x1002	; 0x1002 <set_cursor>
     d24:	85 ec       	ldi	r24, 0xC5	; 197
     d26:	8a 95       	dec	r24
     d28:	f1 f7       	brne	.-4      	; 0xd26 <LCD_setup+0x82>
     d2a:	00 00       	nop
        _delay_us(37);
        char2lcd('c');
     d2c:	83 e6       	ldi	r24, 0x63	; 99
     d2e:	0e 94 ab 08 	call	0x1156	; 0x1156 <char2lcd>
     d32:	85 ec       	ldi	r24, 0xC5	; 197
     d34:	8a 95       	dec	r24
     d36:	f1 f7       	brne	.-4      	; 0xd34 <LCD_setup+0x90>
     d38:	00 00       	nop
        _delay_us(37);

        set_cursor(2,7);
     d3a:	67 e0       	ldi	r22, 0x07	; 7
     d3c:	82 e0       	ldi	r24, 0x02	; 2
     d3e:	0e 94 01 08 	call	0x1002	; 0x1002 <set_cursor>
     d42:	85 ec       	ldi	r24, 0xC5	; 197
     d44:	8a 95       	dec	r24
     d46:	f1 f7       	brne	.-4      	; 0xd44 <LCD_setup+0xa0>
     d48:	00 00       	nop
        _delay_us(37);
        char2lcd('T');
     d4a:	84 e5       	ldi	r24, 0x54	; 84
     d4c:	0e 94 ab 08 	call	0x1156	; 0x1156 <char2lcd>
     d50:	85 ec       	ldi	r24, 0xC5	; 197
     d52:	8a 95       	dec	r24
     d54:	f1 f7       	brne	.-4      	; 0xd52 <LCD_setup+0xae>
     d56:	00 00       	nop
        _delay_us(37);
        set_cursor(2,8);
     d58:	68 e0       	ldi	r22, 0x08	; 8
     d5a:	82 e0       	ldi	r24, 0x02	; 2
     d5c:	0e 94 01 08 	call	0x1002	; 0x1002 <set_cursor>
     d60:	85 ec       	ldi	r24, 0xC5	; 197
     d62:	8a 95       	dec	r24
     d64:	f1 f7       	brne	.-4      	; 0xd62 <LCD_setup+0xbe>
     d66:	00 00       	nop
        _delay_us(37);
        char2lcd('r');
     d68:	82 e7       	ldi	r24, 0x72	; 114
     d6a:	0e 94 ab 08 	call	0x1156	; 0x1156 <char2lcd>
     d6e:	85 ec       	ldi	r24, 0xC5	; 197
     d70:	8a 95       	dec	r24
     d72:	f1 f7       	brne	.-4      	; 0xd70 <LCD_setup+0xcc>
     d74:	00 00       	nop
        _delay_us(37);

        set_cursor(2,10);
     d76:	6a e0       	ldi	r22, 0x0A	; 10
     d78:	82 e0       	ldi	r24, 0x02	; 2
     d7a:	0e 94 01 08 	call	0x1002	; 0x1002 <set_cursor>
     d7e:	85 ec       	ldi	r24, 0xC5	; 197
     d80:	8a 95       	dec	r24
     d82:	f1 f7       	brne	.-4      	; 0xd80 <LCD_setup+0xdc>
     d84:	00 00       	nop
        _delay_us(37);
        char2lcd('X');
     d86:	88 e5       	ldi	r24, 0x58	; 88
     d88:	0e 94 ab 08 	call	0x1156	; 0x1156 <char2lcd>
     d8c:	85 ec       	ldi	r24, 0xC5	; 197
     d8e:	8a 95       	dec	r24
     d90:	f1 f7       	brne	.-4      	; 0xd8e <LCD_setup+0xea>
     d92:	00 00       	nop
        _delay_us(37);
        set_cursor(2,11);
     d94:	6b e0       	ldi	r22, 0x0B	; 11
     d96:	82 e0       	ldi	r24, 0x02	; 2
     d98:	0e 94 01 08 	call	0x1002	; 0x1002 <set_cursor>
     d9c:	85 ec       	ldi	r24, 0xC5	; 197
     d9e:	8a 95       	dec	r24
     da0:	f1 f7       	brne	.-4      	; 0xd9e <LCD_setup+0xfa>
     da2:	00 00       	nop
        _delay_us(37);
        char2lcd('X');
     da4:	88 e5       	ldi	r24, 0x58	; 88
     da6:	0e 94 ab 08 	call	0x1156	; 0x1156 <char2lcd>
     daa:	85 ec       	ldi	r24, 0xC5	; 197
     dac:	8a 95       	dec	r24
     dae:	f1 f7       	brne	.-4      	; 0xdac <LCD_setup+0x108>
     db0:	00 00       	nop


        _delay_us(37);
        set_cursor(2,12);
     db2:	6c e0       	ldi	r22, 0x0C	; 12
     db4:	82 e0       	ldi	r24, 0x02	; 2
     db6:	0e 94 01 08 	call	0x1002	; 0x1002 <set_cursor>
     dba:	85 ec       	ldi	r24, 0xC5	; 197
     dbc:	8a 95       	dec	r24
     dbe:	f1 f7       	brne	.-4      	; 0xdbc <LCD_setup+0x118>
     dc0:	00 00       	nop
        _delay_us(37);
        char2lcd('c');
     dc2:	83 e6       	ldi	r24, 0x63	; 99
     dc4:	0e 94 ab 08 	call	0x1156	; 0x1156 <char2lcd>
     dc8:	85 ec       	ldi	r24, 0xC5	; 197
     dca:	8a 95       	dec	r24
     dcc:	f1 f7       	brne	.-4      	; 0xdca <LCD_setup+0x126>
     dce:	00 00       	nop
	_delay_us(37);
	cursor_off();
     dd0:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <cursor_off>

00000dd4 <ClearAlarmLCD>:
}

void ClearAlarmLCD()
{
	trigger_alarm = 0;
     dd4:	10 92 33 01 	sts	0x0133, r1
        cursor_on();
     dd8:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <cursor_on>
     ddc:	85 ec       	ldi	r24, 0xC5	; 197
     dde:	8a 95       	dec	r24
     de0:	f1 f7       	brne	.-4      	; 0xdde <ClearAlarmLCD+0xa>
     de2:	00 00       	nop
        _delay_us(37);
        cursor_home();
     de4:	0e 94 80 08 	call	0x1100	; 0x1100 <cursor_home>
     de8:	85 ec       	ldi	r24, 0xC5	; 197
     dea:	8a 95       	dec	r24
     dec:	f1 f7       	brne	.-4      	; 0xdea <ClearAlarmLCD+0x16>
     dee:	00 00       	nop
        _delay_us(37);
        string2lcd("       ");
     df0:	8f e1       	ldi	r24, 0x1F	; 31
     df2:	91 e0       	ldi	r25, 0x01	; 1
     df4:	0e 94 af 08 	call	0x115e	; 0x115e <string2lcd>
     df8:	85 ec       	ldi	r24, 0xC5	; 197
     dfa:	8a 95       	dec	r24
     dfc:	f1 f7       	brne	.-4      	; 0xdfa <ClearAlarmLCD+0x26>
     dfe:	00 00       	nop
        _delay_us(37);
        cursor_off();
     e00:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <cursor_off>

00000e04 <__vector_8>:
//******************************************************************************
// External interrupt 7 is on Port E bit 7. The interrupt is triggered on the
// rising edge of Port E bit 7.  The i/o clock must be running to detect the
// edge (not asynchronouslly triggered)
//******************************************************************************
ISR(INT7_vect){
     e04:	1f 92       	push	r1
     e06:	0f 92       	push	r0
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	0f 92       	push	r0
     e0c:	11 24       	eor	r1, r1
     e0e:	0b b6       	in	r0, 0x3b	; 59
     e10:	0f 92       	push	r0
     e12:	8f 93       	push	r24
     e14:	9f 93       	push	r25
     e16:	ef 93       	push	r30
     e18:	ff 93       	push	r31
	STC_interrupt = TRUE;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	80 93 7e 02 	sts	0x027E, r24
	 PORTF ^= (1 << PF1);
     e20:	e2 e6       	ldi	r30, 0x62	; 98
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	90 81       	ld	r25, Z
     e26:	82 e0       	ldi	r24, 0x02	; 2
     e28:	89 27       	eor	r24, r25
     e2a:	80 83       	st	Z, r24
}
     e2c:	ff 91       	pop	r31
     e2e:	ef 91       	pop	r30
     e30:	9f 91       	pop	r25
     e32:	8f 91       	pop	r24
     e34:	0f 90       	pop	r0
     e36:	0b be       	out	0x3b, r0	; 59
     e38:	0f 90       	pop	r0
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	0f 90       	pop	r0
     e3e:	1f 90       	pop	r1
     e40:	18 95       	reti

00000e42 <LCD_start_up>:



void LCD_start_up()
{
        lcd_init();
     e42:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <lcd_init>
     e46:	85 ec       	ldi	r24, 0xC5	; 197
     e48:	8a 95       	dec	r24
     e4a:	f1 f7       	brne	.-4      	; 0xe48 <LCD_start_up+0x6>
     e4c:	00 00       	nop
        _delay_us(37);
        cursor_on();
     e4e:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <cursor_on>
     e52:	85 ec       	ldi	r24, 0xC5	; 197
     e54:	8a 95       	dec	r24
     e56:	f1 f7       	brne	.-4      	; 0xe54 <LCD_start_up+0x12>
     e58:	00 00       	nop
        _delay_us(37);
        cursor_home();
     e5a:	0e 94 80 08 	call	0x1100	; 0x1100 <cursor_home>
     e5e:	85 ec       	ldi	r24, 0xC5	; 197
     e60:	8a 95       	dec	r24
     e62:	f1 f7       	brne	.-4      	; 0xe60 <LCD_start_up+0x1e>
     e64:	00 00       	nop
        _delay_us(37);
        clear_display();
     e66:	0e 94 75 08 	call	0x10ea	; 0x10ea <clear_display>
     e6a:	85 ec       	ldi	r24, 0xC5	; 197
     e6c:	8a 95       	dec	r24
     e6e:	f1 f7       	brne	.-4      	; 0xe6c <LCD_start_up+0x2a>
     e70:	00 00       	nop
        _delay_us(37);
        LCD_setup();
     e72:	0c 94 52 06 	jmp	0xca4	; 0xca4 <LCD_setup>

00000e76 <BarGraphVolume>:
}

void BarGraphVolume()
{
	switch(tempvolume/10)
     e76:	80 91 39 01 	lds	r24, 0x0139
     e7a:	ed ec       	ldi	r30, 0xCD	; 205
     e7c:	8e 9f       	mul	r24, r30
     e7e:	81 2d       	mov	r24, r1
     e80:	11 24       	eor	r1, r1
     e82:	e8 2f       	mov	r30, r24
     e84:	e6 95       	lsr	r30
     e86:	e6 95       	lsr	r30
     e88:	e6 95       	lsr	r30
     e8a:	8e 2f       	mov	r24, r30
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	fc 01       	movw	r30, r24
     e90:	33 97       	sbiw	r30, 0x03	; 3
     e92:	e8 30       	cpi	r30, 0x08	; 8
     e94:	f1 05       	cpc	r31, r1
     e96:	50 f4       	brcc	.+20     	; 0xeac <BarGraphVolume+0x36>
     e98:	ea 5b       	subi	r30, 0xBA	; 186
     e9a:	ff 4f       	sbci	r31, 0xFF	; 255
     e9c:	0c 94 8d 0f 	jmp	0x1f1a	; 0x1f1a <__tablejump2__>
//***********************************************************************
//This function sends data via the MOSI port of the SPI 
//The data is sent to the bargraph
void spi_write(uint8_t display_count)
{
        SPDR = display_count;//send display_count to the display 
     ea0:	8f ef       	ldi	r24, 0xFF	; 255
     ea2:	8f b9       	out	0x0f, r24	; 15
        while (bit_is_clear(SPSR,SPIF)){} //spin till SPI data has been sent 
     ea4:	77 9b       	sbis	0x0e, 7	; 14
     ea6:	fe cf       	rjmp	.-4      	; 0xea4 <BarGraphVolume+0x2e>

        PORTB |= 0b00000001; //Rising edge on PORTB0 (SRCLK of the  bargraph)
     ea8:	c0 9a       	sbi	0x18, 0	; 24
        PORTB &= 0b11111110;  //falling edge on PORTB0 (SRCLK of the bargraph)
     eaa:	c0 98       	cbi	0x18, 0	; 24
     eac:	08 95       	ret
//***********************************************************************
//This function sends data via the MOSI port of the SPI 
//The data is sent to the bargraph
void spi_write(uint8_t display_count)
{
        SPDR = display_count;//send display_count to the display 
     eae:	8e ef       	ldi	r24, 0xFE	; 254
     eb0:	8f b9       	out	0x0f, r24	; 15
        while (bit_is_clear(SPSR,SPIF)){} //spin till SPI data has been sent 
     eb2:	77 9b       	sbis	0x0e, 7	; 14
     eb4:	fe cf       	rjmp	.-4      	; 0xeb2 <BarGraphVolume+0x3c>

        PORTB |= 0b00000001; //Rising edge on PORTB0 (SRCLK of the  bargraph)
     eb6:	c0 9a       	sbi	0x18, 0	; 24
        PORTB &= 0b11111110;  //falling edge on PORTB0 (SRCLK of the bargraph)
     eb8:	c0 98       	cbi	0x18, 0	; 24
     eba:	f8 cf       	rjmp	.-16     	; 0xeac <BarGraphVolume+0x36>
//***********************************************************************
//This function sends data via the MOSI port of the SPI 
//The data is sent to the bargraph
void spi_write(uint8_t display_count)
{
        SPDR = display_count;//send display_count to the display 
     ebc:	80 e8       	ldi	r24, 0x80	; 128
     ebe:	8f b9       	out	0x0f, r24	; 15
        while (bit_is_clear(SPSR,SPIF)){} //spin till SPI data has been sent 
     ec0:	77 9b       	sbis	0x0e, 7	; 14
     ec2:	fe cf       	rjmp	.-4      	; 0xec0 <BarGraphVolume+0x4a>

        PORTB |= 0b00000001; //Rising edge on PORTB0 (SRCLK of the  bargraph)
     ec4:	c0 9a       	sbi	0x18, 0	; 24
        PORTB &= 0b11111110;  //falling edge on PORTB0 (SRCLK of the bargraph)
     ec6:	c0 98       	cbi	0x18, 0	; 24
     ec8:	f1 cf       	rjmp	.-30     	; 0xeac <BarGraphVolume+0x36>
//***********************************************************************
//This function sends data via the MOSI port of the SPI 
//The data is sent to the bargraph
void spi_write(uint8_t display_count)
{
        SPDR = display_count;//send display_count to the display 
     eca:	80 ec       	ldi	r24, 0xC0	; 192
     ecc:	8f b9       	out	0x0f, r24	; 15
        while (bit_is_clear(SPSR,SPIF)){} //spin till SPI data has been sent 
     ece:	77 9b       	sbis	0x0e, 7	; 14
     ed0:	fe cf       	rjmp	.-4      	; 0xece <BarGraphVolume+0x58>

        PORTB |= 0b00000001; //Rising edge on PORTB0 (SRCLK of the  bargraph)
     ed2:	c0 9a       	sbi	0x18, 0	; 24
        PORTB &= 0b11111110;  //falling edge on PORTB0 (SRCLK of the bargraph)
     ed4:	c0 98       	cbi	0x18, 0	; 24
     ed6:	ea cf       	rjmp	.-44     	; 0xeac <BarGraphVolume+0x36>
//***********************************************************************
//This function sends data via the MOSI port of the SPI 
//The data is sent to the bargraph
void spi_write(uint8_t display_count)
{
        SPDR = display_count;//send display_count to the display 
     ed8:	80 ee       	ldi	r24, 0xE0	; 224
     eda:	8f b9       	out	0x0f, r24	; 15
        while (bit_is_clear(SPSR,SPIF)){} //spin till SPI data has been sent 
     edc:	77 9b       	sbis	0x0e, 7	; 14
     ede:	fe cf       	rjmp	.-4      	; 0xedc <BarGraphVolume+0x66>

        PORTB |= 0b00000001; //Rising edge on PORTB0 (SRCLK of the  bargraph)
     ee0:	c0 9a       	sbi	0x18, 0	; 24
        PORTB &= 0b11111110;  //falling edge on PORTB0 (SRCLK of the bargraph)
     ee2:	c0 98       	cbi	0x18, 0	; 24
     ee4:	e3 cf       	rjmp	.-58     	; 0xeac <BarGraphVolume+0x36>
//***********************************************************************
//This function sends data via the MOSI port of the SPI 
//The data is sent to the bargraph
void spi_write(uint8_t display_count)
{
        SPDR = display_count;//send display_count to the display 
     ee6:	80 ef       	ldi	r24, 0xF0	; 240
     ee8:	8f b9       	out	0x0f, r24	; 15
        while (bit_is_clear(SPSR,SPIF)){} //spin till SPI data has been sent 
     eea:	77 9b       	sbis	0x0e, 7	; 14
     eec:	fe cf       	rjmp	.-4      	; 0xeea <BarGraphVolume+0x74>

        PORTB |= 0b00000001; //Rising edge on PORTB0 (SRCLK of the  bargraph)
     eee:	c0 9a       	sbi	0x18, 0	; 24
        PORTB &= 0b11111110;  //falling edge on PORTB0 (SRCLK of the bargraph)
     ef0:	c0 98       	cbi	0x18, 0	; 24
     ef2:	dc cf       	rjmp	.-72     	; 0xeac <BarGraphVolume+0x36>
//***********************************************************************
//This function sends data via the MOSI port of the SPI 
//The data is sent to the bargraph
void spi_write(uint8_t display_count)
{
        SPDR = display_count;//send display_count to the display 
     ef4:	88 ef       	ldi	r24, 0xF8	; 248
     ef6:	8f b9       	out	0x0f, r24	; 15
        while (bit_is_clear(SPSR,SPIF)){} //spin till SPI data has been sent 
     ef8:	77 9b       	sbis	0x0e, 7	; 14
     efa:	fe cf       	rjmp	.-4      	; 0xef8 <BarGraphVolume+0x82>

        PORTB |= 0b00000001; //Rising edge on PORTB0 (SRCLK of the  bargraph)
     efc:	c0 9a       	sbi	0x18, 0	; 24
        PORTB &= 0b11111110;  //falling edge on PORTB0 (SRCLK of the bargraph)
     efe:	c0 98       	cbi	0x18, 0	; 24
     f00:	d5 cf       	rjmp	.-86     	; 0xeac <BarGraphVolume+0x36>
//***********************************************************************
//This function sends data via the MOSI port of the SPI 
//The data is sent to the bargraph
void spi_write(uint8_t display_count)
{
        SPDR = display_count;//send display_count to the display 
     f02:	8c ef       	ldi	r24, 0xFC	; 252
     f04:	8f b9       	out	0x0f, r24	; 15
        while (bit_is_clear(SPSR,SPIF)){} //spin till SPI data has been sent 
     f06:	77 9b       	sbis	0x0e, 7	; 14
     f08:	fe cf       	rjmp	.-4      	; 0xf06 <BarGraphVolume+0x90>

        PORTB |= 0b00000001; //Rising edge on PORTB0 (SRCLK of the  bargraph)
     f0a:	c0 9a       	sbi	0x18, 0	; 24
        PORTB &= 0b11111110;  //falling edge on PORTB0 (SRCLK of the bargraph)
     f0c:	c0 98       	cbi	0x18, 0	; 24
     f0e:	ce cf       	rjmp	.-100    	; 0xeac <BarGraphVolume+0x36>

00000f10 <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     f10:	91 e0       	ldi	r25, 0x01	; 1
     f12:	81 11       	cpse	r24, r1
     f14:	01 c0       	rjmp	.+2      	; 0xf18 <send_lcd+0x8>
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f1a:	77 9b       	sbis	0x0e, 7	; 14
     f1c:	fe cf       	rjmp	.-4      	; 0xf1a <send_lcd+0xa>
  SPDR = byte;                        //send payload
     f1e:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f20:	77 9b       	sbis	0x0e, 7	; 14
     f22:	fe cf       	rjmp	.-4      	; 0xf20 <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     f24:	80 91 62 00 	lds	r24, 0x0062
     f28:	88 60       	ori	r24, 0x08	; 8
     f2a:	80 93 62 00 	sts	0x0062, r24
     f2e:	80 91 62 00 	lds	r24, 0x0062
     f32:	87 7f       	andi	r24, 0xF7	; 247
     f34:	80 93 62 00 	sts	0x0062, r24
     f38:	08 95       	ret

00000f3a <refresh_lcd>:
//  |  0|  1|  2|  3|  4|  5|  6|  7|  8|  9| 10| 11| 12| 13| 14| 15| 
//  -----------------------------------------------------------------
//  | 16| 17| 18| 19| 20| 21| 22| 23| 24| 25| 26| 27| 28| 29| 30| 31|  
//  -----------------------------------------------------------------
//
void refresh_lcd(char lcd_string_array[]) {
     f3a:	cf 93       	push	r28

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
     f3c:	c0 91 52 01 	lds	r28, 0x0152
     f40:	8c 0f       	add	r24, r28
     f42:	91 1d       	adc	r25, r1
     f44:	fc 01       	movw	r30, r24
     f46:	60 81       	ld	r22, Z
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
 i++;   //increment to next character
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	8c 0f       	add	r24, r28
     f52:	80 93 52 01 	sts	0x0152, r24
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
     f56:	80 31       	cpi	r24, 0x10	; 16
     f58:	a1 f0       	breq	.+40     	; 0xf82 <refresh_lcd+0x48>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     f5a:	80 32       	cpi	r24, 0x20	; 32
     f5c:	11 f0       	breq	.+4      	; 0xf62 <refresh_lcd+0x28>
}//refresh_lcd
     f5e:	cf 91       	pop	r28
     f60:	08 95       	ret
     f62:	e5 ed       	ldi	r30, 0xD5	; 213
     f64:	ea 95       	dec	r30
     f66:	f1 f7       	brne	.-4      	; 0xf64 <refresh_lcd+0x2a>
     f68:	00 00       	nop
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
     f6a:	60 e8       	ldi	r22, 0x80	; 128
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
     f72:	f5 ed       	ldi	r31, 0xD5	; 213
     f74:	fa 95       	dec	r31
     f76:	f1 f7       	brne	.-4      	; 0xf74 <refresh_lcd+0x3a>
     f78:	00 00       	nop
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     f7a:	10 92 52 01 	sts	0x0152, r1
}//refresh_lcd
     f7e:	cf 91       	pop	r28
     f80:	08 95       	ret
     f82:	f5 ed       	ldi	r31, 0xD5	; 213
     f84:	fa 95       	dec	r31
     f86:	f1 f7       	brne	.-4      	; 0xf84 <refresh_lcd+0x4a>
     f88:	00 00       	nop
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
     f8a:	60 ec       	ldi	r22, 0xC0	; 192
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
     f92:	85 ed       	ldi	r24, 0xD5	; 213
     f94:	8a 95       	dec	r24
     f96:	f1 f7       	brne	.-4      	; 0xf94 <refresh_lcd+0x5a>
     f98:	00 00       	nop
     f9a:	80 91 52 01 	lds	r24, 0x0152
     f9e:	dd cf       	rjmp	.-70     	; 0xf5a <refresh_lcd+0x20>

00000fa0 <set_custom_character>:
//addresses are 0x00 - 0x07 for a total of 8 custom characters (0x08 - 0x0F 
//map to 0x00 - 0x07) to display a custom character just refer to it's 
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
     fa0:	ef 92       	push	r14
     fa2:	ff 92       	push	r15
     fa4:	0f 93       	push	r16
     fa6:	1f 93       	push	r17
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	1f 92       	push	r1
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
     fb2:	18 2f       	mov	r17, r24
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
     fb4:	66 0f       	add	r22, r22
     fb6:	66 0f       	add	r22, r22
     fb8:	66 0f       	add	r22, r22
     fba:	60 5c       	subi	r22, 0xC0	; 192
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	99 83       	std	Y+1, r25	; 0x01
     fc0:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
     fc4:	85 ed       	ldi	r24, 0xD5	; 213
     fc6:	8a 95       	dec	r24
     fc8:	f1 f7       	brne	.-4      	; 0xfc6 <set_custom_character+0x26>
     fca:	00 00       	nop
     fcc:	e1 2e       	mov	r14, r17
     fce:	99 81       	ldd	r25, Y+1	; 0x01
     fd0:	f9 2e       	mov	r15, r25
     fd2:	87 01       	movw	r16, r14
     fd4:	08 5f       	subi	r16, 0xF8	; 248
     fd6:	1f 4f       	sbci	r17, 0xFF	; 255
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
     fd8:	f7 01       	movw	r30, r14
     fda:	61 91       	ld	r22, Z+
     fdc:	7f 01       	movw	r14, r30
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
     fe4:	f5 ed       	ldi	r31, 0xD5	; 213
     fe6:	fa 95       	dec	r31
     fe8:	f1 f7       	brne	.-4      	; 0xfe6 <set_custom_character+0x46>
     fea:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
     fec:	e0 16       	cp	r14, r16
     fee:	f1 06       	cpc	r15, r17
     ff0:	99 f7       	brne	.-26     	; 0xfd8 <set_custom_character+0x38>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
     ff2:	0f 90       	pop	r0
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	1f 91       	pop	r17
     ffa:	0f 91       	pop	r16
     ffc:	ff 90       	pop	r15
     ffe:	ef 90       	pop	r14
    1000:	08 95       	ret

00001002 <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
    1002:	90 e4       	ldi	r25, 0x40	; 64
    1004:	89 9f       	mul	r24, r25
    1006:	60 0d       	add	r22, r0
    1008:	11 24       	eor	r1, r1
    100a:	60 5c       	subi	r22, 0xC0	; 192
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	0c 94 88 07 	jmp	0xf10	; 0xf10 <send_lcd>

00001012 <uint2lcd>:
//Takes a 8bit unsigned and displays it in base ten on the LCD. Leading 0's are 
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    1012:	cf 93       	push	r28
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    1014:	88 23       	and	r24, r24
    1016:	b9 f1       	breq	.+110    	; 0x1086 <uint2lcd+0x74>
    1018:	c8 2f       	mov	r28, r24
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
    101a:	84 36       	cpi	r24, 0x64	; 100
    101c:	98 f4       	brcc	.+38     	; 0x1044 <uint2lcd+0x32>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
    101e:	8a 30       	cpi	r24, 0x0A	; 10
    1020:	d8 f4       	brcc	.+54     	; 0x1058 <uint2lcd+0x46>
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    1022:	8d ec       	ldi	r24, 0xCD	; 205
    1024:	c8 9f       	mul	r28, r24
    1026:	81 2d       	mov	r24, r1
    1028:	11 24       	eor	r1, r1
    102a:	86 95       	lsr	r24
    102c:	86 95       	lsr	r24
    102e:	86 95       	lsr	r24
    1030:	6c 2f       	mov	r22, r28
    1032:	2a e0       	ldi	r18, 0x0A	; 10
    1034:	82 9f       	mul	r24, r18
    1036:	60 19       	sub	r22, r0
    1038:	11 24       	eor	r1, r1
    103a:	60 5d       	subi	r22, 0xD0	; 208
    103c:	81 e0       	ldi	r24, 0x01	; 1
    }
}
    103e:	cf 91       	pop	r28
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    1040:	0c 94 88 07 	jmp	0xf10	; 0xf10 <send_lcd>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
    1044:	69 e2       	ldi	r22, 0x29	; 41
    1046:	86 9f       	mul	r24, r22
    1048:	61 2d       	mov	r22, r1
    104a:	11 24       	eor	r1, r1
    104c:	62 95       	swap	r22
    104e:	6f 70       	andi	r22, 0x0F	; 15
    1050:	60 5d       	subi	r22, 0xD0	; 208
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
    1058:	89 e2       	ldi	r24, 0x29	; 41
    105a:	c8 9f       	mul	r28, r24
    105c:	81 2d       	mov	r24, r1
    105e:	11 24       	eor	r1, r1
    1060:	82 95       	swap	r24
    1062:	8f 70       	andi	r24, 0x0F	; 15
    1064:	9c 2f       	mov	r25, r28
    1066:	24 e6       	ldi	r18, 0x64	; 100
    1068:	82 9f       	mul	r24, r18
    106a:	90 19       	sub	r25, r0
    106c:	11 24       	eor	r1, r1
    106e:	6d ec       	ldi	r22, 0xCD	; 205
    1070:	96 9f       	mul	r25, r22
    1072:	61 2d       	mov	r22, r1
    1074:	11 24       	eor	r1, r1
    1076:	66 95       	lsr	r22
    1078:	66 95       	lsr	r22
    107a:	66 95       	lsr	r22
    107c:	60 5d       	subi	r22, 0xD0	; 208
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
    1084:	ce cf       	rjmp	.-100    	; 0x1022 <uint2lcd+0x10>
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    1086:	60 e3       	ldi	r22, 0x30	; 48
    1088:	81 e0       	ldi	r24, 0x01	; 1
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    }
}
    108a:	cf 91       	pop	r28
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    108c:	0c 94 88 07 	jmp	0xf10	; 0xf10 <send_lcd>

00001090 <int2lcd>:
//                          int2lcd  
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    1090:	cf 93       	push	r28
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    1092:	87 fd       	sbrc	r24, 7
    1094:	03 c0       	rjmp	.+6      	; 0x109c <int2lcd+0xc>
    else          {uint2lcd(number);                                            }
}
    1096:	cf 91       	pop	r28
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    else          {uint2lcd(number);                                            }
    1098:	0c 94 09 08 	jmp	0x1012	; 0x1012 <uint2lcd>
    109c:	c8 2f       	mov	r28, r24
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    109e:	6d e2       	ldi	r22, 0x2D	; 45
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
    10a6:	85 ed       	ldi	r24, 0xD5	; 213
    10a8:	8a 95       	dec	r24
    10aa:	f1 f7       	brne	.-4      	; 0x10a8 <int2lcd+0x18>
    10ac:	00 00       	nop
    10ae:	8c 2f       	mov	r24, r28
    10b0:	81 95       	neg	r24
    else          {uint2lcd(number);                                            }
}
    10b2:	cf 91       	pop	r28
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    10b4:	0c 94 09 08 	jmp	0x1012	; 0x1012 <uint2lcd>

000010b8 <cursor_on>:

//-----------------------------------------------------------------------------
//                          cursor_on
//
//Sets the cursor to display
void cursor_on(void){send_lcd(CMD_BYTE, 0x0E);}
    10b8:	6e e0       	ldi	r22, 0x0E	; 14
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	0c 94 88 07 	jmp	0xf10	; 0xf10 <send_lcd>

000010c0 <cursor_off>:

//-----------------------------------------------------------------------------
//                          cursor_off
//
//Turns the cursor display off
void cursor_off(void){send_lcd(CMD_BYTE, 0x0C);}
    10c0:	6c e0       	ldi	r22, 0x0C	; 12
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	0c 94 88 07 	jmp	0xf10	; 0xf10 <send_lcd>

000010c8 <shift_right>:

//-----------------------------------------------------------------------------
//                          shift_right 
//
//shifts the display right one character
void shift_right(void){send_lcd(CMD_BYTE, 0x1E);}
    10c8:	6e e1       	ldi	r22, 0x1E	; 30
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	0c 94 88 07 	jmp	0xf10	; 0xf10 <send_lcd>

000010d0 <shift_left>:

//-----------------------------------------------------------------------------
//                          shift_left  
//
//shifts the display left one character
void shift_left(void){send_lcd(CMD_BYTE, 0x18);}
    10d0:	68 e1       	ldi	r22, 0x18	; 24
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	0c 94 88 07 	jmp	0xf10	; 0xf10 <send_lcd>

000010d8 <strobe_lcd>:
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    10d8:	e2 e6       	ldi	r30, 0x62	; 98
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	88 60       	ori	r24, 0x08	; 8
    10e0:	80 83       	st	Z, r24
    10e2:	80 81       	ld	r24, Z
    10e4:	87 7f       	andi	r24, 0xF7	; 247
    10e6:	80 83       	st	Z, r24
    10e8:	08 95       	ret

000010ea <clear_display>:
//
//Clears entire display and sets DDRAM address 0 in address counter. Requires
//1.8ms for execution. Use only if you can withstand the big delay.
//
void clear_display(void){
  send_lcd(CMD_BYTE, CLEAR_DISPLAY);
    10ea:	61 e0       	ldi	r22, 0x01	; 1
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
    10f2:	8f e1       	ldi	r24, 0x1F	; 31
    10f4:	9c e1       	ldi	r25, 0x1C	; 28
    10f6:	01 97       	sbiw	r24, 0x01	; 1
    10f8:	f1 f7       	brne	.-4      	; 0x10f6 <clear_display+0xc>
    10fa:	00 c0       	rjmp	.+0      	; 0x10fc <clear_display+0x12>
    10fc:	00 00       	nop
    10fe:	08 95       	ret

00001100 <cursor_home>:
//shifted to original position.  DDRAM contents remain unchanged. Requires
//1.5ms to execute. Use only if you can withstand the big delay. Consider
//using line1_col1().
//
void cursor_home(void){
  send_lcd(CMD_BYTE, RETURN_HOME);
    1100:	62 e0       	ldi	r22, 0x02	; 2
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
    1108:	8f e6       	ldi	r24, 0x6F	; 111
    110a:	97 e1       	ldi	r25, 0x17	; 23
    110c:	01 97       	sbiw	r24, 0x01	; 1
    110e:	f1 f7       	brne	.-4      	; 0x110c <cursor_home+0xc>
    1110:	00 c0       	rjmp	.+0      	; 0x1112 <cursor_home+0x12>
    1112:	00 00       	nop
    1114:	08 95       	ret

00001116 <line2_col1>:
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
    1116:	60 ec       	ldi	r22, 0xC0	; 192
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
    111e:	85 ed       	ldi	r24, 0xD5	; 213
    1120:	8a 95       	dec	r24
    1122:	f1 f7       	brne	.-4      	; 0x1120 <line2_col1+0xa>
    1124:	00 00       	nop
    1126:	08 95       	ret

00001128 <line1_col1>:
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
    1128:	60 e8       	ldi	r22, 0x80	; 128
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
    1130:	85 ed       	ldi	r24, 0xD5	; 213
    1132:	8a 95       	dec	r24
    1134:	f1 f7       	brne	.-4      	; 0x1132 <line1_col1+0xa>
    1136:	00 00       	nop
    1138:	08 95       	ret

0000113a <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
    113a:	cf 93       	push	r28
    113c:	c0 e1       	ldi	r28, 0x10	; 16
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
		send_lcd(CHAR_BYTE, ' '); 
    113e:	60 e2       	ldi	r22, 0x20	; 32
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
    1146:	85 ed       	ldi	r24, 0xD5	; 213
    1148:	8a 95       	dec	r24
    114a:	f1 f7       	brne	.-4      	; 0x1148 <fill_spaces+0xe>
    114c:	00 00       	nop
    114e:	c1 50       	subi	r28, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
    1150:	b1 f7       	brne	.-20     	; 0x113e <fill_spaces+0x4>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
    1152:	cf 91       	pop	r28
    1154:	08 95       	ret

00001156 <char2lcd>:
//                            char2lcd
//                            
//Send a single char to the LCD.
//usage: char2lcd('H');  // send an H to the LCD
//
void char2lcd(char a_char){send_lcd(CHAR_BYTE, a_char);} 
    1156:	68 2f       	mov	r22, r24
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	0c 94 88 07 	jmp	0xf10	; 0xf10 <send_lcd>

0000115e <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
    115e:	0f 93       	push	r16
    1160:	1f 93       	push	r17
    1162:	cf 93       	push	r28
    1164:	8c 01       	movw	r16, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
    1166:	40 e0       	ldi	r20, 0x00	; 0
    1168:	50 e0       	ldi	r21, 0x00	; 0
    116a:	c0 e0       	ldi	r28, 0x00	; 0
    116c:	f8 01       	movw	r30, r16
    116e:	e4 0f       	add	r30, r20
    1170:	f5 1f       	adc	r31, r21
    1172:	60 81       	ld	r22, Z
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
    117a:	85 ed       	ldi	r24, 0xD5	; 213
    117c:	8a 95       	dec	r24
    117e:	f1 f7       	brne	.-4      	; 0x117c <string2lcd+0x1e>
    1180:	00 00       	nop
    1182:	cf 5f       	subi	r28, 0xFF	; 255
    1184:	4c 2f       	mov	r20, r28
    1186:	50 e0       	ldi	r21, 0x00	; 0
    1188:	f8 01       	movw	r30, r16
    118a:	01 90       	ld	r0, Z+
    118c:	00 20       	and	r0, r0
    118e:	e9 f7       	brne	.-6      	; 0x118a <string2lcd+0x2c>
    1190:	9f 01       	movw	r18, r30
    1192:	20 1b       	sub	r18, r16
    1194:	31 0b       	sbc	r19, r17
    1196:	22 50       	subi	r18, 0x02	; 2
    1198:	31 09       	sbc	r19, r1
    119a:	24 17       	cp	r18, r20
    119c:	35 07       	cpc	r19, r21
    119e:	30 f7       	brcc	.-52     	; 0x116c <string2lcd+0xe>
  _delay_us(40);  //execution takes 37us per character
  }                  
} 
    11a0:	cf 91       	pop	r28
    11a2:	1f 91       	pop	r17
    11a4:	0f 91       	pop	r16
    11a6:	08 95       	ret

000011a8 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11a8:	8f ef       	ldi	r24, 0xFF	; 255
    11aa:	99 ef       	ldi	r25, 0xF9	; 249
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	f1 f7       	brne	.-4      	; 0x11ac <lcd_init+0x4>
    11b0:	00 c0       	rjmp	.+0      	; 0x11b2 <lcd_init+0xa>
    11b2:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
    11b4:	88 e0       	ldi	r24, 0x08	; 8
    11b6:	80 93 61 00 	sts	0x0061, r24
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7); //send cmd sequence 3 times 
    11ba:	60 e3       	ldi	r22, 0x30	; 48
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
    11c2:	8f e5       	ldi	r24, 0x5F	; 95
    11c4:	9d e6       	ldi	r25, 0x6D	; 109
    11c6:	01 97       	sbiw	r24, 0x01	; 1
    11c8:	f1 f7       	brne	.-4      	; 0x11c6 <lcd_init+0x1e>
    11ca:	00 c0       	rjmp	.+0      	; 0x11cc <lcd_init+0x24>
    11cc:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
    11ce:	60 e3       	ldi	r22, 0x30	; 48
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
    11d6:	8f e5       	ldi	r24, 0x5F	; 95
    11d8:	9d e6       	ldi	r25, 0x6D	; 109
    11da:	01 97       	sbiw	r24, 0x01	; 1
    11dc:	f1 f7       	brne	.-4      	; 0x11da <lcd_init+0x32>
    11de:	00 c0       	rjmp	.+0      	; 0x11e0 <lcd_init+0x38>
    11e0:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
    11e2:	60 e3       	ldi	r22, 0x30	; 48
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
    11ea:	8f e5       	ldi	r24, 0x5F	; 95
    11ec:	9d e6       	ldi	r25, 0x6D	; 109
    11ee:	01 97       	sbiw	r24, 0x01	; 1
    11f0:	f1 f7       	brne	.-4      	; 0x11ee <lcd_init+0x46>
    11f2:	00 c0       	rjmp	.+0      	; 0x11f4 <lcd_init+0x4c>
    11f4:	00 00       	nop
  send_lcd(CMD_BYTE, 0x38); _delay_ms(5);
    11f6:	68 e3       	ldi	r22, 0x38	; 56
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
    11fe:	8f e1       	ldi	r24, 0x1F	; 31
    1200:	9e e4       	ldi	r25, 0x4E	; 78
    1202:	01 97       	sbiw	r24, 0x01	; 1
    1204:	f1 f7       	brne	.-4      	; 0x1202 <lcd_init+0x5a>
    1206:	00 c0       	rjmp	.+0      	; 0x1208 <lcd_init+0x60>
    1208:	00 00       	nop
  send_lcd(CMD_BYTE, 0x08); _delay_ms(5);
    120a:	68 e0       	ldi	r22, 0x08	; 8
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
    1212:	8f e1       	ldi	r24, 0x1F	; 31
    1214:	9e e4       	ldi	r25, 0x4E	; 78
    1216:	01 97       	sbiw	r24, 0x01	; 1
    1218:	f1 f7       	brne	.-4      	; 0x1216 <lcd_init+0x6e>
    121a:	00 c0       	rjmp	.+0      	; 0x121c <lcd_init+0x74>
    121c:	00 00       	nop
  send_lcd(CMD_BYTE, 0x01); _delay_ms(5);
    121e:	61 e0       	ldi	r22, 0x01	; 1
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
    1226:	8f e1       	ldi	r24, 0x1F	; 31
    1228:	9e e4       	ldi	r25, 0x4E	; 78
    122a:	01 97       	sbiw	r24, 0x01	; 1
    122c:	f1 f7       	brne	.-4      	; 0x122a <lcd_init+0x82>
    122e:	00 c0       	rjmp	.+0      	; 0x1230 <lcd_init+0x88>
    1230:	00 00       	nop
  send_lcd(CMD_BYTE, 0x06); _delay_ms(5);
    1232:	66 e0       	ldi	r22, 0x06	; 6
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
    123a:	8f e1       	ldi	r24, 0x1F	; 31
    123c:	9e e4       	ldi	r25, 0x4E	; 78
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	f1 f7       	brne	.-4      	; 0x123e <lcd_init+0x96>
    1242:	00 c0       	rjmp	.+0      	; 0x1244 <lcd_init+0x9c>
    1244:	00 00       	nop
  send_lcd(CMD_BYTE, 0x0C + (CURSOR_VISIBLE<<1) + CURSOR_BLINK); _delay_ms(5);
    1246:	6c e0       	ldi	r22, 0x0C	; 12
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
    124e:	8f e1       	ldi	r24, 0x1F	; 31
    1250:	9e e4       	ldi	r25, 0x4E	; 78
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	f1 f7       	brne	.-4      	; 0x1252 <lcd_init+0xaa>
    1256:	00 c0       	rjmp	.+0      	; 0x1258 <lcd_init+0xb0>
    1258:	00 00       	nop
    125a:	08 95       	ret

0000125c <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
    125c:	8f 92       	push	r8
    125e:	9f 92       	push	r9
    1260:	af 92       	push	r10
    1262:	bf 92       	push	r11
    1264:	cf 92       	push	r12
    1266:	df 92       	push	r13
    1268:	ef 92       	push	r14
    126a:	ff 92       	push	r15
    126c:	0f 93       	push	r16
    126e:	1f 93       	push	r17
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	69 97       	sbiw	r28, 0x19	; 25
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	de bf       	out	0x3e, r29	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	cd bf       	out	0x3d, r28	; 61
    1284:	f4 2e       	mov	r15, r20
    1286:	12 2f       	mov	r17, r18
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
    1288:	00 23       	and	r16, r16
    128a:	59 f0       	breq	.+22     	; 0x12a2 <lcd_int32+0x46>
        bSigned = (qr.quot<0);
    128c:	4b 01       	movw	r8, r22
    128e:	5c 01       	movw	r10, r24
    1290:	88 24       	eor	r8, r8
    1292:	b7 fc       	sbrc	r11, 7
    1294:	83 94       	inc	r8
    1296:	99 24       	eor	r9, r9
    1298:	aa 24       	eor	r10, r10
    129a:	bb 24       	eor	r11, r11
    129c:	08 2d       	mov	r16, r8
        qr.quot = labs(qr.quot);
    129e:	97 fd       	sbrc	r25, 7
    12a0:	8f c0       	rjmp	.+286    	; 0x13c0 <lcd_int32+0x164>
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
    12a2:	11 23       	and	r17, r17
    12a4:	09 f4       	brne	.+2      	; 0x12a8 <lcd_int32+0x4c>
    12a6:	84 c0       	rjmp	.+264    	; 0x13b0 <lcd_int32+0x154>
    12a8:	9e 01       	movw	r18, r28
    12aa:	2f 5f       	subi	r18, 0xFF	; 255
    12ac:	3f 4f       	sbci	r19, 0xFF	; 255
    12ae:	69 01       	movw	r12, r18
    12b0:	59 01       	movw	r10, r18
    12b2:	88 24       	eor	r8, r8
    12b4:	8a 94       	dec	r8
    12b6:	81 0e       	add	r8, r17
    12b8:	91 2c       	mov	r9, r1
    12ba:	3f ef       	ldi	r19, 0xFF	; 255
    12bc:	83 1a       	sub	r8, r19
    12be:	93 0a       	sbc	r9, r19
    12c0:	8c 0c       	add	r8, r12
    12c2:	9d 1c       	adc	r9, r13
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
    12c4:	2a e0       	ldi	r18, 0x0A	; 10
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	40 e0       	ldi	r20, 0x00	; 0
    12ca:	50 e0       	ldi	r21, 0x00	; 0
    12cc:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <__divmodsi4>
    12d0:	e6 2f       	mov	r30, r22
    12d2:	2a 8b       	std	Y+18, r18	; 0x12
    12d4:	3b 8b       	std	Y+19, r19	; 0x13
    12d6:	4c 8b       	std	Y+20, r20	; 0x14
    12d8:	5d 8b       	std	Y+21, r21	; 0x15
    12da:	6a 89       	ldd	r22, Y+18	; 0x12
    12dc:	7b 89       	ldd	r23, Y+19	; 0x13
    12de:	8c 89       	ldd	r24, Y+20	; 0x14
    12e0:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    12e2:	20 e3       	ldi	r18, 0x30	; 48
    12e4:	2e 0f       	add	r18, r30
    12e6:	f5 01       	movw	r30, r10
    12e8:	21 93       	st	Z+, r18
    12ea:	5f 01       	movw	r10, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
    12ec:	e8 15       	cp	r30, r8
    12ee:	f9 05       	cpc	r31, r9
    12f0:	49 f7       	brne	.-46     	; 0x12c4 <lcd_int32+0x68>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
    12f2:	bb 24       	eor	r11, r11
    12f4:	b3 94       	inc	r11
    12f6:	b1 0e       	add	r11, r17
    12f8:	f6 01       	movw	r30, r12
    12fa:	e1 0f       	add	r30, r17
    12fc:	f1 1d       	adc	r31, r1
    12fe:	2e e2       	ldi	r18, 0x2E	; 46
    1300:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
    1302:	2a e0       	ldi	r18, 0x0A	; 10
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	40 e0       	ldi	r20, 0x00	; 0
    1308:	50 e0       	ldi	r21, 0x00	; 0
    130a:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <__divmodsi4>
    130e:	e6 2f       	mov	r30, r22
    1310:	2a 8b       	std	Y+18, r18	; 0x12
    1312:	3b 8b       	std	Y+19, r19	; 0x13
    1314:	4c 8b       	std	Y+20, r20	; 0x14
    1316:	5d 8b       	std	Y+21, r21	; 0x15
    1318:	6e 8b       	std	Y+22, r22	; 0x16
    131a:	7f 8b       	std	Y+23, r23	; 0x17
    131c:	88 8f       	std	Y+24, r24	; 0x18
    131e:	99 8f       	std	Y+25, r25	; 0x19
    1320:	6a 89       	ldd	r22, Y+18	; 0x12
    1322:	7b 89       	ldd	r23, Y+19	; 0x13
    1324:	8c 89       	ldd	r24, Y+20	; 0x14
    1326:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    1328:	11 e0       	ldi	r17, 0x01	; 1
    132a:	1b 0d       	add	r17, r11
    132c:	d6 01       	movw	r26, r12
    132e:	ab 0d       	add	r26, r11
    1330:	b1 1d       	adc	r27, r1
    1332:	e0 5d       	subi	r30, 0xD0	; 208
    1334:	ec 93       	st	X, r30
    1336:	b1 2e       	mov	r11, r17
        }while(qr.quot);
    1338:	61 15       	cp	r22, r1
    133a:	71 05       	cpc	r23, r1
    133c:	81 05       	cpc	r24, r1
    133e:	91 05       	cpc	r25, r1
    1340:	01 f7       	brne	.-64     	; 0x1302 <lcd_int32+0xa6>

      // fill the whole field if a width was specified
      if (fieldwidth){
    1342:	ff 20       	and	r15, r15
    1344:	61 f0       	breq	.+24     	; 0x135e <lcd_int32+0x102>
        fillch = bZeroFill? '0': ' '; // determine the fill character
    1346:	e1 10       	cpse	r14, r1
    1348:	39 c0       	rjmp	.+114    	; 0x13bc <lcd_int32+0x160>
    134a:	80 e2       	ldi	r24, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
    134c:	1f 15       	cp	r17, r15
    134e:	38 f4       	brcc	.+14     	; 0x135e <lcd_int32+0x102>
    1350:	f6 01       	movw	r30, r12
    1352:	e1 0f       	add	r30, r17
    1354:	f1 1d       	adc	r31, r1
    1356:	80 83       	st	Z, r24
    1358:	1f 5f       	subi	r17, 0xFF	; 255
    135a:	1f 11       	cpse	r17, r15
    135c:	f9 cf       	rjmp	.-14     	; 0x1350 <lcd_int32+0xf4>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
    135e:	00 23       	and	r16, r16
    1360:	31 f0       	breq	.+12     	; 0x136e <lcd_int32+0x112>
    1362:	f6 01       	movw	r30, r12
    1364:	e1 0f       	add	r30, r17
    1366:	f1 1d       	adc	r31, r1
    1368:	8d e2       	ldi	r24, 0x2D	; 45
    136a:	80 83       	st	Z, r24
    136c:	1f 5f       	subi	r17, 0xFF	; 255

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    136e:	11 50       	subi	r17, 0x01	; 1
    1370:	f6 01       	movw	r30, r12
    1372:	e1 0f       	add	r30, r17
    1374:	f1 1d       	adc	r31, r1
    1376:	60 81       	ld	r22, Z
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    137e:	35 ed       	ldi	r19, 0xD5	; 213
    1380:	3a 95       	dec	r19
    1382:	f1 f7       	brne	.-4      	; 0x1380 <lcd_int32+0x124>
    1384:	00 00       	nop
    1386:	11 11       	cpse	r17, r1
    1388:	f2 cf       	rjmp	.-28     	; 0x136e <lcd_int32+0x112>

}
    138a:	69 96       	adiw	r28, 0x19	; 25
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	f8 94       	cli
    1390:	de bf       	out	0x3e, r29	; 62
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	cd bf       	out	0x3d, r28	; 61
    1396:	df 91       	pop	r29
    1398:	cf 91       	pop	r28
    139a:	1f 91       	pop	r17
    139c:	0f 91       	pop	r16
    139e:	ff 90       	pop	r15
    13a0:	ef 90       	pop	r14
    13a2:	df 90       	pop	r13
    13a4:	cf 90       	pop	r12
    13a6:	bf 90       	pop	r11
    13a8:	af 90       	pop	r10
    13aa:	9f 90       	pop	r9
    13ac:	8f 90       	pop	r8
    13ae:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
    13b0:	b1 2c       	mov	r11, r1
    13b2:	9e 01       	movw	r18, r28
    13b4:	2f 5f       	subi	r18, 0xFF	; 255
    13b6:	3f 4f       	sbci	r19, 0xFF	; 255
    13b8:	69 01       	movw	r12, r18
    13ba:	a3 cf       	rjmp	.-186    	; 0x1302 <lcd_int32+0xa6>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
    13bc:	80 e3       	ldi	r24, 0x30	; 48
    13be:	c6 cf       	rjmp	.-116    	; 0x134c <lcd_int32+0xf0>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
    13c0:	90 95       	com	r25
    13c2:	80 95       	com	r24
    13c4:	70 95       	com	r23
    13c6:	61 95       	neg	r22
    13c8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ca:	8f 4f       	sbci	r24, 0xFF	; 255
    13cc:	9f 4f       	sbci	r25, 0xFF	; 255
    13ce:	69 cf       	rjmp	.-302    	; 0x12a2 <lcd_int32+0x46>

000013d0 <lcd_int16>:
void    lcd_int16(int16_t l, 
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bSigned,
                  uint8_t bZeroFill)
{
    13d0:	5f 92       	push	r5
    13d2:	6f 92       	push	r6
    13d4:	7f 92       	push	r7
    13d6:	8f 92       	push	r8
    13d8:	9f 92       	push	r9
    13da:	af 92       	push	r10
    13dc:	bf 92       	push	r11
    13de:	cf 92       	push	r12
    13e0:	df 92       	push	r13
    13e2:	ef 92       	push	r14
    13e4:	ff 92       	push	r15
    13e6:	0f 93       	push	r16
    13e8:	1f 93       	push	r17
    13ea:	cf 93       	push	r28
    13ec:	df 93       	push	r29
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
    13f2:	61 97       	sbiw	r28, 0x11	; 17
    13f4:	0f b6       	in	r0, 0x3f	; 63
    13f6:	f8 94       	cli
    13f8:	de bf       	out	0x3e, r29	; 62
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	cd bf       	out	0x3d, r28	; 61
    13fe:	66 2e       	mov	r6, r22
    1400:	14 2f       	mov	r17, r20
//        uint8_t bSigned;   Now an argument for signed or not

        // initialize the quotient 
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
    1402:	59 2e       	mov	r5, r25
    1404:	55 1c       	adc	r5, r5
    1406:	55 24       	eor	r5, r5
    1408:	55 1c       	adc	r5, r5
    140a:	75 2c       	mov	r7, r5
    140c:	a5 2c       	mov	r10, r5
    140e:	b1 2c       	mov	r11, r1
    1410:	22 27       	eor	r18, r18
    1412:	33 27       	eor	r19, r19
    1414:	2a 19       	sub	r18, r10
    1416:	3b 09       	sbc	r19, r11
    1418:	82 27       	eor	r24, r18
    141a:	93 27       	eor	r25, r19
    141c:	9c 01       	movw	r18, r24
    141e:	2a 0d       	add	r18, r10
    1420:	3b 1d       	adc	r19, r11
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
    1422:	44 23       	and	r20, r20
    1424:	09 f4       	brne	.+2      	; 0x1428 <lcd_int16+0x58>
    1426:	90 c0       	rjmp	.+288    	; 0x1548 <lcd_int16+0x178>
    1428:	ce 01       	movw	r24, r28
    142a:	01 96       	adiw	r24, 0x01	; 1
    142c:	7c 01       	movw	r14, r24
    142e:	6c 01       	movw	r12, r24
    1430:	88 24       	eor	r8, r8
    1432:	8a 94       	dec	r8
    1434:	84 0e       	add	r8, r20
    1436:	91 2c       	mov	r9, r1
    1438:	9f ef       	ldi	r25, 0xFF	; 255
    143a:	89 1a       	sub	r8, r25
    143c:	99 0a       	sbc	r9, r25
    143e:	8e 0c       	add	r8, r14
    1440:	9f 1c       	adc	r9, r15
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
    1442:	6a e0       	ldi	r22, 0x0A	; 10
    1444:	70 e0       	ldi	r23, 0x00	; 0
    1446:	c9 01       	movw	r24, r18
    1448:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__divmodhi4>
    144c:	46 2f       	mov	r20, r22
    144e:	24 2f       	mov	r18, r20
    1450:	37 2f       	mov	r19, r23
            sline[i++] = qr.rem + '0';
    1452:	80 5d       	subi	r24, 0xD0	; 208
    1454:	f6 01       	movw	r30, r12
    1456:	81 93       	st	Z+, r24
    1458:	6f 01       	movw	r12, r30
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
          for (; decpos ; decpos--){
    145a:	e8 15       	cp	r30, r8
    145c:	f9 05       	cpc	r31, r9
    145e:	89 f7       	brne	.-30     	; 0x1442 <lcd_int16+0x72>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
    1460:	dd 24       	eor	r13, r13
    1462:	d3 94       	inc	r13
    1464:	d1 0e       	add	r13, r17
    1466:	f7 01       	movw	r30, r14
    1468:	e1 0f       	add	r30, r17
    146a:	f1 1d       	adc	r31, r1
    146c:	8e e2       	ldi	r24, 0x2E	; 46
    146e:	80 83       	st	Z, r24
        }

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
    1470:	6a e0       	ldi	r22, 0x0A	; 10
    1472:	70 e0       	ldi	r23, 0x00	; 0
    1474:	c9 01       	movw	r24, r18
    1476:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__divmodhi4>
    147a:	46 2f       	mov	r20, r22
    147c:	24 2f       	mov	r18, r20
    147e:	37 2f       	mov	r19, r23
                sline[i++] = qr.rem + '0';
    1480:	11 e0       	ldi	r17, 0x01	; 1
    1482:	1d 0d       	add	r17, r13
    1484:	f7 01       	movw	r30, r14
    1486:	ed 0d       	add	r30, r13
    1488:	f1 1d       	adc	r31, r1
    148a:	80 5d       	subi	r24, 0xD0	; 208
    148c:	80 83       	st	Z, r24
    148e:	d1 2e       	mov	r13, r17
        }
        while(qr.quot);
    1490:	21 15       	cp	r18, r1
    1492:	31 05       	cpc	r19, r1
    1494:	69 f7       	brne	.-38     	; 0x1470 <lcd_int16+0xa0>

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
    1496:	01 11       	cpse	r16, r1
    1498:	15 c0       	rjmp	.+42     	; 0x14c4 <lcd_int16+0xf4>
    149a:	55 20       	and	r5, r5
    149c:	39 f0       	breq	.+14     	; 0x14ac <lcd_int16+0xdc>
        {
                sline[i++] = '-';
    149e:	11 e0       	ldi	r17, 0x01	; 1
    14a0:	1d 0d       	add	r17, r13
    14a2:	f7 01       	movw	r30, r14
    14a4:	ed 0d       	add	r30, r13
    14a6:	f1 1d       	adc	r31, r1
    14a8:	8d e2       	ldi	r24, 0x2D	; 45
    14aa:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
    14ac:	66 20       	and	r6, r6
    14ae:	41 f1       	breq	.+80     	; 0x1500 <lcd_int16+0x130>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    14b0:	81 2f       	mov	r24, r17
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	26 2d       	mov	r18, r6
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	82 17       	cp	r24, r18
    14ba:	93 07       	cpc	r25, r19
    14bc:	0c f5       	brge	.+66     	; 0x1500 <lcd_int16+0x130>
    14be:	71 2c       	mov	r7, r1
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
    14c0:	40 e2       	ldi	r20, 0x20	; 32
    14c2:	0c c0       	rjmp	.+24     	; 0x14dc <lcd_int16+0x10c>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
    14c4:	66 20       	and	r6, r6
    14c6:	a1 f0       	breq	.+40     	; 0x14f0 <lcd_int16+0x120>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    14c8:	81 2f       	mov	r24, r17
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	26 2d       	mov	r18, r6
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	2a 19       	sub	r18, r10
    14d2:	3b 09       	sbc	r19, r11
    14d4:	82 17       	cp	r24, r18
    14d6:	93 07       	cpc	r25, r19
    14d8:	5c f4       	brge	.+22     	; 0x14f0 <lcd_int16+0x120>
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
    14da:	40 e3       	ldi	r20, 0x30	; 48
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    14dc:	1f 5f       	subi	r17, 0xFF	; 255
    14de:	f7 01       	movw	r30, r14
    14e0:	e8 0f       	add	r30, r24
    14e2:	f9 1f       	adc	r31, r25
    14e4:	40 83       	st	Z, r20
    14e6:	81 2f       	mov	r24, r17
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	82 17       	cp	r24, r18
    14ec:	93 07       	cpc	r25, r19
    14ee:	b4 f3       	brlt	.-20     	; 0x14dc <lcd_int16+0x10c>
        }

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}
    14f0:	77 20       	and	r7, r7
    14f2:	31 f0       	breq	.+12     	; 0x1500 <lcd_int16+0x130>
    14f4:	f7 01       	movw	r30, r14
    14f6:	e1 0f       	add	r30, r17
    14f8:	f1 1d       	adc	r31, r1
    14fa:	8d e2       	ldi	r24, 0x2D	; 45
    14fc:	80 83       	st	Z, r24
    14fe:	1f 5f       	subi	r17, 0xFF	; 255

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    1500:	11 50       	subi	r17, 0x01	; 1
    1502:	f7 01       	movw	r30, r14
    1504:	e1 0f       	add	r30, r17
    1506:	f1 1d       	adc	r31, r1
    1508:	60 81       	ld	r22, Z
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	0e 94 88 07 	call	0xf10	; 0xf10 <send_lcd>
    1510:	95 ed       	ldi	r25, 0xD5	; 213
    1512:	9a 95       	dec	r25
    1514:	f1 f7       	brne	.-4      	; 0x1512 <lcd_int16+0x142>
    1516:	00 00       	nop
    1518:	11 11       	cpse	r17, r1
    151a:	f2 cf       	rjmp	.-28     	; 0x1500 <lcd_int16+0x130>
}
    151c:	61 96       	adiw	r28, 0x11	; 17
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	f8 94       	cli
    1522:	de bf       	out	0x3e, r29	; 62
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	cd bf       	out	0x3d, r28	; 61
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	1f 91       	pop	r17
    152e:	0f 91       	pop	r16
    1530:	ff 90       	pop	r15
    1532:	ef 90       	pop	r14
    1534:	df 90       	pop	r13
    1536:	cf 90       	pop	r12
    1538:	bf 90       	pop	r11
    153a:	af 90       	pop	r10
    153c:	9f 90       	pop	r9
    153e:	8f 90       	pop	r8
    1540:	7f 90       	pop	r7
    1542:	6f 90       	pop	r6
    1544:	5f 90       	pop	r5
    1546:	08 95       	ret
                  uint8_t decpos, 
                  uint8_t bSigned,
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
    1548:	d1 2c       	mov	r13, r1
    154a:	ce 01       	movw	r24, r28
    154c:	01 96       	adiw	r24, 0x01	; 1
    154e:	7c 01       	movw	r14, r24
    1550:	8f cf       	rjmp	.-226    	; 0x1470 <lcd_int16+0xa0>

00001552 <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
    1552:	1f 92       	push	r1
    1554:	0f 92       	push	r0
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	0f 92       	push	r0
    155a:	11 24       	eor	r1, r1
    155c:	0b b6       	in	r0, 0x3b	; 59
    155e:	0f 92       	push	r0
    1560:	2f 93       	push	r18
    1562:	3f 93       	push	r19
    1564:	8f 93       	push	r24
    1566:	9f 93       	push	r25
    1568:	af 93       	push	r26
    156a:	bf 93       	push	r27
    156c:	ef 93       	push	r30
    156e:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    1570:	e0 91 71 00 	lds	r30, 0x0071
    1574:	8e 2f       	mov	r24, r30
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	fc 01       	movw	r30, r24
    157a:	38 97       	sbiw	r30, 0x08	; 8
    157c:	e1 35       	cpi	r30, 0x51	; 81
    157e:	f1 05       	cpc	r31, r1
    1580:	b0 f0       	brcs	.+44     	; 0x15ae <__vector_33+0x5c>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
    1582:	80 91 71 00 	lds	r24, 0x0071
    1586:	80 93 b8 01 	sts	0x01B8, r24
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
    158a:	84 e0       	ldi	r24, 0x04	; 4
    158c:	80 93 74 00 	sts	0x0074, r24
  }//switch
}//TWI_isr
    1590:	ff 91       	pop	r31
    1592:	ef 91       	pop	r30
    1594:	bf 91       	pop	r27
    1596:	af 91       	pop	r26
    1598:	9f 91       	pop	r25
    159a:	8f 91       	pop	r24
    159c:	3f 91       	pop	r19
    159e:	2f 91       	pop	r18
    15a0:	0f 90       	pop	r0
    15a2:	0b be       	out	0x3b, r0	; 59
    15a4:	0f 90       	pop	r0
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	0f 90       	pop	r0
    15aa:	1f 90       	pop	r1
    15ac:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    15ae:	e2 5b       	subi	r30, 0xB2	; 178
    15b0:	ff 4f       	sbci	r31, 0xFF	; 255
    15b2:	0c 94 8d 0f 	jmp	0x1f1a	; 0x1f1a <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
    15b6:	80 91 53 01 	lds	r24, 0x0153
    15ba:	e0 91 b9 01 	lds	r30, 0x01B9
    15be:	f0 91 ba 01 	lds	r31, 0x01BA
    15c2:	e8 0f       	add	r30, r24
    15c4:	f1 1d       	adc	r31, r1
    15c6:	80 91 73 00 	lds	r24, 0x0073
    15ca:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
    15cc:	84 e9       	ldi	r24, 0x94	; 148
    15ce:	80 93 74 00 	sts	0x0074, r24
      break;      
    15d2:	de cf       	rjmp	.-68     	; 0x1590 <__vector_33+0x3e>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
    15d4:	80 91 bb 01 	lds	r24, 0x01BB
    15d8:	80 93 73 00 	sts	0x0073, r24
      twi_buf_ptr = 0;      //initalize buffer pointer 
    15dc:	10 92 53 01 	sts	0x0153, r1
      TWCR = TWCR_SEND;     //send SLA+RW
    15e0:	85 e8       	ldi	r24, 0x85	; 133
    15e2:	80 93 74 00 	sts	0x0074, r24
      break;
    15e6:	d4 cf       	rjmp	.-88     	; 0x1590 <__vector_33+0x3e>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
    15e8:	80 91 53 01 	lds	r24, 0x0153
    15ec:	90 91 bc 01 	lds	r25, 0x01BC
    15f0:	89 17       	cp	r24, r25
    15f2:	60 f7       	brcc	.-40     	; 0x15cc <__vector_33+0x7a>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
    15f4:	e0 91 b9 01 	lds	r30, 0x01B9
    15f8:	f0 91 ba 01 	lds	r31, 0x01BA
    15fc:	91 e0       	ldi	r25, 0x01	; 1
    15fe:	98 0f       	add	r25, r24
    1600:	90 93 53 01 	sts	0x0153, r25
    1604:	e8 0f       	add	r30, r24
    1606:	f1 1d       	adc	r31, r1
    1608:	80 81       	ld	r24, Z
    160a:	80 93 73 00 	sts	0x0073, r24
        TWCR = TWCR_SEND;               //send next byte 
    160e:	85 e8       	ldi	r24, 0x85	; 133
    1610:	80 93 74 00 	sts	0x0074, r24
    1614:	bd cf       	rjmp	.-134    	; 0x1590 <__vector_33+0x3e>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
    1616:	85 ea       	ldi	r24, 0xA5	; 165
    1618:	80 93 74 00 	sts	0x0074, r24
      break;
    161c:	b9 cf       	rjmp	.-142    	; 0x1590 <__vector_33+0x3e>
    161e:	20 91 53 01 	lds	r18, 0x0153
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    1622:	80 91 bc 01 	lds	r24, 0x01BC
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	01 97       	sbiw	r24, 0x01	; 1
    162c:	28 17       	cp	r18, r24
    162e:	39 07       	cpc	r19, r25
    1630:	dc f4       	brge	.+54     	; 0x1668 <__vector_33+0x116>
    1632:	85 ec       	ldi	r24, 0xC5	; 197
    1634:	80 93 74 00 	sts	0x0074, r24
    1638:	ab cf       	rjmp	.-170    	; 0x1590 <__vector_33+0x3e>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    163a:	e0 91 b9 01 	lds	r30, 0x01B9
    163e:	f0 91 ba 01 	lds	r31, 0x01BA
    1642:	80 91 53 01 	lds	r24, 0x0153
    1646:	21 e0       	ldi	r18, 0x01	; 1
    1648:	28 0f       	add	r18, r24
    164a:	20 93 53 01 	sts	0x0153, r18
    164e:	e8 0f       	add	r30, r24
    1650:	f1 1d       	adc	r31, r1
    1652:	80 91 73 00 	lds	r24, 0x0073
    1656:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    1658:	80 91 bc 01 	lds	r24, 0x01BC
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	01 97       	sbiw	r24, 0x01	; 1
    1662:	28 17       	cp	r18, r24
    1664:	39 07       	cpc	r19, r25
    1666:	2c f3       	brlt	.-54     	; 0x1632 <__vector_33+0xe0>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
    1668:	85 e8       	ldi	r24, 0x85	; 133
    166a:	80 93 74 00 	sts	0x0074, r24
    166e:	90 cf       	rjmp	.-224    	; 0x1590 <__vector_33+0x3e>

00001670 <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    1670:	80 91 74 00 	lds	r24, 0x0074
}
    1674:	81 70       	andi	r24, 0x01	; 1
    1676:	08 95       	ret

00001678 <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    1678:	90 91 74 00 	lds	r25, 0x0074
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
    167c:	90 fd       	sbrc	r25, 0
    167e:	fc cf       	rjmp	.-8      	; 0x1678 <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
    1680:	8e 7f       	andi	r24, 0xFE	; 254
    1682:	80 93 bb 01 	sts	0x01BB, r24
  twi_buf = twi_data;                   //load pointer to write buffer
    1686:	70 93 ba 01 	sts	0x01BA, r23
    168a:	60 93 b9 01 	sts	0x01B9, r22
  twi_msg_size = byte_cnt;              //load size of xfer 
    168e:	40 93 bc 01 	sts	0x01BC, r20
  TWCR = TWCR_START;                    //initiate START
    1692:	85 ea       	ldi	r24, 0xA5	; 165
    1694:	80 93 74 00 	sts	0x0074, r24
    1698:	08 95       	ret

0000169a <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    169a:	90 91 74 00 	lds	r25, 0x0074
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
    169e:	90 fd       	sbrc	r25, 0
    16a0:	fc cf       	rjmp	.-8      	; 0x169a <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
    16a2:	81 60       	ori	r24, 0x01	; 1
    16a4:	80 93 bb 01 	sts	0x01BB, r24
  twi_buf = twi_data;                  //load pointer to write buffer
    16a8:	70 93 ba 01 	sts	0x01BA, r23
    16ac:	60 93 b9 01 	sts	0x01B9, r22
  twi_msg_size = byte_cnt;             //load size of xfer 
    16b0:	40 93 bc 01 	sts	0x01BC, r20
  TWCR = TWCR_START;                   //initiate START
    16b4:	85 ea       	ldi	r24, 0xA5	; 165
    16b6:	80 93 74 00 	sts	0x0074, r24
    16ba:	08 95       	ret

000016bc <init_twi>:
//10K pullups are present on the board
//For the alarm clock an additional 4.7K resistor is also there for pullup
//******************************************************************************

void init_twi(){
  TWDR = 0xFF;     //release SDA, default contents
    16bc:	8f ef       	ldi	r24, 0xFF	; 255
    16be:	80 93 73 00 	sts	0x0073, r24
  TWSR = 0x00;     //prescaler value = 1
    16c2:	10 92 71 00 	sts	0x0071, r1
  TWBR = TWI_TWBR; //defined in twi_master.h 
    16c6:	8c e0       	ldi	r24, 0x0C	; 12
    16c8:	80 93 70 00 	sts	0x0070, r24
    16cc:	08 95       	ret

000016ce <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    16ce:	5d 9b       	sbis	0x0b, 5	; 11
    16d0:	fe cf       	rjmp	.-4      	; 0x16ce <uart_putc>
    UDR0 = data;    // Send data byte
    16d2:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    16d4:	5d 9b       	sbis	0x0b, 5	; 11
    16d6:	fe cf       	rjmp	.-4      	; 0x16d4 <uart_putc+0x6>
}
    16d8:	08 95       	ret

000016da <uart_puts>:

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    16da:	fc 01       	movw	r30, r24
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    16dc:	90 81       	ld	r25, Z
    16de:	99 23       	and	r25, r25
    16e0:	49 f0       	breq	.+18     	; 0x16f4 <uart_puts+0x1a>
    16e2:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    16e4:	5d 9b       	sbis	0x0b, 5	; 11
    16e6:	fe cf       	rjmp	.-4      	; 0x16e4 <uart_puts+0xa>
    UDR0 = data;    // Send data byte
    16e8:	9c b9       	out	0x0c, r25	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    16ea:	5d 9b       	sbis	0x0b, 5	; 11
    16ec:	fe cf       	rjmp	.-4      	; 0x16ea <uart_puts+0x10>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    16ee:	91 91       	ld	r25, Z+
    16f0:	91 11       	cpse	r25, r1
    16f2:	f8 cf       	rjmp	.-16     	; 0x16e4 <uart_puts+0xa>
    16f4:	08 95       	ret

000016f6 <uart_puts_p>:
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
    16f6:	9c 01       	movw	r18, r24
    16f8:	fc 01       	movw	r30, r24
    16fa:	44 91       	lpm	r20, Z
    16fc:	44 23       	and	r20, r20
    16fe:	69 f0       	breq	.+26     	; 0x171a <uart_puts_p+0x24>
        uart_putc(pgm_read_byte(str++));
    1700:	01 96       	adiw	r24, 0x01	; 1
    1702:	f9 01       	movw	r30, r18
    1704:	24 91       	lpm	r18, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1706:	5d 9b       	sbis	0x0b, 5	; 11
    1708:	fe cf       	rjmp	.-4      	; 0x1706 <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
    170a:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    170c:	5d 9b       	sbis	0x0b, 5	; 11
    170e:	fe cf       	rjmp	.-4      	; 0x170c <uart_puts_p+0x16>
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
    1710:	9c 01       	movw	r18, r24
    1712:	fc 01       	movw	r30, r24
    1714:	44 91       	lpm	r20, Z
    1716:	41 11       	cpse	r20, r1
    1718:	f3 cf       	rjmp	.-26     	; 0x1700 <uart_puts_p+0xa>
        uart_putc(pgm_read_byte(str++));
    }
}
    171a:	08 95       	ret

0000171c <uart_init>:
//Jumpers J14 and J16 (mega128.1) or Jumpers J7 and J9 (mega128.2)
//must be in place for the MAX232 chip to get data.

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); //INTERRUPTS ENABLED
    171c:	8a b1       	in	r24, 0x0a	; 10
    171e:	88 69       	ori	r24, 0x98	; 152
    1720:	8a b9       	out	0x0a, r24	; 10
//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);               //INTERRUPS DISABLED

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
    1722:	e5 e9       	ldi	r30, 0x95	; 149
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	86 60       	ori	r24, 0x06	; 6
    172a:	80 83       	st	Z, r24
  UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
    172c:	10 92 90 00 	sts	0x0090, r1
  UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
    1730:	87 e6       	ldi	r24, 0x67	; 103
    1732:	89 b9       	out	0x09, r24	; 9
    1734:	08 95       	ret

00001736 <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
    1736:	80 e8       	ldi	r24, 0x80	; 128
    1738:	9e e3       	ldi	r25, 0x3E	; 62
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <uart_getc+0xa>
    173c:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
    173e:	21 f0       	breq	.+8      	; 0x1748 <uart_getc+0x12>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
    1740:	5f 9b       	sbis	0x0b, 7	; 11
    1742:	fc cf       	rjmp	.-8      	; 0x173c <uart_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
    1744:	8c b1       	in	r24, 0x0c	; 12
    1746:	08 95       	ret
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
  timer++;
  if(timer >= 16000){ return(0);}
    1748:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
}
    174a:	08 95       	ret

0000174c <get_int_status>:
//
//TODO: update for interrupts
// 
uint8_t get_int_status(){

    si4734_wr_buf[0] = GET_INT_STATUS;              
    174c:	84 e1       	ldi	r24, 0x14	; 20
    174e:	80 93 5d 02 	sts	0x025D, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1); //send get_int_status command
    1752:	41 e0       	ldi	r20, 0x01	; 1
    1754:	6d e5       	ldi	r22, 0x5D	; 93
    1756:	72 e0       	ldi	r23, 0x02	; 2
    1758:	82 e2       	ldi	r24, 0x22	; 34
    175a:	0e 94 3c 0b 	call	0x1678	; 0x1678 <twi_start_wr>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
    175e:	0e 94 38 0b 	call	0x1670	; 0x1670 <twi_busy>
    1762:	81 11       	cpse	r24, r1
    1764:	fc cf       	rjmp	.-8      	; 0x175e <get_int_status+0x12>
    1766:	8f ea       	ldi	r24, 0xAF	; 175
    1768:	94 e0       	ldi	r25, 0x04	; 4
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	f1 f7       	brne	.-4      	; 0x176a <get_int_status+0x1e>
    176e:	00 c0       	rjmp	.+0      	; 0x1770 <get_int_status+0x24>
    1770:	00 00       	nop
    _delay_us(300);        //si4734 process delay
    twi_start_rd(SI4734_ADDRESS, si4734_rd_buf, 1); //get the interrupt status 
    1772:	41 e0       	ldi	r20, 0x01	; 1
    1774:	6f e7       	ldi	r22, 0x7F	; 127
    1776:	72 e0       	ldi	r23, 0x02	; 2
    1778:	82 e2       	ldi	r24, 0x22	; 34
    177a:	0e 94 4d 0b 	call	0x169a	; 0x169a <twi_start_rd>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
    177e:	0e 94 38 0b 	call	0x1670	; 0x1670 <twi_busy>
    1782:	81 11       	cpse	r24, r1
    1784:	fc cf       	rjmp	.-8      	; 0x177e <get_int_status+0x32>
    return(si4734_rd_buf[0]);
}
    1786:	80 91 7f 02 	lds	r24, 0x027F
    178a:	08 95       	ret

0000178c <fm_tune_freq>:
//
//takes current_fm_freq and sends it to the radio chip
//

void fm_tune_freq(){
  si4734_wr_buf[0] = 0x20;  //fm tune command
    178c:	ed e5       	ldi	r30, 0x5D	; 93
    178e:	f2 e0       	ldi	r31, 0x02	; 2
    1790:	80 e2       	ldi	r24, 0x20	; 32
    1792:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x00;  //no FREEZE and no FAST tune
    1794:	11 82       	std	Z+1, r1	; 0x01
  si4734_wr_buf[2] = (uint8_t)(current_fm_freq >> 8); //freq high byte
    1796:	80 91 0e 01 	lds	r24, 0x010E
    179a:	90 91 0f 01 	lds	r25, 0x010F
    179e:	92 83       	std	Z+2, r25	; 0x02
  si4734_wr_buf[3] = (uint8_t)(current_fm_freq);      //freq low byte
    17a0:	80 91 0e 01 	lds	r24, 0x010E
    17a4:	90 91 0f 01 	lds	r25, 0x010F
    17a8:	83 83       	std	Z+3, r24	; 0x03
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior
    17aa:	14 82       	std	Z+4, r1	; 0x04
  //send fm tune command
  STC_interrupt = FALSE;
    17ac:	10 92 7e 02 	sts	0x027E, r1
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 5);
    17b0:	45 e0       	ldi	r20, 0x05	; 5
    17b2:	bf 01       	movw	r22, r30
    17b4:	82 e2       	ldi	r24, 0x22	; 34
    17b6:	0c 94 3c 0b 	jmp	0x1678	; 0x1678 <twi_start_wr>

000017ba <am_tune_freq>:
//
//takes current_am_freq and sends it to the radio chip
//

void am_tune_freq(){
  si4734_wr_buf[0] = AM_TUNE_FREQ; //am tune command
    17ba:	80 e4       	ldi	r24, 0x40	; 64
    17bc:	80 93 5d 02 	sts	0x025D, r24
  si4734_wr_buf[1] = 0x00;         //no FAST tune
    17c0:	10 92 5e 02 	sts	0x025E, r1
  si4734_wr_buf[2] = (uint8_t)(current_am_freq >> 8); //freq high byte
    17c4:	80 91 68 01 	lds	r24, 0x0168
    17c8:	90 91 69 01 	lds	r25, 0x0169
    17cc:	90 93 5f 02 	sts	0x025F, r25
  si4734_wr_buf[3] = (uint8_t)(current_am_freq);      //freq low byte
    17d0:	80 93 60 02 	sts	0x0260, r24
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
    17d4:	10 92 61 02 	sts	0x0261, r1
  si4734_wr_buf[5] = 0x00;  //antenna tuning capactior low byte
    17d8:	10 92 62 02 	sts	0x0262, r1
  //send am tune command
  STC_interrupt = FALSE;
    17dc:	10 92 7e 02 	sts	0x027E, r1
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    17e0:	46 e0       	ldi	r20, 0x06	; 6
    17e2:	6d e5       	ldi	r22, 0x5D	; 93
    17e4:	72 e0       	ldi	r23, 0x02	; 2
    17e6:	82 e2       	ldi	r24, 0x22	; 34
    17e8:	0e 94 3c 0b 	call	0x1678	; 0x1678 <twi_start_wr>
  while( ! STC_interrupt ){}; //spin until the tune command finishes 
    17ec:	80 91 7e 02 	lds	r24, 0x027E
    17f0:	88 23       	and	r24, r24
    17f2:	e1 f3       	breq	.-8      	; 0x17ec <am_tune_freq+0x32>
}
    17f4:	08 95       	ret

000017f6 <sw_tune_freq>:
//
//takes current_sw_freq and sends it to the radio chip
//antcap low byte is 0x01 as per datasheet

void sw_tune_freq(){
  si4734_wr_buf[0] = 0x40;  //am tune command
    17f6:	ed e5       	ldi	r30, 0x5D	; 93
    17f8:	f2 e0       	ldi	r31, 0x02	; 2
    17fa:	80 e4       	ldi	r24, 0x40	; 64
    17fc:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x00;  //no FAST tune
    17fe:	11 82       	std	Z+1, r1	; 0x01
  si4734_wr_buf[2] = (uint8_t)(current_sw_freq >> 8); //freq high byte
    1800:	80 91 6a 01 	lds	r24, 0x016A
    1804:	90 91 6b 01 	lds	r25, 0x016B
    1808:	92 83       	std	Z+2, r25	; 0x02
  si4734_wr_buf[3] = (uint8_t)(current_sw_freq);      //freq low byte
    180a:	83 83       	std	Z+3, r24	; 0x03
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
    180c:	14 82       	std	Z+4, r1	; 0x04
  si4734_wr_buf[5] = 0x01;  //antenna tuning capactior low byte 
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	85 83       	std	Z+5, r24	; 0x05
  //send am tune command
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    1812:	46 e0       	ldi	r20, 0x06	; 6
    1814:	bf 01       	movw	r22, r30
    1816:	82 e2       	ldi	r24, 0x22	; 34
    1818:	0e 94 3c 0b 	call	0x1678	; 0x1678 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    181c:	2f ef       	ldi	r18, 0xFF	; 255
    181e:	87 ee       	ldi	r24, 0xE7	; 231
    1820:	93 e0       	ldi	r25, 0x03	; 3
    1822:	21 50       	subi	r18, 0x01	; 1
    1824:	80 40       	sbci	r24, 0x00	; 0
    1826:	90 40       	sbci	r25, 0x00	; 0
    1828:	e1 f7       	brne	.-8      	; 0x1822 <sw_tune_freq+0x2c>
    182a:	00 c0       	rjmp	.+0      	; 0x182c <sw_tune_freq+0x36>
    182c:	00 00       	nop
    182e:	08 95       	ret

00001830 <radio_pwr_dwn>:
}//switch      
*/
  //eeprom_write_byte(&eeprom_volume, current_volume); //save current volume level

//send fm power down command
    si4734_wr_buf[0] = 0x11;
    1830:	81 e1       	ldi	r24, 0x11	; 17
    1832:	80 93 5d 02 	sts	0x025D, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1);
    1836:	41 e0       	ldi	r20, 0x01	; 1
    1838:	6d e5       	ldi	r22, 0x5D	; 93
    183a:	72 e0       	ldi	r23, 0x02	; 2
    183c:	82 e2       	ldi	r24, 0x22	; 34
    183e:	0e 94 3c 0b 	call	0x1678	; 0x1678 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1842:	87 ed       	ldi	r24, 0xD7	; 215
    1844:	94 e0       	ldi	r25, 0x04	; 4
    1846:	01 97       	sbiw	r24, 0x01	; 1
    1848:	f1 f7       	brne	.-4      	; 0x1846 <radio_pwr_dwn+0x16>
    184a:	00 c0       	rjmp	.+0      	; 0x184c <radio_pwr_dwn+0x1c>
    184c:	00 00       	nop
    184e:	08 95       	ret

00001850 <fm_rsq_status>:
//inside the chip. 
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_rsq_status(){

    si4734_wr_buf[0] = FM_RSQ_STATUS;            //fm_rsq_status command
    1850:	83 e2       	ldi	r24, 0x23	; 35
    1852:	80 93 5d 02 	sts	0x025D, r24
    si4734_wr_buf[1] = FM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	80 93 5e 02 	sts	0x025E, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    185c:	42 e0       	ldi	r20, 0x02	; 2
    185e:	6d e5       	ldi	r22, 0x5D	; 93
    1860:	72 e0       	ldi	r23, 0x02	; 2
    1862:	82 e2       	ldi	r24, 0x22	; 34
    1864:	0e 94 3c 0b 	call	0x1678	; 0x1678 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    1868:	0e 94 38 0b 	call	0x1670	; 0x1670 <twi_busy>
    186c:	81 11       	cpse	r24, r1
    186e:	fc cf       	rjmp	.-8      	; 0x1868 <fm_rsq_status+0x18>
    1870:	8f ea       	ldi	r24, 0xAF	; 175
    1872:	94 e0       	ldi	r25, 0x04	; 4
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	f1 f7       	brne	.-4      	; 0x1874 <fm_rsq_status+0x24>
    1878:	00 c0       	rjmp	.+0      	; 0x187a <fm_rsq_status+0x2a>
    187a:	00 00       	nop
    _delay_us(300);      //delay for si4734 to process
    //This is a blind wait. Waiting for CTS interrupt here would tell you 
    //when the command is received and has been processed.
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    187c:	48 e0       	ldi	r20, 0x08	; 8
    187e:	66 e6       	ldi	r22, 0x66	; 102
    1880:	72 e0       	ldi	r23, 0x02	; 2
    1882:	82 e2       	ldi	r24, 0x22	; 34
    1884:	0e 94 4d 0b 	call	0x169a	; 0x169a <twi_start_rd>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    1888:	0e 94 38 0b 	call	0x1670	; 0x1670 <twi_busy>
    188c:	81 11       	cpse	r24, r1
    188e:	fc cf       	rjmp	.-8      	; 0x1888 <fm_rsq_status+0x38>
}
    1890:	08 95       	ret

00001892 <fm_tune_status>:
//is cleared.
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_tune_status(){

    si4734_wr_buf[0] = FM_TUNE_STATUS;            //fm_tune_status command
    1892:	82 e2       	ldi	r24, 0x22	; 34
    1894:	80 93 5d 02 	sts	0x025D, r24
    si4734_wr_buf[1] = FM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	80 93 5e 02 	sts	0x025E, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    189e:	42 e0       	ldi	r20, 0x02	; 2
    18a0:	6d e5       	ldi	r22, 0x5D	; 93
    18a2:	72 e0       	ldi	r23, 0x02	; 2
    18a4:	82 e2       	ldi	r24, 0x22	; 34
    18a6:	0e 94 3c 0b 	call	0x1678	; 0x1678 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    18aa:	0e 94 38 0b 	call	0x1670	; 0x1670 <twi_busy>
    18ae:	81 11       	cpse	r24, r1
    18b0:	fc cf       	rjmp	.-8      	; 0x18aa <fm_tune_status+0x18>
    18b2:	8f ea       	ldi	r24, 0xAF	; 175
    18b4:	94 e0       	ldi	r25, 0x04	; 4
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	f1 f7       	brne	.-4      	; 0x18b6 <fm_tune_status+0x24>
    18ba:	00 c0       	rjmp	.+0      	; 0x18bc <fm_tune_status+0x2a>
    18bc:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    18be:	48 e0       	ldi	r20, 0x08	; 8
    18c0:	66 e6       	ldi	r22, 0x66	; 102
    18c2:	72 e0       	ldi	r23, 0x02	; 2
    18c4:	82 e2       	ldi	r24, 0x22	; 34
    18c6:	0e 94 4d 0b 	call	0x169a	; 0x169a <twi_start_rd>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
    18ca:	0e 94 38 0b 	call	0x1670	; 0x1670 <twi_busy>
    18ce:	81 11       	cpse	r24, r1
    18d0:	fc cf       	rjmp	.-8      	; 0x18ca <fm_tune_status+0x38>
}
    18d2:	08 95       	ret

000018d4 <am_tune_status>:
//TODO: could probably just have one tune_status() function
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_tune_status(){

    si4734_wr_buf[0] = AM_TUNE_STATUS;            //fm_tune_status command
    18d4:	82 e4       	ldi	r24, 0x42	; 66
    18d6:	80 93 5d 02 	sts	0x025D, r24
    si4734_wr_buf[1] = AM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	80 93 5e 02 	sts	0x025E, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    18e0:	42 e0       	ldi	r20, 0x02	; 2
    18e2:	6d e5       	ldi	r22, 0x5D	; 93
    18e4:	72 e0       	ldi	r23, 0x02	; 2
    18e6:	82 e2       	ldi	r24, 0x22	; 34
    18e8:	0e 94 3c 0b 	call	0x1678	; 0x1678 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    18ec:	0e 94 38 0b 	call	0x1670	; 0x1670 <twi_busy>
    18f0:	81 11       	cpse	r24, r1
    18f2:	fc cf       	rjmp	.-8      	; 0x18ec <am_tune_status+0x18>
    18f4:	8f ea       	ldi	r24, 0xAF	; 175
    18f6:	94 e0       	ldi	r25, 0x04	; 4
    18f8:	01 97       	sbiw	r24, 0x01	; 1
    18fa:	f1 f7       	brne	.-4      	; 0x18f8 <am_tune_status+0x24>
    18fc:	00 c0       	rjmp	.+0      	; 0x18fe <am_tune_status+0x2a>
    18fe:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the am tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    1900:	48 e0       	ldi	r20, 0x08	; 8
    1902:	66 e6       	ldi	r22, 0x66	; 102
    1904:	72 e0       	ldi	r23, 0x02	; 2
    1906:	82 e2       	ldi	r24, 0x22	; 34
    1908:	0c 94 4d 0b 	jmp	0x169a	; 0x169a <twi_start_rd>

0000190c <am_rsq_status>:
//
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_rsq_status(){

    si4734_wr_buf[0] = AM_RSQ_STATUS;            //am_rsq_status command
    190c:	83 e4       	ldi	r24, 0x43	; 67
    190e:	80 93 5d 02 	sts	0x025D, r24
    si4734_wr_buf[1] = AM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	80 93 5e 02 	sts	0x025E, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    1918:	42 e0       	ldi	r20, 0x02	; 2
    191a:	6d e5       	ldi	r22, 0x5D	; 93
    191c:	72 e0       	ldi	r23, 0x02	; 2
    191e:	82 e2       	ldi	r24, 0x22	; 34
    1920:	0e 94 3c 0b 	call	0x1678	; 0x1678 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    1924:	0e 94 38 0b 	call	0x1670	; 0x1670 <twi_busy>
    1928:	81 11       	cpse	r24, r1
    192a:	fc cf       	rjmp	.-8      	; 0x1924 <am_rsq_status+0x18>
    192c:	8f ea       	ldi	r24, 0xAF	; 175
    192e:	94 e0       	ldi	r25, 0x04	; 4
    1930:	01 97       	sbiw	r24, 0x01	; 1
    1932:	f1 f7       	brne	.-4      	; 0x1930 <am_rsq_status+0x24>
    1934:	00 c0       	rjmp	.+0      	; 0x1936 <am_rsq_status+0x2a>
    1936:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    1938:	48 e0       	ldi	r20, 0x08	; 8
    193a:	66 e6       	ldi	r22, 0x66	; 102
    193c:	72 e0       	ldi	r23, 0x02	; 2
    193e:	82 e2       	ldi	r24, 0x22	; 34
    1940:	0c 94 4d 0b 	jmp	0x169a	; 0x169a <twi_start_rd>

00001944 <set_property>:
//The set property command does not have a indication that it has completed. This
//command is guarnteed by design to finish in 10ms. 
//
void set_property(uint16_t property, uint16_t property_value){

    si4734_wr_buf[0] = SET_PROPERTY;                   //set property command
    1944:	ed e5       	ldi	r30, 0x5D	; 93
    1946:	f2 e0       	ldi	r31, 0x02	; 2
    1948:	22 e1       	ldi	r18, 0x12	; 18
    194a:	20 83       	st	Z, r18
    si4734_wr_buf[1] = 0x00;                           //all zeros
    194c:	11 82       	std	Z+1, r1	; 0x01
    si4734_wr_buf[2] = (uint8_t)(property >> 8);       //property high byte
    194e:	92 83       	std	Z+2, r25	; 0x02
    si4734_wr_buf[3] = (uint8_t)(property);            //property low byte
    1950:	83 83       	std	Z+3, r24	; 0x03
    si4734_wr_buf[4] = (uint8_t)(property_value >> 8); //property value high byte
    1952:	74 83       	std	Z+4, r23	; 0x04
    si4734_wr_buf[5] = (uint8_t)(property_value);      //property value low byte
    1954:	65 83       	std	Z+5, r22	; 0x05
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    1956:	46 e0       	ldi	r20, 0x06	; 6
    1958:	bf 01       	movw	r22, r30
    195a:	82 e2       	ldi	r24, 0x22	; 34
    195c:	0e 94 3c 0b 	call	0x1678	; 0x1678 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1960:	8f e3       	ldi	r24, 0x3F	; 63
    1962:	9c e9       	ldi	r25, 0x9C	; 156
    1964:	01 97       	sbiw	r24, 0x01	; 1
    1966:	f1 f7       	brne	.-4      	; 0x1964 <set_property+0x20>
    1968:	00 c0       	rjmp	.+0      	; 0x196a <set_property+0x26>
    196a:	00 00       	nop
    196c:	08 95       	ret

0000196e <fm_pwr_up>:
//restore the previous fm frequency  
// current_fm_freq = eeprom_read_word(&eeprom_fm_freq); //TODO: only this one does not work 
// current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 

//send fm power up command
  si4734_wr_buf[0] = FM_PWR_UP; //powerup command byte
    196e:	ed e5       	ldi	r30, 0x5D	; 93
    1970:	f2 e0       	ldi	r31, 0x02	; 2
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x50;      //GPO2O enabled, STCINT enabled, use ext. 32khz osc.
    1976:	80 e5       	ldi	r24, 0x50	; 80
    1978:	81 83       	std	Z+1, r24	; 0x01
  si4734_wr_buf[2] = 0x05;      //OPMODE = 0x05; analog audio output
    197a:	85 e0       	ldi	r24, 0x05	; 5
    197c:	82 83       	std	Z+2, r24	; 0x02
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    197e:	43 e0       	ldi	r20, 0x03	; 3
    1980:	bf 01       	movw	r22, r30
    1982:	82 e2       	ldi	r24, 0x22	; 34
    1984:	0e 94 3c 0b 	call	0x1678	; 0x1678 <twi_start_wr>
    1988:	2f ef       	ldi	r18, 0xFF	; 255
    198a:	8b ed       	ldi	r24, 0xDB	; 219
    198c:	95 e0       	ldi	r25, 0x05	; 5
    198e:	21 50       	subi	r18, 0x01	; 1
    1990:	80 40       	sbci	r24, 0x00	; 0
    1992:	90 40       	sbci	r25, 0x00	; 0
    1994:	e1 f7       	brne	.-8      	; 0x198e <fm_pwr_up+0x20>
    1996:	00 c0       	rjmp	.+0      	; 0x1998 <fm_pwr_up+0x2a>
    1998:	00 00       	nop
  _delay_ms(120);               //startup delay as specified 
  //The seek/tune interrupt is enabled here. If the STCINT bit is set, a 1.5us
  //low pulse will be output from GPIO2/INT when tune or seek is completed.
  set_property(GPO_IEN, GPO_IEN_STCIEN); //seek_tune complete interrupt
    199a:	61 e0       	ldi	r22, 0x01	; 1
    199c:	70 e0       	ldi	r23, 0x00	; 0
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <set_property>

000019a6 <am_pwr_up>:
//restore the previous am frequency  
//  current_am_freq = eeprom_read_word(&eeprom_am_freq);
//  current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 

//send am power up command
  si4734_wr_buf[0] = AM_PWR_UP;
    19a6:	ed e5       	ldi	r30, 0x5D	; 93
    19a8:	f2 e0       	ldi	r31, 0x02	; 2
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x51;//GPO2OEN and XOSCEN selected
    19ae:	81 e5       	ldi	r24, 0x51	; 81
    19b0:	81 83       	std	Z+1, r24	; 0x01
  si4734_wr_buf[2] = 0x05;
    19b2:	85 e0       	ldi	r24, 0x05	; 5
    19b4:	82 83       	std	Z+2, r24	; 0x02
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    19b6:	43 e0       	ldi	r20, 0x03	; 3
    19b8:	bf 01       	movw	r22, r30
    19ba:	82 e2       	ldi	r24, 0x22	; 34
    19bc:	0e 94 3c 0b 	call	0x1678	; 0x1678 <twi_start_wr>
    19c0:	2f ef       	ldi	r18, 0xFF	; 255
    19c2:	8b ed       	ldi	r24, 0xDB	; 219
    19c4:	95 e0       	ldi	r25, 0x05	; 5
    19c6:	21 50       	subi	r18, 0x01	; 1
    19c8:	80 40       	sbci	r24, 0x00	; 0
    19ca:	90 40       	sbci	r25, 0x00	; 0
    19cc:	e1 f7       	brne	.-8      	; 0x19c6 <am_pwr_up+0x20>
    19ce:	00 c0       	rjmp	.+0      	; 0x19d0 <am_pwr_up+0x2a>
    19d0:	00 00       	nop
  _delay_ms(120);   
  set_property(GPO_IEN, GPO_IEN_STCIEN);    //Seek/Tune Complete interrupt
    19d2:	61 e0       	ldi	r22, 0x01	; 1
    19d4:	70 e0       	ldi	r23, 0x00	; 0
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <set_property>

000019de <sw_pwr_up>:
    19de:	ed e5       	ldi	r30, 0x5D	; 93
    19e0:	f2 e0       	ldi	r31, 0x02	; 2
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	80 83       	st	Z, r24
    19e6:	81 e5       	ldi	r24, 0x51	; 81
    19e8:	81 83       	std	Z+1, r24	; 0x01
    19ea:	85 e0       	ldi	r24, 0x05	; 5
    19ec:	82 83       	std	Z+2, r24	; 0x02
    19ee:	43 e0       	ldi	r20, 0x03	; 3
    19f0:	bf 01       	movw	r22, r30
    19f2:	82 e2       	ldi	r24, 0x22	; 34
    19f4:	0e 94 3c 0b 	call	0x1678	; 0x1678 <twi_start_wr>
    19f8:	2f ef       	ldi	r18, 0xFF	; 255
    19fa:	8b ed       	ldi	r24, 0xDB	; 219
    19fc:	95 e0       	ldi	r25, 0x05	; 5
    19fe:	21 50       	subi	r18, 0x01	; 1
    1a00:	80 40       	sbci	r24, 0x00	; 0
    1a02:	90 40       	sbci	r25, 0x00	; 0
    1a04:	e1 f7       	brne	.-8      	; 0x19fe <sw_pwr_up+0x20>
    1a06:	00 c0       	rjmp	.+0      	; 0x1a08 <sw_pwr_up+0x2a>
    1a08:	00 00       	nop
    1a0a:	60 e0       	ldi	r22, 0x00	; 0
    1a0c:	70 e0       	ldi	r23, 0x00	; 0
    1a0e:	82 e0       	ldi	r24, 0x02	; 2
    1a10:	93 e3       	ldi	r25, 0x33	; 51
    1a12:	0e 94 a2 0c 	call	0x1944	; 0x1944 <set_property>
    1a16:	61 e0       	ldi	r22, 0x01	; 1
    1a18:	71 e0       	ldi	r23, 0x01	; 1
    1a1a:	82 e0       	ldi	r24, 0x02	; 2
    1a1c:	91 e3       	ldi	r25, 0x31	; 49
    1a1e:	0e 94 a2 0c 	call	0x1944	; 0x1944 <set_property>
    1a22:	61 e0       	ldi	r22, 0x01	; 1
    1a24:	70 e0       	ldi	r23, 0x00	; 0
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <set_property>

00001a2e <main>:
                        break;
        }//switch case

}
int main()
{
    1a2e:	cf 93       	push	r28
    1a30:	df 93       	push	r29
    1a32:	00 d0       	rcall	.+0      	; 0x1a34 <main+0x6>
    1a34:	1f 92       	push	r1
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
  	spi_init();
    1a3a:	0e 94 cc 00 	call	0x198	; 0x198 <spi_init>
	
	init_twi();
    1a3e:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <init_twi>

        DDRF |= (1 << PF1);
    1a42:	80 91 61 00 	lds	r24, 0x0061
    1a46:	82 60       	ori	r24, 0x02	; 2
    1a48:	80 93 61 00 	sts	0x0061, r24
	asm("nop");
    1a4c:	00 00       	nop
	asm("nop");
    1a4e:	00 00       	nop
        PORTF |= (0 << PF1);
    1a50:	80 91 62 00 	lds	r24, 0x0062
    1a54:	80 93 62 00 	sts	0x0062, r24
	asm("nop");
    1a58:	00 00       	nop
	asm("nop");
    1a5a:	00 00       	nop
        //Setup audio output (max)
        DDRE  |= (1 << PE3);
    1a5c:	13 9a       	sbi	0x02, 3	; 2
	asm("nop");
    1a5e:	00 00       	nop
	asm("nop");
    1a60:	00 00       	nop
        PORTE |= (1 << PE3);
    1a62:	1b 9a       	sbi	0x03, 3	; 3
	asm("nop");
    1a64:	00 00       	nop
        EICRB |= (1<<ISC71) | (1<ISC70);
    1a66:	8a b7       	in	r24, 0x3a	; 58
    1a68:	81 68       	ori	r24, 0x81	; 129
    1a6a:	8a bf       	out	0x3a, r24	; 58
        EIMSK |= (1<<INT7);
    1a6c:	89 b7       	in	r24, 0x39	; 57
    1a6e:	80 68       	ori	r24, 0x80	; 128
    1a70:	89 bf       	out	0x39, r24	; 57
	sei();
    1a72:	78 94       	sei
	int v = 0;
        for(v = 0; v < 1; v++){


                DDRE  |= (1 << PE2); //Port E bit 2 is active high reset for radio
    1a74:	12 9a       	sbi	0x02, 2	; 2
		asm("nop");
    1a76:	00 00       	nop
		asm("nop");
    1a78:	00 00       	nop
                PORTE |= (1 << PE2); //radio reset is on at powerup (active high)
    1a7a:	1a 9a       	sbi	0x03, 2	; 3
		asm("nop");
    1a7c:	00 00       	nop
		asm("nop");
    1a7e:	00 00       	nop
                //hardware reset of Si4734
                PORTE &= ~(1<<PE7); //int2 initially low to sense TWI mode
    1a80:	1f 98       	cbi	0x03, 7	; 3
		asm("nop");
    1a82:	00 00       	nop
		asm("nop");
    1a84:	00 00       	nop
                DDRE  |= 0x80;      //turn on Port E bit 7 to drive it low
    1a86:	17 9a       	sbi	0x02, 7	; 2
		asm("nop");
    1a88:	00 00       	nop
		asm("nop");
    1a8a:	00 00       	nop
                PORTE |=  (1<<PE2); //hardware reset Si4734
    1a8c:	1a 9a       	sbi	0x03, 2	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a8e:	8f e1       	ldi	r24, 0x1F	; 31
    1a90:	93 e0       	ldi	r25, 0x03	; 3
    1a92:	01 97       	sbiw	r24, 0x01	; 1
    1a94:	f1 f7       	brne	.-4      	; 0x1a92 <main+0x64>
    1a96:	00 c0       	rjmp	.+0      	; 0x1a98 <main+0x6a>
    1a98:	00 00       	nop
                _delay_us(200);     //hold for 200us, 100us by spec
                PORTE &= ~(1<<PE2); //release reset
    1a9a:	1a 98       	cbi	0x03, 2	; 3
    1a9c:	90 ea       	ldi	r25, 0xA0	; 160
    1a9e:	9a 95       	dec	r25
    1aa0:	f1 f7       	brne	.-4      	; 0x1a9e <main+0x70>
                _delay_us(30);      //5us required because of my slow I2C translators I suspect
                //Si code in "low" has 30us delay...no explaination
                DDRE  &= ~(0x80);   //now Port E bit 7 becomes input from the radio interrupt
    1aa2:	17 98       	cbi	0x02, 7	; 2
	
                fm_pwr_up(); //powerup the radio as appropriate
    1aa4:	0e 94 b7 0c 	call	0x196e	; 0x196e <fm_pwr_up>
//***********************************************************************
//This function sends data via the MOSI port of the SPI 
//The data is sent to the bargraph
void spi_write(uint8_t display_count)
{
        SPDR = display_count;//send display_count to the display 
    1aa8:	8f ef       	ldi	r24, 0xFF	; 255
    1aaa:	8f b9       	out	0x0f, r24	; 15
        while (bit_is_clear(SPSR,SPIF)){} //spin till SPI data has been sent 
    1aac:	77 9b       	sbis	0x0e, 7	; 14
    1aae:	fe cf       	rjmp	.-4      	; 0x1aac <main+0x7e>

        PORTB |= 0b00000001; //Rising edge on PORTB0 (SRCLK of the  bargraph)
    1ab0:	c0 9a       	sbi	0x18, 0	; 24
        PORTB &= 0b11111110;  //falling edge on PORTB0 (SRCLK of the bargraph)
    1ab2:	c0 98       	cbi	0x18, 0	; 24
//***********************************************************************
//Init PWM for brightness control
void TIM2_PWM_init(void)
{
    /* Timer clock = I/O clock */    
    TCCR2 = 0x69; 
    1ab4:	89 e6       	ldi	r24, 0x69	; 105
    1ab6:	85 bd       	out	0x25, r24	; 37
    /* Set the compare value to control duty cycle */    
    OCR2  = 0x80;    
    1ab8:	80 e8       	ldi	r24, 0x80	; 128
    1aba:	83 bd       	out	0x23, r24	; 35
    /* Set OC2A pin as output */
    DDRB |= 0b10000000;
    1abc:	bf 9a       	sbi	0x17, 7	; 23

        }

	spi_write(0xFF);
	TIM2_PWM_init(); 
	TIM0_RTC_init();
    1abe:	0e 94 78 01 	call	0x2f0	; 0x2f0 <TIM0_RTC_init>
//                     TIM1_init()
//***********************************************************************
//Initialize timer 1 ISR 
void TIM1_init()
{
  	TCCR1A = 0x00;                  //Normal mode operation
    1ac2:	1f bc       	out	0x2f, r1	; 47
  	TCCR1B = (1<<WGM12) | (1<<CS10) | (1<<CS11);   //use OCR1A as source for TOP, use clk/1024
    1ac4:	8b e0       	ldi	r24, 0x0B	; 11
    1ac6:	8e bd       	out	0x2e, r24	; 46
  	TCCR1C = 0x00;                          //no forced compare 
    1ac8:	10 92 7a 00 	sts	0x007A, r1
  	OCR1A = 0x0269; //top value
    1acc:	89 e6       	ldi	r24, 0x69	; 105
    1ace:	92 e0       	ldi	r25, 0x02	; 2
    1ad0:	9b bd       	out	0x2b, r25	; 43
    1ad2:	8a bd       	out	0x2a, r24	; 42
  	TIMSK |= (1<<OCIE1A); //enable interrupt
    1ad4:	87 b7       	in	r24, 0x37	; 55
    1ad6:	80 61       	ori	r24, 0x10	; 16
    1ad8:	87 bf       	out	0x37, r24	; 55

  	DDRD |= (1<<PORTD2); // Port D bit 2 output
    1ada:	8a 9a       	sbi	0x11, 2	; 17
  	PORTD |= (0<<PD2); //high state
    1adc:	82 b3       	in	r24, 0x12	; 18
    1ade:	82 bb       	out	0x12, r24	; 18
//                     void TIM3_PWM_init()
//***********************************************************************
//Initialize PWM for volume control
void TIM3_PWM_init()
{
	DDRE |= (1<<PE3); //PORTE pin 3 as output
    1ae0:	13 9a       	sbi	0x02, 3	; 2
	OCR3A = 0x00; //50% duty cycle
    1ae2:	10 92 87 00 	sts	0x0087, r1
    1ae6:	10 92 86 00 	sts	0x0086, r1
	TCCR3A = (1<<COM3A1) | (1<<COM3A0) | (1<<WGM31) | (1<<WGM30); //Fast PWM 10bit 
    1aea:	83 ec       	ldi	r24, 0xC3	; 195
    1aec:	80 93 8b 00 	sts	0x008B, r24
	TCCR3B = (1<<WGM32) | (1<<CS30); //Set OC3A on compare match
    1af0:	89 e0       	ldi	r24, 0x09	; 9
    1af2:	80 93 8a 00 	sts	0x008A, r24
	TIM2_PWM_init(); 
	TIM0_RTC_init();
	TIM1_init();
	TIM3_PWM_init();
	//spi_write(0x00);
	LCD_start_up();
    1af6:	0e 94 21 07 	call	0xe42	; 0xe42 <LCD_start_up>
//***********************************************************************
//This function sends data via the MOSI port of the SPI 
//The data is sent to the bargraph
void spi_write(uint8_t display_count)
{
        SPDR = display_count;//send display_count to the display 
    1afa:	1f b8       	out	0x0f, r1	; 15
        while (bit_is_clear(SPSR,SPIF)){} //spin till SPI data has been sent 
    1afc:	77 9b       	sbis	0x0e, 7	; 14
    1afe:	fe cf       	rjmp	.-4      	; 0x1afc <main+0xce>

        PORTB |= 0b00000001; //Rising edge on PORTB0 (SRCLK of the  bargraph)
    1b00:	c0 9a       	sbi	0x18, 0	; 24
        PORTB &= 0b11111110;  //falling edge on PORTB0 (SRCLK of the bargraph)
    1b02:	c0 98       	cbi	0x18, 0	; 24
//***********************************************************************
//Initialize ADC for reading the brightness level from photocell
void ADC_init()
{
  //Initalize ADC and its ports
  	DDRF  &= ~(_BV(DDF7)); //make port F bit 7 is ADC input  
    1b04:	80 91 61 00 	lds	r24, 0x0061
    1b08:	8f 77       	andi	r24, 0x7F	; 127
    1b0a:	80 93 61 00 	sts	0x0061, r24
  	PORTF &= ~(_BV(PF7));  //port F bit 7 pullups must be off
    1b0e:	80 91 62 00 	lds	r24, 0x0062
    1b12:	8f 77       	andi	r24, 0x7F	; 127
    1b14:	80 93 62 00 	sts	0x0062, r24
  	ADMUX = 0x47; //writes 00111 to ADMUX (4:0) for single-ended, input PORTF bit 7, right adjusted, 10 bits
    1b18:	87 e4       	ldi	r24, 0x47	; 71
    1b1a:	87 b9       	out	0x07, r24	; 7
  	ADCSRA |= (1<<ADEN) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
    1b1c:	86 b1       	in	r24, 0x06	; 6
    1b1e:	8f 68       	ori	r24, 0x8F	; 143
    1b20:	86 b9       	out	0x06, r24	; 6
	TIM3_PWM_init();
	//spi_write(0x00);
	LCD_start_up();
	spi_write(0x00); //Bar graph reset
	ADC_init();
	uart_init();
    1b22:	0e 94 8e 0b 	call	0x171c	; 0x171c <uart_init>
//	init_twi(); 

	lm73_wr_buf[0] = LM73_PTR_TEMP;
    1b26:	10 92 b4 01 	sts	0x01B4, r1
	twi_start_wr(LM73_ADDRESS,lm73_wr_buf,1); //start the TWI write process
    1b2a:	41 e0       	ldi	r20, 0x01	; 1
    1b2c:	64 eb       	ldi	r22, 0xB4	; 180
    1b2e:	71 e0       	ldi	r23, 0x01	; 1
    1b30:	80 e9       	ldi	r24, 0x90	; 144
    1b32:	0e 94 3c 0b 	call	0x1678	; 0x1678 <twi_start_wr>
	ADCSRA |= (1<<ADSC); //Start next ADC conversion
    1b36:	36 9a       	sbi	0x06, 6	; 6
//                     void InitLEDdisplay()
//***********************************************************************
//This function initializes the IO to use the 4Digit LED display
void InitLEDdisplay()
{
  	DDRA = 0xFF; //Set PORTA to all output
    1b38:	44 24       	eor	r4, r4
    1b3a:	4a 94       	dec	r4
	//	current_fm_freq = Encoder1_handling(spi_read(),current_fm_freq);

		if(chk_buttons(7)) //Button 0 controls the clock setting
		{	if(set_clock_ena == 1)
				TIM0_RTC_init();
			set_clock_ena = !set_clock_ena; //!set_clock_ena;
    1b3c:	55 24       	eor	r5, r5
    1b3e:	53 94       	inc	r5
//***********************************************************************
//Change the PWM duty cycle for volume control
void TIM3_set_PWM()
{
	uint16_t conversion = (duty_cycle*10.23); // duty*1023/100 = duty*10.23 
	OCR3A = 1023 - conversion; //set the duty cycle value
    1b40:	66 24       	eor	r6, r6
    1b42:	6a 94       	dec	r6
    1b44:	b3 e0       	ldi	r27, 0x03	; 3
    1b46:	7b 2e       	mov	r7, r27
//                     void InitLEDdisplay()
//***********************************************************************
//This function initializes the IO to use the 4Digit LED display
void InitLEDdisplay()
{
  	DDRA = 0xFF; //Set PORTA to all output
    1b48:	33 24       	eor	r3, r3
    1b4a:	3a 94       	dec	r3
	//	current_fm_freq = Encoder1_handling(spi_read(),current_fm_freq);

		if(chk_buttons(7)) //Button 0 controls the clock setting
		{	if(set_clock_ena == 1)
				TIM0_RTC_init();
			set_clock_ena = !set_clock_ena; //!set_clock_ena;
    1b4c:	22 24       	eor	r2, r2
    1b4e:	23 94       	inc	r2
    1b50:	bd c0       	rjmp	.+378    	; 0x1ccc <main+0x29e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b52:	8f e9       	ldi	r24, 0x9F	; 159
    1b54:	9f e0       	ldi	r25, 0x0F	; 15
    1b56:	01 97       	sbiw	r24, 0x01	; 1
    1b58:	f1 f7       	brne	.-4      	; 0x1b56 <main+0x128>
    1b5a:	00 c0       	rjmp	.+0      	; 0x1b5c <main+0x12e>
    1b5c:	00 00       	nop
//Checks the state of the button number passed to it. 
//It calls the debounce switch function for each pin of port A
int chk_buttons(uint8_t PinNumber)
{
  	static uint16_t state[8] ={0}; //holds present state
  	state[PinNumber] = (state[PinNumber] << 1) | (! bit_is_clear(PINA, PinNumber)) | 0xE000;
    1b5e:	29 b3       	in	r18, 0x19	; 25
    1b60:	80 91 4e 01 	lds	r24, 0x014E
    1b64:	90 91 4f 01 	lds	r25, 0x014F
    1b68:	88 0f       	add	r24, r24
    1b6a:	99 1f       	adc	r25, r25
    1b6c:	90 6e       	ori	r25, 0xE0	; 224
    1b6e:	26 fb       	bst	r18, 6
    1b70:	22 27       	eor	r18, r18
    1b72:	20 f9       	bld	r18, 0
    1b74:	2a 83       	std	Y+2, r18	; 0x02
    1b76:	1b 82       	std	Y+3, r1	; 0x03
    1b78:	2a 81       	ldd	r18, Y+2	; 0x02
    1b7a:	3b 81       	ldd	r19, Y+3	; 0x03
    1b7c:	82 2b       	or	r24, r18
    1b7e:	93 2b       	or	r25, r19
    1b80:	90 93 4f 01 	sts	0x014F, r25
    1b84:	80 93 4e 01 	sts	0x014E, r24
  	if (state[PinNumber] == 0xF000) return 1;
    1b88:	81 15       	cp	r24, r1
    1b8a:	90 4f       	sbci	r25, 0xF0	; 240
    1b8c:	09 f4       	brne	.+2      	; 0x1b90 <main+0x162>
    1b8e:	fd c0       	rjmp	.+506    	; 0x1d8a <main+0x35c>
    1b90:	8f e9       	ldi	r24, 0x9F	; 159
    1b92:	9f e0       	ldi	r25, 0x0F	; 15
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	f1 f7       	brne	.-4      	; 0x1b94 <main+0x166>
    1b98:	00 c0       	rjmp	.+0      	; 0x1b9a <main+0x16c>
    1b9a:	00 00       	nop
		}
    
 		if(chk_buttons(6)) //Button 1 controls the alarm setting 
			set_alarm_ena = !set_alarm_ena; 

                if(alarm_set) //if alarm is set, check if it should be triggered
    1b9c:	80 91 34 01 	lds	r24, 0x0134
    1ba0:	81 11       	cpse	r24, r1
    1ba2:	fd c0       	rjmp	.+506    	; 0x1d9e <main+0x370>
//Checks the state of the button number passed to it. 
//It calls the debounce switch function for each pin of port A
int chk_buttons(uint8_t PinNumber)
{
  	static uint16_t state[8] ={0}; //holds present state
  	state[PinNumber] = (state[PinNumber] << 1) | (! bit_is_clear(PINA, PinNumber)) | 0xE000;
    1ba4:	29 b3       	in	r18, 0x19	; 25
    1ba6:	80 91 4c 01 	lds	r24, 0x014C
    1baa:	90 91 4d 01 	lds	r25, 0x014D
    1bae:	88 0f       	add	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	90 6e       	ori	r25, 0xE0	; 224
    1bb4:	25 fb       	bst	r18, 5
    1bb6:	00 27       	eor	r16, r16
    1bb8:	00 f9       	bld	r16, 0
    1bba:	10 e0       	ldi	r17, 0x00	; 0
    1bbc:	80 2b       	or	r24, r16
    1bbe:	91 2b       	or	r25, r17
    1bc0:	90 93 4d 01 	sts	0x014D, r25
    1bc4:	80 93 4c 01 	sts	0x014C, r24
  	if (state[PinNumber] == 0xF000) return 1;
    1bc8:	81 15       	cp	r24, r1
    1bca:	90 4f       	sbci	r25, 0xF0	; 240
    1bcc:	09 f4       	brne	.+2      	; 0x1bd0 <main+0x1a2>
    1bce:	d8 c0       	rjmp	.+432    	; 0x1d80 <main+0x352>
    1bd0:	8f e9       	ldi	r24, 0x9F	; 159
    1bd2:	9f e0       	ldi	r25, 0x0F	; 15
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	f1 f7       	brne	.-4      	; 0x1bd4 <main+0x1a6>
    1bd8:	00 c0       	rjmp	.+0      	; 0x1bda <main+0x1ac>
    1bda:	00 00       	nop
//Checks the state of the button number passed to it. 
//It calls the debounce switch function for each pin of port A
int chk_buttons(uint8_t PinNumber)
{
  	static uint16_t state[8] ={0}; //holds present state
  	state[PinNumber] = (state[PinNumber] << 1) | (! bit_is_clear(PINA, PinNumber)) | 0xE000;
    1bdc:	29 b3       	in	r18, 0x19	; 25
    1bde:	80 91 4a 01 	lds	r24, 0x014A
    1be2:	90 91 4b 01 	lds	r25, 0x014B
    1be6:	88 0f       	add	r24, r24
    1be8:	99 1f       	adc	r25, r25
    1bea:	90 6e       	ori	r25, 0xE0	; 224
    1bec:	24 fb       	bst	r18, 4
    1bee:	ee 24       	eor	r14, r14
    1bf0:	e0 f8       	bld	r14, 0
    1bf2:	f1 2c       	mov	r15, r1
    1bf4:	8e 29       	or	r24, r14
    1bf6:	9f 29       	or	r25, r15
    1bf8:	90 93 4b 01 	sts	0x014B, r25
    1bfc:	80 93 4a 01 	sts	0x014A, r24
  	if (state[PinNumber] == 0xF000) return 1;
    1c00:	81 15       	cp	r24, r1
    1c02:	90 4f       	sbci	r25, 0xF0	; 240
    1c04:	09 f4       	brne	.+2      	; 0x1c08 <main+0x1da>
    1c06:	b5 c0       	rjmp	.+362    	; 0x1d72 <main+0x344>
    1c08:	8f e9       	ldi	r24, 0x9F	; 159
    1c0a:	9f e0       	ldi	r25, 0x0F	; 15
    1c0c:	01 97       	sbiw	r24, 0x01	; 1
    1c0e:	f1 f7       	brne	.-4      	; 0x1c0c <main+0x1de>
    1c10:	00 c0       	rjmp	.+0      	; 0x1c12 <main+0x1e4>
    1c12:	00 00       	nop
//Checks the state of the button number passed to it. 
//It calls the debounce switch function for each pin of port A
int chk_buttons(uint8_t PinNumber)
{
  	static uint16_t state[8] ={0}; //holds present state
  	state[PinNumber] = (state[PinNumber] << 1) | (! bit_is_clear(PINA, PinNumber)) | 0xE000;
    1c14:	29 b3       	in	r18, 0x19	; 25
    1c16:	80 91 46 01 	lds	r24, 0x0146
    1c1a:	90 91 47 01 	lds	r25, 0x0147
    1c1e:	88 0f       	add	r24, r24
    1c20:	99 1f       	adc	r25, r25
    1c22:	90 6e       	ori	r25, 0xE0	; 224
    1c24:	22 fb       	bst	r18, 2
    1c26:	cc 24       	eor	r12, r12
    1c28:	c0 f8       	bld	r12, 0
    1c2a:	d1 2c       	mov	r13, r1
    1c2c:	8c 29       	or	r24, r12
    1c2e:	9d 29       	or	r25, r13
    1c30:	90 93 47 01 	sts	0x0147, r25
    1c34:	80 93 46 01 	sts	0x0146, r24
  	if (state[PinNumber] == 0xF000) return 1;
    1c38:	81 15       	cp	r24, r1
    1c3a:	90 4f       	sbci	r25, 0xF0	; 240
    1c3c:	09 f4       	brne	.+2      	; 0x1c40 <main+0x212>
    1c3e:	e1 c0       	rjmp	.+450    	; 0x1e02 <main+0x3d4>
    1c40:	8f e9       	ldi	r24, 0x9F	; 159
    1c42:	9f e0       	ldi	r25, 0x0F	; 15
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	f1 f7       	brne	.-4      	; 0x1c44 <main+0x216>
    1c48:	00 c0       	rjmp	.+0      	; 0x1c4a <main+0x21c>
    1c4a:	00 00       	nop
//Checks the state of the button number passed to it. 
//It calls the debounce switch function for each pin of port A
int chk_buttons(uint8_t PinNumber)
{
  	static uint16_t state[8] ={0}; //holds present state
  	state[PinNumber] = (state[PinNumber] << 1) | (! bit_is_clear(PINA, PinNumber)) | 0xE000;
    1c4c:	29 b3       	in	r18, 0x19	; 25
    1c4e:	80 91 44 01 	lds	r24, 0x0144
    1c52:	90 91 45 01 	lds	r25, 0x0145
    1c56:	88 0f       	add	r24, r24
    1c58:	99 1f       	adc	r25, r25
    1c5a:	90 6e       	ori	r25, 0xE0	; 224
    1c5c:	21 fb       	bst	r18, 1
    1c5e:	aa 24       	eor	r10, r10
    1c60:	a0 f8       	bld	r10, 0
    1c62:	b1 2c       	mov	r11, r1
    1c64:	8a 29       	or	r24, r10
    1c66:	9b 29       	or	r25, r11
    1c68:	90 93 45 01 	sts	0x0145, r25
    1c6c:	80 93 44 01 	sts	0x0144, r24
  	if (state[PinNumber] == 0xF000) return 1;
    1c70:	81 15       	cp	r24, r1
    1c72:	90 4f       	sbci	r25, 0xF0	; 240
    1c74:	09 f4       	brne	.+2      	; 0x1c78 <main+0x24a>
    1c76:	96 c0       	rjmp	.+300    	; 0x1da4 <main+0x376>
    1c78:	8f e9       	ldi	r24, 0x9F	; 159
    1c7a:	9f e0       	ldi	r25, 0x0F	; 15
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	f1 f7       	brne	.-4      	; 0x1c7c <main+0x24e>
    1c80:	00 c0       	rjmp	.+0      	; 0x1c82 <main+0x254>
    1c82:	00 00       	nop
    1c84:	80 91 2a 01 	lds	r24, 0x012A
		}
		if(chk_buttons(2))
		{	radio_on = !radio_on;}
		if(chk_buttons(1))
		{	change_volume = !change_volume;}
		if(change_volume)
    1c88:	81 11       	cpse	r24, r1
    1c8a:	94 c0       	rjmp	.+296    	; 0x1db4 <main+0x386>
//Checks the state of the button number passed to it. 
//It calls the debounce switch function for each pin of port A
int chk_buttons(uint8_t PinNumber)
{
  	static uint16_t state[8] ={0}; //holds present state
  	state[PinNumber] = (state[PinNumber] << 1) | (! bit_is_clear(PINA, PinNumber)) | 0xE000;
    1c8c:	29 b3       	in	r18, 0x19	; 25
    1c8e:	80 91 42 01 	lds	r24, 0x0142
    1c92:	90 91 43 01 	lds	r25, 0x0143
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	90 6e       	ori	r25, 0xE0	; 224
    1c9c:	20 fb       	bst	r18, 0
    1c9e:	88 24       	eor	r8, r8
    1ca0:	80 f8       	bld	r8, 0
    1ca2:	91 2c       	mov	r9, r1
    1ca4:	88 29       	or	r24, r8
    1ca6:	99 29       	or	r25, r9
    1ca8:	90 93 43 01 	sts	0x0143, r25
    1cac:	80 93 42 01 	sts	0x0142, r24
  	if (state[PinNumber] == 0xF000) return 1;
    1cb0:	81 15       	cp	r24, r1
    1cb2:	90 4f       	sbci	r25, 0xF0	; 240
    1cb4:	09 f4       	brne	.+2      	; 0x1cb8 <main+0x28a>
    1cb6:	51 c0       	rjmp	.+162    	; 0x1d5a <main+0x32c>
    1cb8:	8f e9       	ldi	r24, 0x9F	; 159
    1cba:	9f e0       	ldi	r25, 0x0F	; 15
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	f1 f7       	brne	.-4      	; 0x1cbc <main+0x28e>
    1cc0:	00 c0       	rjmp	.+0      	; 0x1cc2 <main+0x294>
    1cc2:	00 00       	nop
	//	{	radio_pwr_dwn();}
	//	tempvolume= Encoder2_handling(spi_read(),tempvolume, 100);
	//	if(chk_buttons(3))
	//	{	radio_pwr_dwn(); 
	//	}
		if(LocalTemp_flag)
    1cc4:	80 91 2e 01 	lds	r24, 0x012E
    1cc8:	81 11       	cpse	r24, r1
    1cca:	4e c0       	rjmp	.+156    	; 0x1d68 <main+0x33a>
//                     void InitLEDdisplay()
//***********************************************************************
//This function initializes the IO to use the 4Digit LED display
void InitLEDdisplay()
{
  	DDRA = 0xFF; //Set PORTA to all output
    1ccc:	3a ba       	out	0x1a, r3	; 26
  	DDRB |= 0XF0; //Set PORTB pins 4 to 7 to output
    1cce:	87 b3       	in	r24, 0x17	; 23
    1cd0:	80 6f       	ori	r24, 0xF0	; 240
    1cd2:	87 bb       	out	0x17, r24	; 23
  	asm("nop"); //IO Synchronization delay
    1cd4:	00 00       	nop
  	asm("nop"); //IO Synchronization delay
    1cd6:	00 00       	nop
  	PORTB |= 0b01100000; //Set PB5 and PB6 to 1 (no digit selected on Display)
    1cd8:	88 b3       	in	r24, 0x18	; 24
    1cda:	80 66       	ori	r24, 0x60	; 96
    1cdc:	88 bb       	out	0x18, r24	; 24
  	PORTB &= 0b01101111; //Set PB4 and PB7 to 0 (transistor saturated) 
    1cde:	88 b3       	in	r24, 0x18	; 24
    1ce0:	8f 76       	andi	r24, 0x6F	; 111
    1ce2:	88 bb       	out	0x18, r24	; 24
	
*/	
	while(1)
	{	
		InitLEDdisplay();
		if(radio_on)
    1ce4:	80 91 2b 01 	lds	r24, 0x012B
    1ce8:	81 11       	cpse	r24, r1
    1cea:	9c c0       	rjmp	.+312    	; 0x1e24 <main+0x3f6>
			tempfreq= Encoder1_handling_fm(spi_read(),tempfreq, 199);
			_delay_us(300);
			current_fm_freq = tempfreq + 8810;
		}	
		if(!radio_on) 
		{	SeperateDigits();}
    1cec:	0e 94 36 02 	call	0x46c	; 0x46c <SeperateDigits>
//                     void InitPushButtons()
//***********************************************************************
//This function initializes the IO to read the state of the push buttons
void InitPushButtons()
{
        DDRA = 0x00; //Set all PortA to input
    1cf0:	1a ba       	out	0x1a, r1	; 26
        DDRB |= 0xF0; //Set PortB pin fom 4 to 7 as output
    1cf2:	87 b3       	in	r24, 0x17	; 23
    1cf4:	80 6f       	ori	r24, 0xF0	; 240
    1cf6:	87 bb       	out	0x17, r24	; 23
        asm("nop"); //IO Synchronization necessary delay
    1cf8:	00 00       	nop
        asm("nop");
    1cfa:	00 00       	nop
        PORTA = 0xFF; //Pull up resistor on PORTA input pins
    1cfc:	4b ba       	out	0x1b, r4	; 27
        PORTB |= (1<<PORTB4) | (1<<PORTB5) | (1<<PORTB6) | (1<<PORTB7); //Enable Tri-State buffer and cutoff Transistor
    1cfe:	88 b3       	in	r24, 0x18	; 24
    1d00:	80 6f       	ori	r24, 0xF0	; 240
    1d02:	88 bb       	out	0x18, r24	; 24
		}	
		if(!radio_on) 
		{	SeperateDigits();}
		InitPushButtons();

                if(RemoteTemp_flag)
    1d04:	80 91 2d 01 	lds	r24, 0x012D
    1d08:	81 11       	cpse	r24, r1
    1d0a:	87 c0       	rjmp	.+270    	; 0x1e1a <main+0x3ec>
                {       RemoteTemperature();
                        RemoteTemp_flag = 0;
                }
                if(set_clock_ena == 1)
    1d0c:	80 91 36 01 	lds	r24, 0x0136
    1d10:	81 11       	cpse	r24, r1
    1d12:	80 c0       	rjmp	.+256    	; 0x1e14 <main+0x3e6>
                {       Set_Clock();
                }

                if(set_alarm_ena == 1)
    1d14:	80 91 35 01 	lds	r24, 0x0135
    1d18:	81 11       	cpse	r24, r1
    1d1a:	79 c0       	rjmp	.+242    	; 0x1e0e <main+0x3e0>
//Checks the state of the button number passed to it. 
//It calls the debounce switch function for each pin of port A
int chk_buttons(uint8_t PinNumber)
{
  	static uint16_t state[8] ={0}; //holds present state
  	state[PinNumber] = (state[PinNumber] << 1) | (! bit_is_clear(PINA, PinNumber)) | 0xE000;
    1d1c:	89 b3       	in	r24, 0x19	; 25
    1d1e:	20 91 50 01 	lds	r18, 0x0150
    1d22:	30 91 51 01 	lds	r19, 0x0151
    1d26:	22 0f       	add	r18, r18
    1d28:	33 1f       	adc	r19, r19
    1d2a:	30 6e       	ori	r19, 0xE0	; 224
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	88 0f       	add	r24, r24
    1d30:	89 2f       	mov	r24, r25
    1d32:	88 1f       	adc	r24, r24
    1d34:	99 0b       	sbc	r25, r25
    1d36:	82 2b       	or	r24, r18
    1d38:	93 2b       	or	r25, r19
    1d3a:	90 93 51 01 	sts	0x0151, r25
    1d3e:	80 93 50 01 	sts	0x0150, r24
  	if (state[PinNumber] == 0xF000) return 1;
    1d42:	81 15       	cp	r24, r1
    1d44:	90 4f       	sbci	r25, 0xF0	; 240
    1d46:	09 f0       	breq	.+2      	; 0x1d4a <main+0x31c>
    1d48:	04 cf       	rjmp	.-504    	; 0x1b52 <main+0x124>
                {       Set_Alarm();
                }
	//	current_fm_freq = Encoder1_handling(spi_read(),current_fm_freq);

		if(chk_buttons(7)) //Button 0 controls the clock setting
		{	if(set_clock_ena == 1)
    1d4a:	80 91 36 01 	lds	r24, 0x0136
    1d4e:	81 11       	cpse	r24, r1
    1d50:	98 c0       	rjmp	.+304    	; 0x1e82 <main+0x454>
				TIM0_RTC_init();
			set_clock_ena = !set_clock_ena; //!set_clock_ena;
    1d52:	85 25       	eor	r24, r5
    1d54:	80 93 36 01 	sts	0x0136, r24
    1d58:	02 cf       	rjmp	.-508    	; 0x1b5e <main+0x130>

		}	
	
		if(chk_buttons(0))
		{
			fm_tune_freq(); //tune radio to frequency in current_fm_freq
    1d5a:	0e 94 c6 0b 	call	0x178c	; 0x178c <fm_tune_freq>
	//	{	radio_pwr_dwn();}
	//	tempvolume= Encoder2_handling(spi_read(),tempvolume, 100);
	//	if(chk_buttons(3))
	//	{	radio_pwr_dwn(); 
	//	}
		if(LocalTemp_flag)
    1d5e:	80 91 2e 01 	lds	r24, 0x012E
    1d62:	88 23       	and	r24, r24
    1d64:	09 f4       	brne	.+2      	; 0x1d68 <main+0x33a>
    1d66:	b2 cf       	rjmp	.-156    	; 0x1ccc <main+0x29e>
		{	LocalTemperature();
    1d68:	0e 94 ab 05 	call	0xb56	; 0xb56 <LocalTemperature>
			LocalTemp_flag = 0;	
    1d6c:	10 92 2e 01 	sts	0x012E, r1
    1d70:	ad cf       	rjmp	.-166    	; 0x1ccc <main+0x29e>
		if(chk_buttons(5)) //Stop the alarm
		{	alarm_set = 0; //Button 2 pushed, stop completely the alarm
			ClearAlarmLCD();
		}	
		if(chk_buttons(4)) //Snooze
		{	snooze = 1;	
    1d72:	20 92 32 01 	sts	0x0132, r2
			trigger_alarm = 0;
    1d76:	10 92 33 01 	sts	0x0133, r1
			ClearAlarmLCD();
    1d7a:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <ClearAlarmLCD>
    1d7e:	4a cf       	rjmp	.-364    	; 0x1c14 <main+0x1e6>

                if(alarm_set) //if alarm is set, check if it should be triggered
                        Alarm();

		if(chk_buttons(5)) //Stop the alarm
		{	alarm_set = 0; //Button 2 pushed, stop completely the alarm
    1d80:	10 92 34 01 	sts	0x0134, r1
			ClearAlarmLCD();
    1d84:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <ClearAlarmLCD>
    1d88:	29 cf       	rjmp	.-430    	; 0x1bdc <main+0x1ae>
				TIM0_RTC_init();
			set_clock_ena = !set_clock_ena; //!set_clock_ena;
		}
    
 		if(chk_buttons(6)) //Button 1 controls the alarm setting 
			set_alarm_ena = !set_alarm_ena; 
    1d8a:	80 91 35 01 	lds	r24, 0x0135
    1d8e:	85 25       	eor	r24, r5
    1d90:	80 93 35 01 	sts	0x0135, r24

                if(alarm_set) //if alarm is set, check if it should be triggered
    1d94:	80 91 34 01 	lds	r24, 0x0134
    1d98:	88 23       	and	r24, r24
    1d9a:	09 f4       	brne	.+2      	; 0x1d9e <main+0x370>
    1d9c:	03 cf       	rjmp	.-506    	; 0x1ba4 <main+0x176>
                        Alarm();
    1d9e:	0e 94 93 05 	call	0xb26	; 0xb26 <Alarm>
    1da2:	00 cf       	rjmp	.-512    	; 0x1ba4 <main+0x176>
			ClearAlarmLCD();
		}
		if(chk_buttons(2))
		{	radio_on = !radio_on;}
		if(chk_buttons(1))
		{	change_volume = !change_volume;}
    1da4:	80 91 2a 01 	lds	r24, 0x012A
    1da8:	85 25       	eor	r24, r5
    1daa:	80 93 2a 01 	sts	0x012A, r24
		if(change_volume)
    1dae:	88 23       	and	r24, r24
    1db0:	09 f4       	brne	.+2      	; 0x1db4 <main+0x386>
    1db2:	6c cf       	rjmp	.-296    	; 0x1c8c <main+0x25e>
		{	duty_cycle =  Encoder1_handling_vol(spi_read(), duty_cycle);
    1db4:	60 91 2c 01 	lds	r22, 0x012C
    1db8:	69 83       	std	Y+1, r22	; 0x01
    1dba:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <spi_read>
    1dbe:	69 81       	ldd	r22, Y+1	; 0x01
    1dc0:	0e 94 96 04 	call	0x92c	; 0x92c <Encoder1_handling_vol>
    1dc4:	80 93 2c 01 	sts	0x012C, r24
//                     void TIM3_set_PWM()
//***********************************************************************
//Change the PWM duty cycle for volume control
void TIM3_set_PWM()
{
	uint16_t conversion = (duty_cycle*10.23); // duty*1023/100 = duty*10.23 
    1dc8:	60 91 2c 01 	lds	r22, 0x012C
    1dcc:	70 e0       	ldi	r23, 0x00	; 0
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__floatsisf>
    1dd6:	24 e1       	ldi	r18, 0x14	; 20
    1dd8:	3e ea       	ldi	r19, 0xAE	; 174
    1dda:	43 e2       	ldi	r20, 0x23	; 35
    1ddc:	51 e4       	ldi	r21, 0x41	; 65
    1dde:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <__mulsf3>
    1de2:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__fixunssfsi>
	OCR3A = 1023 - conversion; //set the duty cycle value
    1de6:	c3 01       	movw	r24, r6
    1de8:	86 1b       	sub	r24, r22
    1dea:	97 0b       	sbc	r25, r23
    1dec:	90 93 87 00 	sts	0x0087, r25
    1df0:	80 93 86 00 	sts	0x0086, r24
		if(chk_buttons(1))
		{	change_volume = !change_volume;}
		if(change_volume)
		{	duty_cycle =  Encoder1_handling_vol(spi_read(), duty_cycle);
			TIM3_set_PWM();
			tempvolume = duty_cycle; 
    1df4:	80 91 2c 01 	lds	r24, 0x012C
    1df8:	80 93 39 01 	sts	0x0139, r24
			BarGraphVolume();
    1dfc:	0e 94 3b 07 	call	0xe76	; 0xe76 <BarGraphVolume>
    1e00:	45 cf       	rjmp	.-374    	; 0x1c8c <main+0x25e>
		{	snooze = 1;	
			trigger_alarm = 0;
			ClearAlarmLCD();
		}
		if(chk_buttons(2))
		{	radio_on = !radio_on;}
    1e02:	80 91 2b 01 	lds	r24, 0x012B
    1e06:	85 25       	eor	r24, r5
    1e08:	80 93 2b 01 	sts	0x012B, r24
    1e0c:	1f cf       	rjmp	.-450    	; 0x1c4c <main+0x21e>
                if(set_clock_ena == 1)
                {       Set_Clock();
                }

                if(set_alarm_ena == 1)
                {       Set_Alarm();
    1e0e:	0e 94 72 05 	call	0xae4	; 0xae4 <Set_Alarm>
    1e12:	84 cf       	rjmp	.-248    	; 0x1d1c <main+0x2ee>
                if(RemoteTemp_flag)
                {       RemoteTemperature();
                        RemoteTemp_flag = 0;
                }
                if(set_clock_ena == 1)
                {       Set_Clock();
    1e14:	0e 94 53 05 	call	0xaa6	; 0xaa6 <Set_Clock>
    1e18:	7d cf       	rjmp	.-262    	; 0x1d14 <main+0x2e6>
		if(!radio_on) 
		{	SeperateDigits();}
		InitPushButtons();

                if(RemoteTemp_flag)
                {       RemoteTemperature();
    1e1a:	0e 94 f6 05 	call	0xbec	; 0xbec <RemoteTemperature>
                        RemoteTemp_flag = 0;
    1e1e:	10 92 2d 01 	sts	0x012D, r1
    1e22:	74 cf       	rjmp	.-280    	; 0x1d0c <main+0x2de>
*/	
	while(1)
	{	
		InitLEDdisplay();
		if(radio_on)
		{	SeperateDigits_fm(tempfreq);
    1e24:	80 91 3a 01 	lds	r24, 0x013A
    1e28:	90 91 3b 01 	lds	r25, 0x013B
    1e2c:	0e 94 e6 02 	call	0x5cc	; 0x5cc <SeperateDigits_fm>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1e30:	8f ea       	ldi	r24, 0xAF	; 175
    1e32:	94 e0       	ldi	r25, 0x04	; 4
    1e34:	01 97       	sbiw	r24, 0x01	; 1
    1e36:	f1 f7       	brne	.-4      	; 0x1e34 <main+0x406>
    1e38:	00 c0       	rjmp	.+0      	; 0x1e3a <main+0x40c>
    1e3a:	00 00       	nop
			_delay_us(300);
			tempfreq= Encoder1_handling_fm(spi_read(),tempfreq, 199);
    1e3c:	60 91 3a 01 	lds	r22, 0x013A
    1e40:	69 83       	std	Y+1, r22	; 0x01
    1e42:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <spi_read>
    1e46:	47 ec       	ldi	r20, 0xC7	; 199
    1e48:	69 81       	ldd	r22, Y+1	; 0x01
    1e4a:	0e 94 ce 04 	call	0x99c	; 0x99c <Encoder1_handling_fm>
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	90 93 3b 01 	sts	0x013B, r25
    1e54:	80 93 3a 01 	sts	0x013A, r24
    1e58:	8f ea       	ldi	r24, 0xAF	; 175
    1e5a:	94 e0       	ldi	r25, 0x04	; 4
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	f1 f7       	brne	.-4      	; 0x1e5c <main+0x42e>
    1e60:	00 c0       	rjmp	.+0      	; 0x1e62 <main+0x434>
    1e62:	00 00       	nop
			_delay_us(300);
			current_fm_freq = tempfreq + 8810;
    1e64:	80 91 3a 01 	lds	r24, 0x013A
    1e68:	90 91 3b 01 	lds	r25, 0x013B
    1e6c:	86 59       	subi	r24, 0x96	; 150
    1e6e:	9d 4d       	sbci	r25, 0xDD	; 221
    1e70:	90 93 0f 01 	sts	0x010F, r25
    1e74:	80 93 0e 01 	sts	0x010E, r24
		}	
		if(!radio_on) 
    1e78:	80 91 2b 01 	lds	r24, 0x012B
    1e7c:	81 11       	cpse	r24, r1
    1e7e:	38 cf       	rjmp	.-400    	; 0x1cf0 <main+0x2c2>
    1e80:	35 cf       	rjmp	.-406    	; 0x1cec <main+0x2be>
                }
	//	current_fm_freq = Encoder1_handling(spi_read(),current_fm_freq);

		if(chk_buttons(7)) //Button 0 controls the clock setting
		{	if(set_clock_ena == 1)
				TIM0_RTC_init();
    1e82:	0e 94 78 01 	call	0x2f0	; 0x2f0 <TIM0_RTC_init>
    1e86:	80 91 36 01 	lds	r24, 0x0136
    1e8a:	63 cf       	rjmp	.-314    	; 0x1d52 <main+0x324>

00001e8c <__udivmodhi4>:
    1e8c:	aa 1b       	sub	r26, r26
    1e8e:	bb 1b       	sub	r27, r27
    1e90:	51 e1       	ldi	r21, 0x11	; 17
    1e92:	07 c0       	rjmp	.+14     	; 0x1ea2 <__udivmodhi4_ep>

00001e94 <__udivmodhi4_loop>:
    1e94:	aa 1f       	adc	r26, r26
    1e96:	bb 1f       	adc	r27, r27
    1e98:	a6 17       	cp	r26, r22
    1e9a:	b7 07       	cpc	r27, r23
    1e9c:	10 f0       	brcs	.+4      	; 0x1ea2 <__udivmodhi4_ep>
    1e9e:	a6 1b       	sub	r26, r22
    1ea0:	b7 0b       	sbc	r27, r23

00001ea2 <__udivmodhi4_ep>:
    1ea2:	88 1f       	adc	r24, r24
    1ea4:	99 1f       	adc	r25, r25
    1ea6:	5a 95       	dec	r21
    1ea8:	a9 f7       	brne	.-22     	; 0x1e94 <__udivmodhi4_loop>
    1eaa:	80 95       	com	r24
    1eac:	90 95       	com	r25
    1eae:	bc 01       	movw	r22, r24
    1eb0:	cd 01       	movw	r24, r26
    1eb2:	08 95       	ret

00001eb4 <__divmodhi4>:
    1eb4:	97 fb       	bst	r25, 7
    1eb6:	07 2e       	mov	r0, r23
    1eb8:	16 f4       	brtc	.+4      	; 0x1ebe <__divmodhi4+0xa>
    1eba:	00 94       	com	r0
    1ebc:	07 d0       	rcall	.+14     	; 0x1ecc <__divmodhi4_neg1>
    1ebe:	77 fd       	sbrc	r23, 7
    1ec0:	09 d0       	rcall	.+18     	; 0x1ed4 <__divmodhi4_neg2>
    1ec2:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__udivmodhi4>
    1ec6:	07 fc       	sbrc	r0, 7
    1ec8:	05 d0       	rcall	.+10     	; 0x1ed4 <__divmodhi4_neg2>
    1eca:	3e f4       	brtc	.+14     	; 0x1eda <__divmodhi4_exit>

00001ecc <__divmodhi4_neg1>:
    1ecc:	90 95       	com	r25
    1ece:	81 95       	neg	r24
    1ed0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ed2:	08 95       	ret

00001ed4 <__divmodhi4_neg2>:
    1ed4:	70 95       	com	r23
    1ed6:	61 95       	neg	r22
    1ed8:	7f 4f       	sbci	r23, 0xFF	; 255

00001eda <__divmodhi4_exit>:
    1eda:	08 95       	ret

00001edc <__divmodsi4>:
    1edc:	05 2e       	mov	r0, r21
    1ede:	97 fb       	bst	r25, 7
    1ee0:	1e f4       	brtc	.+6      	; 0x1ee8 <__divmodsi4+0xc>
    1ee2:	00 94       	com	r0
    1ee4:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__negsi2>
    1ee8:	57 fd       	sbrc	r21, 7
    1eea:	07 d0       	rcall	.+14     	; 0x1efa <__divmodsi4_neg2>
    1eec:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__udivmodsi4>
    1ef0:	07 fc       	sbrc	r0, 7
    1ef2:	03 d0       	rcall	.+6      	; 0x1efa <__divmodsi4_neg2>
    1ef4:	4e f4       	brtc	.+18     	; 0x1f08 <__divmodsi4_exit>
    1ef6:	0c 94 85 0f 	jmp	0x1f0a	; 0x1f0a <__negsi2>

00001efa <__divmodsi4_neg2>:
    1efa:	50 95       	com	r21
    1efc:	40 95       	com	r20
    1efe:	30 95       	com	r19
    1f00:	21 95       	neg	r18
    1f02:	3f 4f       	sbci	r19, 0xFF	; 255
    1f04:	4f 4f       	sbci	r20, 0xFF	; 255
    1f06:	5f 4f       	sbci	r21, 0xFF	; 255

00001f08 <__divmodsi4_exit>:
    1f08:	08 95       	ret

00001f0a <__negsi2>:
    1f0a:	90 95       	com	r25
    1f0c:	80 95       	com	r24
    1f0e:	70 95       	com	r23
    1f10:	61 95       	neg	r22
    1f12:	7f 4f       	sbci	r23, 0xFF	; 255
    1f14:	8f 4f       	sbci	r24, 0xFF	; 255
    1f16:	9f 4f       	sbci	r25, 0xFF	; 255
    1f18:	08 95       	ret

00001f1a <__tablejump2__>:
    1f1a:	ee 0f       	add	r30, r30
    1f1c:	ff 1f       	adc	r31, r31
    1f1e:	00 24       	eor	r0, r0
    1f20:	00 1c       	adc	r0, r0
    1f22:	0b be       	out	0x3b, r0	; 59
    1f24:	07 90       	elpm	r0, Z+
    1f26:	f6 91       	elpm	r31, Z
    1f28:	e0 2d       	mov	r30, r0
    1f2a:	09 94       	ijmp

00001f2c <__umulhisi3>:
    1f2c:	a2 9f       	mul	r26, r18
    1f2e:	b0 01       	movw	r22, r0
    1f30:	b3 9f       	mul	r27, r19
    1f32:	c0 01       	movw	r24, r0
    1f34:	a3 9f       	mul	r26, r19
    1f36:	70 0d       	add	r23, r0
    1f38:	81 1d       	adc	r24, r1
    1f3a:	11 24       	eor	r1, r1
    1f3c:	91 1d       	adc	r25, r1
    1f3e:	b2 9f       	mul	r27, r18
    1f40:	70 0d       	add	r23, r0
    1f42:	81 1d       	adc	r24, r1
    1f44:	11 24       	eor	r1, r1
    1f46:	91 1d       	adc	r25, r1
    1f48:	08 95       	ret

00001f4a <__udivmodsi4>:
    1f4a:	a1 e2       	ldi	r26, 0x21	; 33
    1f4c:	1a 2e       	mov	r1, r26
    1f4e:	aa 1b       	sub	r26, r26
    1f50:	bb 1b       	sub	r27, r27
    1f52:	fd 01       	movw	r30, r26
    1f54:	0d c0       	rjmp	.+26     	; 0x1f70 <__udivmodsi4_ep>

00001f56 <__udivmodsi4_loop>:
    1f56:	aa 1f       	adc	r26, r26
    1f58:	bb 1f       	adc	r27, r27
    1f5a:	ee 1f       	adc	r30, r30
    1f5c:	ff 1f       	adc	r31, r31
    1f5e:	a2 17       	cp	r26, r18
    1f60:	b3 07       	cpc	r27, r19
    1f62:	e4 07       	cpc	r30, r20
    1f64:	f5 07       	cpc	r31, r21
    1f66:	20 f0       	brcs	.+8      	; 0x1f70 <__udivmodsi4_ep>
    1f68:	a2 1b       	sub	r26, r18
    1f6a:	b3 0b       	sbc	r27, r19
    1f6c:	e4 0b       	sbc	r30, r20
    1f6e:	f5 0b       	sbc	r31, r21

00001f70 <__udivmodsi4_ep>:
    1f70:	66 1f       	adc	r22, r22
    1f72:	77 1f       	adc	r23, r23
    1f74:	88 1f       	adc	r24, r24
    1f76:	99 1f       	adc	r25, r25
    1f78:	1a 94       	dec	r1
    1f7a:	69 f7       	brne	.-38     	; 0x1f56 <__udivmodsi4_loop>
    1f7c:	60 95       	com	r22
    1f7e:	70 95       	com	r23
    1f80:	80 95       	com	r24
    1f82:	90 95       	com	r25
    1f84:	9b 01       	movw	r18, r22
    1f86:	ac 01       	movw	r20, r24
    1f88:	bd 01       	movw	r22, r26
    1f8a:	cf 01       	movw	r24, r30
    1f8c:	08 95       	ret

00001f8e <__fixunssfsi>:
    1f8e:	0e 94 3b 10 	call	0x2076	; 0x2076 <__fp_splitA>
    1f92:	88 f0       	brcs	.+34     	; 0x1fb6 <__fixunssfsi+0x28>
    1f94:	9f 57       	subi	r25, 0x7F	; 127
    1f96:	98 f0       	brcs	.+38     	; 0x1fbe <__fixunssfsi+0x30>
    1f98:	b9 2f       	mov	r27, r25
    1f9a:	99 27       	eor	r25, r25
    1f9c:	b7 51       	subi	r27, 0x17	; 23
    1f9e:	b0 f0       	brcs	.+44     	; 0x1fcc <__fixunssfsi+0x3e>
    1fa0:	e1 f0       	breq	.+56     	; 0x1fda <__fixunssfsi+0x4c>
    1fa2:	66 0f       	add	r22, r22
    1fa4:	77 1f       	adc	r23, r23
    1fa6:	88 1f       	adc	r24, r24
    1fa8:	99 1f       	adc	r25, r25
    1faa:	1a f0       	brmi	.+6      	; 0x1fb2 <__fixunssfsi+0x24>
    1fac:	ba 95       	dec	r27
    1fae:	c9 f7       	brne	.-14     	; 0x1fa2 <__fixunssfsi+0x14>
    1fb0:	14 c0       	rjmp	.+40     	; 0x1fda <__fixunssfsi+0x4c>
    1fb2:	b1 30       	cpi	r27, 0x01	; 1
    1fb4:	91 f0       	breq	.+36     	; 0x1fda <__fixunssfsi+0x4c>
    1fb6:	0e 94 55 10 	call	0x20aa	; 0x20aa <__fp_zero>
    1fba:	b1 e0       	ldi	r27, 0x01	; 1
    1fbc:	08 95       	ret
    1fbe:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <__fp_zero>
    1fc2:	67 2f       	mov	r22, r23
    1fc4:	78 2f       	mov	r23, r24
    1fc6:	88 27       	eor	r24, r24
    1fc8:	b8 5f       	subi	r27, 0xF8	; 248
    1fca:	39 f0       	breq	.+14     	; 0x1fda <__fixunssfsi+0x4c>
    1fcc:	b9 3f       	cpi	r27, 0xF9	; 249
    1fce:	cc f3       	brlt	.-14     	; 0x1fc2 <__fixunssfsi+0x34>
    1fd0:	86 95       	lsr	r24
    1fd2:	77 95       	ror	r23
    1fd4:	67 95       	ror	r22
    1fd6:	b3 95       	inc	r27
    1fd8:	d9 f7       	brne	.-10     	; 0x1fd0 <__fixunssfsi+0x42>
    1fda:	3e f4       	brtc	.+14     	; 0x1fea <__fixunssfsi+0x5c>
    1fdc:	90 95       	com	r25
    1fde:	80 95       	com	r24
    1fe0:	70 95       	com	r23
    1fe2:	61 95       	neg	r22
    1fe4:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe6:	8f 4f       	sbci	r24, 0xFF	; 255
    1fe8:	9f 4f       	sbci	r25, 0xFF	; 255
    1fea:	08 95       	ret

00001fec <__floatunsisf>:
    1fec:	e8 94       	clt
    1fee:	09 c0       	rjmp	.+18     	; 0x2002 <__floatsisf+0x12>

00001ff0 <__floatsisf>:
    1ff0:	97 fb       	bst	r25, 7
    1ff2:	3e f4       	brtc	.+14     	; 0x2002 <__floatsisf+0x12>
    1ff4:	90 95       	com	r25
    1ff6:	80 95       	com	r24
    1ff8:	70 95       	com	r23
    1ffa:	61 95       	neg	r22
    1ffc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ffe:	8f 4f       	sbci	r24, 0xFF	; 255
    2000:	9f 4f       	sbci	r25, 0xFF	; 255
    2002:	99 23       	and	r25, r25
    2004:	a9 f0       	breq	.+42     	; 0x2030 <__floatsisf+0x40>
    2006:	f9 2f       	mov	r31, r25
    2008:	96 e9       	ldi	r25, 0x96	; 150
    200a:	bb 27       	eor	r27, r27
    200c:	93 95       	inc	r25
    200e:	f6 95       	lsr	r31
    2010:	87 95       	ror	r24
    2012:	77 95       	ror	r23
    2014:	67 95       	ror	r22
    2016:	b7 95       	ror	r27
    2018:	f1 11       	cpse	r31, r1
    201a:	f8 cf       	rjmp	.-16     	; 0x200c <__floatsisf+0x1c>
    201c:	fa f4       	brpl	.+62     	; 0x205c <__floatsisf+0x6c>
    201e:	bb 0f       	add	r27, r27
    2020:	11 f4       	brne	.+4      	; 0x2026 <__floatsisf+0x36>
    2022:	60 ff       	sbrs	r22, 0
    2024:	1b c0       	rjmp	.+54     	; 0x205c <__floatsisf+0x6c>
    2026:	6f 5f       	subi	r22, 0xFF	; 255
    2028:	7f 4f       	sbci	r23, 0xFF	; 255
    202a:	8f 4f       	sbci	r24, 0xFF	; 255
    202c:	9f 4f       	sbci	r25, 0xFF	; 255
    202e:	16 c0       	rjmp	.+44     	; 0x205c <__floatsisf+0x6c>
    2030:	88 23       	and	r24, r24
    2032:	11 f0       	breq	.+4      	; 0x2038 <__floatsisf+0x48>
    2034:	96 e9       	ldi	r25, 0x96	; 150
    2036:	11 c0       	rjmp	.+34     	; 0x205a <__floatsisf+0x6a>
    2038:	77 23       	and	r23, r23
    203a:	21 f0       	breq	.+8      	; 0x2044 <__floatsisf+0x54>
    203c:	9e e8       	ldi	r25, 0x8E	; 142
    203e:	87 2f       	mov	r24, r23
    2040:	76 2f       	mov	r23, r22
    2042:	05 c0       	rjmp	.+10     	; 0x204e <__floatsisf+0x5e>
    2044:	66 23       	and	r22, r22
    2046:	71 f0       	breq	.+28     	; 0x2064 <__floatsisf+0x74>
    2048:	96 e8       	ldi	r25, 0x86	; 134
    204a:	86 2f       	mov	r24, r22
    204c:	70 e0       	ldi	r23, 0x00	; 0
    204e:	60 e0       	ldi	r22, 0x00	; 0
    2050:	2a f0       	brmi	.+10     	; 0x205c <__floatsisf+0x6c>
    2052:	9a 95       	dec	r25
    2054:	66 0f       	add	r22, r22
    2056:	77 1f       	adc	r23, r23
    2058:	88 1f       	adc	r24, r24
    205a:	da f7       	brpl	.-10     	; 0x2052 <__floatsisf+0x62>
    205c:	88 0f       	add	r24, r24
    205e:	96 95       	lsr	r25
    2060:	87 95       	ror	r24
    2062:	97 f9       	bld	r25, 7
    2064:	08 95       	ret

00002066 <__fp_split3>:
    2066:	57 fd       	sbrc	r21, 7
    2068:	90 58       	subi	r25, 0x80	; 128
    206a:	44 0f       	add	r20, r20
    206c:	55 1f       	adc	r21, r21
    206e:	59 f0       	breq	.+22     	; 0x2086 <__fp_splitA+0x10>
    2070:	5f 3f       	cpi	r21, 0xFF	; 255
    2072:	71 f0       	breq	.+28     	; 0x2090 <__fp_splitA+0x1a>
    2074:	47 95       	ror	r20

00002076 <__fp_splitA>:
    2076:	88 0f       	add	r24, r24
    2078:	97 fb       	bst	r25, 7
    207a:	99 1f       	adc	r25, r25
    207c:	61 f0       	breq	.+24     	; 0x2096 <__fp_splitA+0x20>
    207e:	9f 3f       	cpi	r25, 0xFF	; 255
    2080:	79 f0       	breq	.+30     	; 0x20a0 <__fp_splitA+0x2a>
    2082:	87 95       	ror	r24
    2084:	08 95       	ret
    2086:	12 16       	cp	r1, r18
    2088:	13 06       	cpc	r1, r19
    208a:	14 06       	cpc	r1, r20
    208c:	55 1f       	adc	r21, r21
    208e:	f2 cf       	rjmp	.-28     	; 0x2074 <__fp_split3+0xe>
    2090:	46 95       	lsr	r20
    2092:	f1 df       	rcall	.-30     	; 0x2076 <__fp_splitA>
    2094:	08 c0       	rjmp	.+16     	; 0x20a6 <__fp_splitA+0x30>
    2096:	16 16       	cp	r1, r22
    2098:	17 06       	cpc	r1, r23
    209a:	18 06       	cpc	r1, r24
    209c:	99 1f       	adc	r25, r25
    209e:	f1 cf       	rjmp	.-30     	; 0x2082 <__fp_splitA+0xc>
    20a0:	86 95       	lsr	r24
    20a2:	71 05       	cpc	r23, r1
    20a4:	61 05       	cpc	r22, r1
    20a6:	08 94       	sec
    20a8:	08 95       	ret

000020aa <__fp_zero>:
    20aa:	e8 94       	clt

000020ac <__fp_szero>:
    20ac:	bb 27       	eor	r27, r27
    20ae:	66 27       	eor	r22, r22
    20b0:	77 27       	eor	r23, r23
    20b2:	cb 01       	movw	r24, r22
    20b4:	97 f9       	bld	r25, 7
    20b6:	08 95       	ret

000020b8 <__mulsf3>:
    20b8:	0e 94 6f 10 	call	0x20de	; 0x20de <__mulsf3x>
    20bc:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <__fp_round>
    20c0:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <__fp_pscA>
    20c4:	38 f0       	brcs	.+14     	; 0x20d4 <__mulsf3+0x1c>
    20c6:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__fp_pscB>
    20ca:	20 f0       	brcs	.+8      	; 0x20d4 <__mulsf3+0x1c>
    20cc:	95 23       	and	r25, r21
    20ce:	11 f0       	breq	.+4      	; 0x20d4 <__mulsf3+0x1c>
    20d0:	0c 94 c9 10 	jmp	0x2192	; 0x2192 <__fp_inf>
    20d4:	0c 94 cf 10 	jmp	0x219e	; 0x219e <__fp_nan>
    20d8:	11 24       	eor	r1, r1
    20da:	0c 94 56 10 	jmp	0x20ac	; 0x20ac <__fp_szero>

000020de <__mulsf3x>:
    20de:	0e 94 33 10 	call	0x2066	; 0x2066 <__fp_split3>
    20e2:	70 f3       	brcs	.-36     	; 0x20c0 <__mulsf3+0x8>

000020e4 <__mulsf3_pse>:
    20e4:	95 9f       	mul	r25, r21
    20e6:	c1 f3       	breq	.-16     	; 0x20d8 <__mulsf3+0x20>
    20e8:	95 0f       	add	r25, r21
    20ea:	50 e0       	ldi	r21, 0x00	; 0
    20ec:	55 1f       	adc	r21, r21
    20ee:	62 9f       	mul	r22, r18
    20f0:	f0 01       	movw	r30, r0
    20f2:	72 9f       	mul	r23, r18
    20f4:	bb 27       	eor	r27, r27
    20f6:	f0 0d       	add	r31, r0
    20f8:	b1 1d       	adc	r27, r1
    20fa:	63 9f       	mul	r22, r19
    20fc:	aa 27       	eor	r26, r26
    20fe:	f0 0d       	add	r31, r0
    2100:	b1 1d       	adc	r27, r1
    2102:	aa 1f       	adc	r26, r26
    2104:	64 9f       	mul	r22, r20
    2106:	66 27       	eor	r22, r22
    2108:	b0 0d       	add	r27, r0
    210a:	a1 1d       	adc	r26, r1
    210c:	66 1f       	adc	r22, r22
    210e:	82 9f       	mul	r24, r18
    2110:	22 27       	eor	r18, r18
    2112:	b0 0d       	add	r27, r0
    2114:	a1 1d       	adc	r26, r1
    2116:	62 1f       	adc	r22, r18
    2118:	73 9f       	mul	r23, r19
    211a:	b0 0d       	add	r27, r0
    211c:	a1 1d       	adc	r26, r1
    211e:	62 1f       	adc	r22, r18
    2120:	83 9f       	mul	r24, r19
    2122:	a0 0d       	add	r26, r0
    2124:	61 1d       	adc	r22, r1
    2126:	22 1f       	adc	r18, r18
    2128:	74 9f       	mul	r23, r20
    212a:	33 27       	eor	r19, r19
    212c:	a0 0d       	add	r26, r0
    212e:	61 1d       	adc	r22, r1
    2130:	23 1f       	adc	r18, r19
    2132:	84 9f       	mul	r24, r20
    2134:	60 0d       	add	r22, r0
    2136:	21 1d       	adc	r18, r1
    2138:	82 2f       	mov	r24, r18
    213a:	76 2f       	mov	r23, r22
    213c:	6a 2f       	mov	r22, r26
    213e:	11 24       	eor	r1, r1
    2140:	9f 57       	subi	r25, 0x7F	; 127
    2142:	50 40       	sbci	r21, 0x00	; 0
    2144:	9a f0       	brmi	.+38     	; 0x216c <__mulsf3_pse+0x88>
    2146:	f1 f0       	breq	.+60     	; 0x2184 <__mulsf3_pse+0xa0>
    2148:	88 23       	and	r24, r24
    214a:	4a f0       	brmi	.+18     	; 0x215e <__mulsf3_pse+0x7a>
    214c:	ee 0f       	add	r30, r30
    214e:	ff 1f       	adc	r31, r31
    2150:	bb 1f       	adc	r27, r27
    2152:	66 1f       	adc	r22, r22
    2154:	77 1f       	adc	r23, r23
    2156:	88 1f       	adc	r24, r24
    2158:	91 50       	subi	r25, 0x01	; 1
    215a:	50 40       	sbci	r21, 0x00	; 0
    215c:	a9 f7       	brne	.-22     	; 0x2148 <__mulsf3_pse+0x64>
    215e:	9e 3f       	cpi	r25, 0xFE	; 254
    2160:	51 05       	cpc	r21, r1
    2162:	80 f0       	brcs	.+32     	; 0x2184 <__mulsf3_pse+0xa0>
    2164:	0c 94 c9 10 	jmp	0x2192	; 0x2192 <__fp_inf>
    2168:	0c 94 56 10 	jmp	0x20ac	; 0x20ac <__fp_szero>
    216c:	5f 3f       	cpi	r21, 0xFF	; 255
    216e:	e4 f3       	brlt	.-8      	; 0x2168 <__mulsf3_pse+0x84>
    2170:	98 3e       	cpi	r25, 0xE8	; 232
    2172:	d4 f3       	brlt	.-12     	; 0x2168 <__mulsf3_pse+0x84>
    2174:	86 95       	lsr	r24
    2176:	77 95       	ror	r23
    2178:	67 95       	ror	r22
    217a:	b7 95       	ror	r27
    217c:	f7 95       	ror	r31
    217e:	e7 95       	ror	r30
    2180:	9f 5f       	subi	r25, 0xFF	; 255
    2182:	c1 f7       	brne	.-16     	; 0x2174 <__mulsf3_pse+0x90>
    2184:	fe 2b       	or	r31, r30
    2186:	88 0f       	add	r24, r24
    2188:	91 1d       	adc	r25, r1
    218a:	96 95       	lsr	r25
    218c:	87 95       	ror	r24
    218e:	97 f9       	bld	r25, 7
    2190:	08 95       	ret

00002192 <__fp_inf>:
    2192:	97 f9       	bld	r25, 7
    2194:	9f 67       	ori	r25, 0x7F	; 127
    2196:	80 e8       	ldi	r24, 0x80	; 128
    2198:	70 e0       	ldi	r23, 0x00	; 0
    219a:	60 e0       	ldi	r22, 0x00	; 0
    219c:	08 95       	ret

0000219e <__fp_nan>:
    219e:	9f ef       	ldi	r25, 0xFF	; 255
    21a0:	80 ec       	ldi	r24, 0xC0	; 192
    21a2:	08 95       	ret

000021a4 <__fp_pscA>:
    21a4:	00 24       	eor	r0, r0
    21a6:	0a 94       	dec	r0
    21a8:	16 16       	cp	r1, r22
    21aa:	17 06       	cpc	r1, r23
    21ac:	18 06       	cpc	r1, r24
    21ae:	09 06       	cpc	r0, r25
    21b0:	08 95       	ret

000021b2 <__fp_pscB>:
    21b2:	00 24       	eor	r0, r0
    21b4:	0a 94       	dec	r0
    21b6:	12 16       	cp	r1, r18
    21b8:	13 06       	cpc	r1, r19
    21ba:	14 06       	cpc	r1, r20
    21bc:	05 06       	cpc	r0, r21
    21be:	08 95       	ret

000021c0 <__fp_round>:
    21c0:	09 2e       	mov	r0, r25
    21c2:	03 94       	inc	r0
    21c4:	00 0c       	add	r0, r0
    21c6:	11 f4       	brne	.+4      	; 0x21cc <__fp_round+0xc>
    21c8:	88 23       	and	r24, r24
    21ca:	52 f0       	brmi	.+20     	; 0x21e0 <__fp_round+0x20>
    21cc:	bb 0f       	add	r27, r27
    21ce:	40 f4       	brcc	.+16     	; 0x21e0 <__fp_round+0x20>
    21d0:	bf 2b       	or	r27, r31
    21d2:	11 f4       	brne	.+4      	; 0x21d8 <__fp_round+0x18>
    21d4:	60 ff       	sbrs	r22, 0
    21d6:	04 c0       	rjmp	.+8      	; 0x21e0 <__fp_round+0x20>
    21d8:	6f 5f       	subi	r22, 0xFF	; 255
    21da:	7f 4f       	sbci	r23, 0xFF	; 255
    21dc:	8f 4f       	sbci	r24, 0xFF	; 255
    21de:	9f 4f       	sbci	r25, 0xFF	; 255
    21e0:	08 95       	ret

000021e2 <__itoa_ncheck>:
    21e2:	bb 27       	eor	r27, r27
    21e4:	4a 30       	cpi	r20, 0x0A	; 10
    21e6:	31 f4       	brne	.+12     	; 0x21f4 <__itoa_ncheck+0x12>
    21e8:	99 23       	and	r25, r25
    21ea:	22 f4       	brpl	.+8      	; 0x21f4 <__itoa_ncheck+0x12>
    21ec:	bd e2       	ldi	r27, 0x2D	; 45
    21ee:	90 95       	com	r25
    21f0:	81 95       	neg	r24
    21f2:	9f 4f       	sbci	r25, 0xFF	; 255
    21f4:	0c 94 fd 10 	jmp	0x21fa	; 0x21fa <__utoa_common>

000021f8 <__utoa_ncheck>:
    21f8:	bb 27       	eor	r27, r27

000021fa <__utoa_common>:
    21fa:	fb 01       	movw	r30, r22
    21fc:	55 27       	eor	r21, r21
    21fe:	aa 27       	eor	r26, r26
    2200:	88 0f       	add	r24, r24
    2202:	99 1f       	adc	r25, r25
    2204:	aa 1f       	adc	r26, r26
    2206:	a4 17       	cp	r26, r20
    2208:	10 f0       	brcs	.+4      	; 0x220e <__utoa_common+0x14>
    220a:	a4 1b       	sub	r26, r20
    220c:	83 95       	inc	r24
    220e:	50 51       	subi	r21, 0x10	; 16
    2210:	b9 f7       	brne	.-18     	; 0x2200 <__utoa_common+0x6>
    2212:	a0 5d       	subi	r26, 0xD0	; 208
    2214:	aa 33       	cpi	r26, 0x3A	; 58
    2216:	08 f0       	brcs	.+2      	; 0x221a <__utoa_common+0x20>
    2218:	a9 5d       	subi	r26, 0xD9	; 217
    221a:	a1 93       	st	Z+, r26
    221c:	00 97       	sbiw	r24, 0x00	; 0
    221e:	79 f7       	brne	.-34     	; 0x21fe <__utoa_common+0x4>
    2220:	b1 11       	cpse	r27, r1
    2222:	b1 93       	st	Z+, r27
    2224:	11 92       	st	Z+, r1
    2226:	cb 01       	movw	r24, r22
    2228:	0c 94 16 11 	jmp	0x222c	; 0x222c <strrev>

0000222c <strrev>:
    222c:	dc 01       	movw	r26, r24
    222e:	fc 01       	movw	r30, r24
    2230:	67 2f       	mov	r22, r23
    2232:	71 91       	ld	r23, Z+
    2234:	77 23       	and	r23, r23
    2236:	e1 f7       	brne	.-8      	; 0x2230 <strrev+0x4>
    2238:	32 97       	sbiw	r30, 0x02	; 2
    223a:	04 c0       	rjmp	.+8      	; 0x2244 <strrev+0x18>
    223c:	7c 91       	ld	r23, X
    223e:	6d 93       	st	X+, r22
    2240:	70 83       	st	Z, r23
    2242:	62 91       	ld	r22, -Z
    2244:	ae 17       	cp	r26, r30
    2246:	bf 07       	cpc	r27, r31
    2248:	c8 f3       	brcs	.-14     	; 0x223c <strrev+0x10>
    224a:	08 95       	ret

0000224c <_exit>:
    224c:	f8 94       	cli

0000224e <__stop_program>:
    224e:	ff cf       	rjmp	.-2      	; 0x224e <__stop_program>
